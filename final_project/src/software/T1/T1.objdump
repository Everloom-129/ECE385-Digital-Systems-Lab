
T1.elf:     file format elf32-littlenios2
T1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000224

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00012b08 memsz 0x00012b08 flags r-x
    LOAD off    0x00013b28 vaddr 0x10012b28 paddr 0x10014700 align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x000162d8 vaddr 0x100162d8 paddr 0x100162d8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011b34  10000224  10000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000dd0  10011d58  10011d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  10012b28  10014700  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  100162d8  100162d8  000162d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015700  2**0
                  CONTENTS
  7 .sdram        00000000  10016434  10016434  00015700  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00015700  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000010c0  00000000  00000000  00015730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0002dfb8  00000000  00000000  000167f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000b621  00000000  00000000  000447a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000174ca  00000000  00000000  0004fdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00002700  00000000  00000000  00067294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00003ff8  00000000  00000000  00069994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001e257  00000000  00000000  0006d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000040  00000000  00000000  0008bbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002438  00000000  00000000  0008bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  00091657  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0009165a  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00091666  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00091667  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00091668  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0009166c  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00091670  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00091674  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0009167f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0009168a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00091695  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003e  00000000  00000000  0009169d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000224 l    d  .text	00000000 .text
10011d58 l    d  .rodata	00000000 .rodata
10012b28 l    d  .rwdata	00000000 .rwdata
100162d8 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10016434 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/intelFPGA_lite/ECE385-Digital-Systems-Lab/final_project/src/software/T1_bsp//obj/HAL/src/crt0.o
1000025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100162d8 l     O .bss	00000002 ctl_reg.1
100162da l     O .bss	00000002 no_device.0
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10004580 l     F .text	000000c0 __sbprintf
10012528 l     O .rodata	00000010 blanks.1
10012518 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100047a4 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006418 l     F .text	00000008 __fp_lock
1000642c l     F .text	00000008 __fp_unlock
10006434 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10012b28 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100125dc l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009904 l     F .text	000000f4 __sprint_r.part.0
1000ad70 l     F .text	000000c0 __sbprintf
10012710 l     O .rodata	00000010 blanks.1
10012700 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
1000b028 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000f498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000f5b0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000f614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1000f72c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
1000f818 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000f980 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000fa6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000fc4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100146f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000fee8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010028 l     F .text	00000034 alt_dev_reg
10013668 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010308 l     F .text	0000020c altera_avalon_jtag_uart_irq
10010514 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010e04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011268 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100113b8 l     F .text	0000003c alt_get_errno
100113f4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
10016308 g     O .bss	00000004 alt_instruction_exception_handler
100090bc g     F .text	00000070 _mprec_log10
100091a8 g     F .text	00000060 __any_on
1000b480 g     F .text	00000058 _isatty_r
100125e8 g     O .rodata	00000028 __mprec_tinytens
1000fb88 g     F .text	0000007c alt_main
100022ec g     F .text	000000cc _puts_r
10016334 g     O .bss	00000100 alt_irq
1000b5cc g     F .text	00000064 _lseek_r
10014700 g       *ABS*	00000000 __flash_rwdata_start
1000df78 g     F .text	00000080 .hidden __eqdf2
10016434 g       *ABS*	00000000 __alt_heap_start
1000bf34 g     F .text	00000060 _kill_r
100022b4 g     F .text	00000038 printf
1000b900 g     F .text	0000006c _wcrtomb_r
1000baa4 g     F .text	00000098 _signal_r
100098a0 g     F .text	0000005c __sseek
1000677c g     F .text	00000010 __sinit
1000b7a0 g     F .text	00000148 __swbuf_r
1000b4d8 g     F .text	00000074 _setlocale_r
1000659c g     F .text	00000078 __sfmoreglue
1000fc28 g     F .text	00000024 __malloc_unlock
10002180 g     F .text	00000080 UsbGetRetryCnt
10007dfc g     F .text	0000012c memmove
10000260 g     F .text	00000088 IO_init
10006768 g     F .text	00000014 _cleanup
10008018 g     F .text	000000a4 _Balloc
1000dff8 g     F .text	000000e8 .hidden __gtdf2
100117dc g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
100071e4 g     F .text	00000008 __localeconv_l
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b420 g     F .text	00000060 _fstat_r
100162e8 g     O .bss	00000004 errno
10009818 g     F .text	00000008 __seofread
100162f4 g     O .bss	00000004 alt_argv
1001c6c8 g       *ABS*	00000000 _gp
1000feb8 g     F .text	00000030 usleep
1000f70c g     F .text	00000020 getpid
100134e8 g     O .rwdata	00000180 alt_fd_list
10011800 g     F .text	00000090 alt_find_dev
10007cfc g     F .text	00000100 memcpy
10006420 g     F .text	0000000c _cleanup_r
1000f2fc g     F .text	000000b8 .hidden __floatsidf
1001133c g     F .text	0000007c alt_io_redirect
1000e0e0 g     F .text	000000e8 .hidden __ltdf2
10011d58 g       *ABS*	00000000 __DTOR_END__
100023b8 g     F .text	00000010 puts
10011a50 g     F .text	00000098 alt_exception_cause_generated_bad_addr
10009018 g     F .text	000000a4 __ratio
1000ad54 g     F .text	0000001c __vfiprintf_internal
10010710 g     F .text	00000220 altera_avalon_jtag_uart_read
10002284 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000cc70 g     F .text	00000064 .hidden __udivsi3
1000f768 g     F .text	000000b0 isatty
1000bb3c g     F .text	000000c4 _raise_r
1000aeec g     F .text	00000064 __assert_func
10012638 g     O .rodata	000000c8 __mprec_tens
100162e4 g     O .bss	00000004 __malloc_top_pad
1000180c g     F .text	00000268 UsbGetConfigDesc2
1000bf94 g     F .text	00000004 _getpid_r
100071ec g     F .text	0000000c _localeconv_r
10008488 g     F .text	000000b0 __i2b
10006bdc g     F .text	000004c8 __sfvwrite_r
1000bc00 g     F .text	000000bc __sigtramp_r
1000976c g     F .text	00000058 _sbrk_r
1000b680 g     F .text	00000064 _read_r
100146e8 g     O .rwdata	00000004 alt_max_fd
1000b0e8 g     F .text	00000070 _fclose_r
10006394 g     F .text	00000084 fflush
100162e0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000cd58 g     F .text	000008f0 .hidden __adddf3
10008dac g     F .text	00000108 __b2d
1000c5b8 g     F .text	000005c4 .hidden __umoddi3
1000faa8 g     F .text	000000e0 lseek
100146c8 g     O .rwdata	00000004 _global_impure_ptr
10009208 g     F .text	00000564 _realloc_r
10016434 g       *ABS*	00000000 __bss_end
10011180 g     F .text	000000e8 alt_iic_isr_register
100116d4 g     F .text	00000108 alt_tick
1000bf98 g     F .text	00000620 .hidden __udivdi3
1000b384 g     F .text	00000024 _fputwc_r
10012610 g     O .rodata	00000028 __mprec_bigtens
1000823c g     F .text	00000138 __s2b
1000ba30 g     F .text	00000018 abort
1000f3b4 g     F .text	00000090 .hidden __floatunsidf
10008acc g     F .text	00000058 __mcmp
1000125c g     F .text	00000100 UsbSetAddress
1000679c g     F .text	00000014 __fp_lock_all
10011134 g     F .text	0000004c alt_ic_irq_enabled
10011630 g     F .text	000000a4 alt_alarm_stop
100162fc g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000c8 alt_irq_handler
100134c0 g     O .rwdata	00000028 alt_dev_null
10010de4 g     F .text	00000020 alt_dcache_flush_all
10008374 g     F .text	00000064 __hi0bits
1000035c g     F .text	00000068 IO_read
1000f27c g     F .text	00000080 .hidden __fixdfsi
10014700 g       *ABS*	00000000 __ram_rwdata_end
100146e0 g     O .rwdata	00000008 alt_dev_list
1000ff24 g     F .text	00000104 write
10012b28 g       *ABS*	00000000 __ram_rodata_end
1000f650 g     F .text	000000bc fstat
1000f854 g     F .text	0000012c kill
1000e0e0 g     F .text	000000e8 .hidden __ledf2
10002200 g     F .text	00000084 UsbPrintMem
100087fc g     F .text	00000148 __pow5mult
10009a10 g     F .text	00001344 ___vfiprintf_internal_r
1000ccd4 g     F .text	0000005c .hidden __umodsi3
10016434 g       *ABS*	00000000 end
10010248 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
10011d58 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000f444 g     F .text	00000054 .hidden __clzsi2
10010930 g     F .text	00000228 altera_avalon_jtag_uart_write
1000678c g     F .text	00000004 __sfp_lock_acquire
10007c2c g     F .text	000000d0 memchr
10002460 g     F .text	00002104 ___vfprintf_internal_r
10001b74 g     F .text	00000100 UsbClassRequest
100068e0 g     F .text	000002fc _free_r
10012874 g     O .rodata	00000180 _ctype_b
1000b54c g     F .text	0000000c __locale_mb_cur_max
10011c38 g     F .text	00000120 __call_exitprocs
100146d0 g     O .rwdata	00000004 __malloc_sbrk_base
10000224 g     F .text	0000003c _start
10016300 g     O .bss	00000004 _alt_tick_rate
10008944 g     F .text	00000188 __lshift
10016304 g     O .bss	00000004 _alt_nticks
1000bd78 g     F .text	000000a0 signal
1000fc88 g     F .text	00000108 read
10010098 g     F .text	0000004c alt_sys_init
10011ba8 g     F .text	00000090 __register_exitproc
10008538 g     F .text	000002c4 __multiply
100105b4 g     F .text	00000068 altera_avalon_jtag_uart_close
1000cd30 g     F .text	00000028 .hidden __mulsi3
10012b28 g       *ABS*	00000000 __ram_rwdata_start
10011d58 g       *ABS*	00000000 __ram_rodata_start
1001630c g     O .bss	00000028 __malloc_current_mallinfo
10008eb4 g     F .text	00000164 __d2b
1000135c g     F .text	00000148 UsbGetDeviceDesc1
100100e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10011998 g     F .text	000000b8 alt_get_fd
10010c8c g     F .text	00000158 alt_busy_sleep
1000ae94 g     F .text	00000058 _close_r
10011b30 g     F .text	00000078 memcmp
100101a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10016434 g       *ABS*	00000000 __alt_stack_base
100101f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004640 g     F .text	00000164 __swsetup_r
1000d648 g     F .text	00000930 .hidden __divdf3
10006614 g     F .text	00000154 __sfp
1000912c g     F .text	0000007c __copybits
10012f4c g     O .rwdata	00000408 __malloc_av_
10006798 g     F .text	00000004 __sinit_lock_release
1000e1c8 g     F .text	000007ac .hidden __muldf3
100097c4 g     F .text	00000054 __sread
100020fc g     F .text	00000084 UsbWaitTDListDone
10011890 g     F .text	00000108 alt_find_file
10010e40 g     F .text	000000a8 alt_dev_llist_insert
1000fc04 g     F .text	00000024 __malloc_lock
1000fe00 g     F .text	000000b8 sbrk
10006334 g     F .text	00000060 _fflush_r
1000af64 g     F .text	000000c4 _calloc_r
100162d8 g       *ABS*	00000000 __bss_start
10007f28 g     F .text	000000f0 memset
100003c4 g     F .text	00000d44 main
100162f8 g     O .bss	00000004 alt_envp
100162dc g     O .bss	00000004 __malloc_max_total_mem
10010144 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a74 g     F .text	00000100 UsbSetConfig
1000b8e8 g     F .text	00000018 __swbuf
100098fc g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000b158 g     F .text	00000070 fclose
100049c4 g     F .text	00001748 _dtoa_r
1000744c g     F .text	000007e0 _malloc_r
1000ba00 g     F .text	00000030 __ascii_wctomb
100146ec g     O .rwdata	00000004 alt_errno
1000b1c8 g     F .text	00000020 _fiprintf_r
1000be18 g     F .text	00000060 _init_signal
100070a4 g     F .text	00000098 _fwalk
1000b630 g     F .text	0000000c _mbtowc_r
1000cb7c g     F .text	00000080 .hidden __divsi3
100067c4 g     F .text	0000011c _malloc_trim_r
10001c74 g     F .text	00000148 UsbGetHidDesc
10011d58 g       *ABS*	00000000 __CTOR_END__
1000b6e4 g     F .text	000000b8 strcmp
10011d58 g       *ABS*	00000000 __flash_rodata_start
10011d58 g       *ABS*	00000000 __DTOR_LIST__
1000df78 g     F .text	00000080 .hidden __nedf2
10001164 g     F .text	00000044 UsbRead
1001005c g     F .text	0000003c alt_irq_init
1000fd90 g     F .text	00000070 alt_release_fd
100129f4 g     O .rodata	00000100 .hidden __clz_tab
100162ec g     O .bss	00000004 _PathLocale
10011ae8 g     F .text	00000014 atexit
1000ae30 g     F .text	00000064 _write_r
1000b558 g     F .text	00000074 setlocale
100146cc g     O .rwdata	00000004 _impure_ptr
100162f0 g     O .bss	00000004 alt_argc
1000610c g     F .text	00000228 __sflush_r
10010f4c g     F .text	00000064 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
1000b63c g     F .text	00000044 __ascii_mbtowc
10008d50 g     F .text	0000005c __ulp
100067b0 g     F .text	00000014 __fp_unlock_all
100146d8 g     O .rwdata	00000008 alt_fs_list
10001dbc g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100071f8 g     F .text	0000000c localeconv
100073b4 g     F .text	00000098 __swhatbuf_r
10010fd0 g     F .text	00000050 alt_ic_isr_register
10014700 g       *ABS*	00000000 _edata
10016434 g       *ABS*	00000000 _end
10001108 g     F .text	0000005c UsbWrite
1000b220 g     F .text	00000164 __fputwc
10000224 g       *ABS*	00000000 __ram_exceptions_end
1001061c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
100110a8 g     F .text	0000008c alt_ic_irq_disable
10009820 g     F .text	00000080 __swrite
100146d4 g     O .rwdata	00000004 __malloc_trim_threshold
10011afc g     F .text	00000034 exit
1000b1e8 g     F .text	00000038 fiprintf
1000b79c g     F .text	00000004 _vfiprintf_r
1000713c g     F .text	000000a8 _fwalk_reent
10008b24 g     F .text	0000022c __mdiff
1000cbfc g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006790 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002e8 g     F .text	00000074 IO_write
10012770 g     O .rodata	00000101 _ctype_
1000f228 g     F .text	00000054 .hidden __unorddf2
1000f5dc g     F .text	00000038 _exit
10010b58 g     F .text	00000134 alt_alarm_start
10007204 g     F .text	000001b0 __smakebuf_r
100023c8 g     F .text	00000098 strlen
1000ba48 g     F .text	0000005c _init_signal_r
100114d0 g     F .text	00000160 open
1000dff8 g     F .text	000000e8 .hidden __gedf2
1000af50 g     F .text	00000014 __assert
100099f8 g     F .text	00000018 __sprint_r
10010fb0 g     F .text	00000020 alt_icache_flush_all
100146f4 g     O .rwdata	00000004 alt_priority_mask
10011020 g     F .text	00000088 alt_ic_irq_enable
10004564 g     F .text	0000001c __vfprintf_internal
1000b9f4 g     F .text	0000000c _wctomb_r
1000e974 g     F .text	000008b4 .hidden __subdf3
100083d8 g     F .text	000000b0 __lo0bits
1000167c g     F .text	00000190 UsbGetConfigDesc1
100146f8 g     O .rwdata	00000008 alt_alarm_list
10010ee8 g     F .text	00000064 _do_ctors
1000be78 g     F .text	000000bc __sigtramp
100011a8 g     F .text	000000b4 UsbSoftReset
1000b96c g     F .text	00000088 wcrtomb
1000f4d4 g     F .text	000000dc close
100014a4 g     F .text	000001d8 UsbGetDeviceDesc2
10013354 g     O .rwdata	0000016c __global_locale
1000f9e8 g     F .text	00000084 alt_load
1000b3a8 g     F .text	00000078 fputwc
1000bcbc g     F .text	000000bc raise
10006794 g     F .text	00000004 __sinit_lock_acquire
100080e0 g     F .text	0000015c __multadd
100080bc g     F .text	00000024 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408914 	ori	at,at,548
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001c40 	call	100001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
10000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0ffff17 	ldw	r3,-4(fp)
10000130:	e0bffe17 	ldw	r2,-8(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001126 	beq	r2,zero,10000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	e0bffd17 	ldw	r2,-12(fp)
10000140:	100690fa 	slli	r3,r2,3
10000144:	00840074 	movhi	r2,4097
10000148:	1885883a 	add	r2,r3,r2
1000014c:	10d8cd17 	ldw	r3,25396(r2)
10000150:	e0bffd17 	ldw	r2,-12(fp)
10000154:	100890fa 	slli	r4,r2,3
10000158:	00840074 	movhi	r2,4097
1000015c:	2085883a 	add	r2,r4,r2
10000160:	1098ce17 	ldw	r2,25400(r2)
10000164:	1009883a 	mov	r4,r2
10000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
1000016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
10000170:	0005313a 	rdctl	r2,ipending
10000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
10000178:	e0bffb17 	ldw	r2,-20(fp)
1000017c:	00000706 	br	1000019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
10000180:	e0bffe17 	ldw	r2,-8(fp)
10000184:	1085883a 	add	r2,r2,r2
10000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
1000018c:	e0bffd17 	ldw	r2,-12(fp)
10000190:	10800044 	addi	r2,r2,1
10000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
10000198:	003fe406 	br	1000012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
1000019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
100001a0:	e0bfff17 	ldw	r2,-4(fp)
100001a4:	103fde1e 	bne	r2,zero,10000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a8:	0001883a 	nop
}
100001ac:	0001883a 	nop
100001b0:	e037883a 	mov	sp,fp
100001b4:	dfc00117 	ldw	ra,4(sp)
100001b8:	df000017 	ldw	fp,0(sp)
100001bc:	dec00204 	addi	sp,sp,8
100001c0:	f800283a 	ret

100001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001c4:	defffb04 	addi	sp,sp,-20
100001c8:	dfc00415 	stw	ra,16(sp)
100001cc:	df000315 	stw	fp,12(sp)
100001d0:	df000304 	addi	fp,sp,12
100001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001d8:	00bfffc4 	movi	r2,-1
100001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
100001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001e4:	d0a71017 	ldw	r2,-25536(gp)
100001e8:	10000726 	beq	r2,zero,10000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001ec:	d0a71017 	ldw	r2,-25536(gp)
100001f0:	e0ffff17 	ldw	r3,-4(fp)
100001f4:	e1bffe17 	ldw	r6,-8(fp)
100001f8:	e17ffd17 	ldw	r5,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	103ee83a 	callr	r2
10000204:	00000206 	br	10000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1000020c:	0005883a 	mov	r2,zero
}
10000210:	e037883a 	mov	sp,fp
10000214:	dfc00117 	ldw	ra,4(sp)
10000218:	df000017 	ldw	fp,0(sp)
1000021c:	dec00204 	addi	sp,sp,8
10000220:	f800283a 	ret

Disassembly of section .text:

10000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000224:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1000022c:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000230:	d6b1b214 	ori	gp,gp,50888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000234:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000238:	1098b614 	ori	r2,r2,25304

    movhi r3, %hi(__bss_end)
1000023c:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000240:	18d90d14 	ori	r3,r3,25652

    beq r2, r3, 1f
10000244:	10c00326 	beq	r2,r3,10000254 <_start+0x30>

0:
    stw zero, (r2)
10000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1000024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000250:	10fffd36 	bltu	r2,r3,10000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000254:	000f9e80 	call	1000f9e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000258:	000fb880 	call	1000fb88 <alt_main>

1000025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1000025c:	003fff06 	br	1000025c <alt_after_alt_main>

10000260 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10000260:	deffff04 	addi	sp,sp,-4
10000264:	df000015 	stw	fp,0(sp)
10000268:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
1000026c:	00800804 	movi	r2,32
10000270:	00c00044 	movi	r3,1
10000274:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000278:	00800c04 	movi	r2,48
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000284:	00801404 	movi	r2,80
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10000290:	00801004 	movi	r2,64
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
1000029c:	00801c04 	movi	r2,112
100002a0:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002a4:	00801804 	movi	r2,96
100002a8:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002ac:	00800c04 	movi	r2,48
100002b0:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002b4:	00800804 	movi	r2,32
100002b8:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002bc:	00800804 	movi	r2,32
100002c0:	00c00044 	movi	r3,1
100002c4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002c8:	00800c04 	movi	r2,48
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
}
100002d4:	0001883a 	nop
100002d8:	e037883a 	mov	sp,fp
100002dc:	df000017 	ldw	fp,0(sp)
100002e0:	dec00104 	addi	sp,sp,4
100002e4:	f800283a 	ret

100002e8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002e8:	defffd04 	addi	sp,sp,-12
100002ec:	df000215 	stw	fp,8(sp)
100002f0:	df000204 	addi	fp,sp,8
100002f4:	2005883a 	mov	r2,r4
100002f8:	2807883a 	mov	r3,r5
100002fc:	e0bfff05 	stb	r2,-4(fp)
10000300:	1805883a 	mov	r2,r3
10000304:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000308:	00801c04 	movi	r2,112
1000030c:	e0ffff03 	ldbu	r3,-4(fp)
10000310:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000314:	00801804 	movi	r2,96
10000318:	e0fffe0b 	ldhu	r3,-8(fp)
1000031c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000320:	00800c04 	movi	r2,48
10000324:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000328:	00801004 	movi	r2,64
1000032c:	10000005 	stb	zero,0(r2)

	// Reset OTG chip
	*otg_hpi_w = 1;
10000330:	00801004 	movi	r2,64
10000334:	00c00044 	movi	r3,1
10000338:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000033c:	00800c04 	movi	r2,48
10000340:	00c00044 	movi	r3,1
10000344:	10c00005 	stb	r3,0(r2)
}
10000348:	0001883a 	nop
1000034c:	e037883a 	mov	sp,fp
10000350:	df000017 	ldw	fp,0(sp)
10000354:	dec00104 	addi	sp,sp,4
10000358:	f800283a 	ret

1000035c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000035c:	defffd04 	addi	sp,sp,-12
10000360:	df000215 	stw	fp,8(sp)
10000364:	df000204 	addi	fp,sp,8
10000368:	2005883a 	mov	r2,r4
1000036c:	e0bffe05 	stb	r2,-8(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000370:	00801c04 	movi	r2,112
10000374:	e0fffe03 	ldbu	r3,-8(fp)
10000378:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
1000037c:	00800c04 	movi	r2,48
10000380:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
10000384:	00801404 	movi	r2,80
10000388:	10000005 	stb	zero,0(r2)
	data = *otg_hpi_data;
1000038c:	00801804 	movi	r2,96
10000390:	10800017 	ldw	r2,0(r2)
10000394:	e0bfff8d 	sth	r2,-2(fp)

	// Reset OTG chip
	*otg_hpi_r = 1;
10000398:	00801404 	movi	r2,80
1000039c:	00c00044 	movi	r3,1
100003a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003a4:	00800c04 	movi	r2,48
100003a8:	00c00044 	movi	r3,1
100003ac:	10c00005 	stb	r3,0(r2)

	return data;
100003b0:	e0bfff8b 	ldhu	r2,-2(fp)
}
100003b4:	e037883a 	mov	sp,fp
100003b8:	df000017 	ldw	fp,0(sp)
100003bc:	dec00104 	addi	sp,sp,4
100003c0:	f800283a 	ret

100003c4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003c4:	defff904 	addi	sp,sp,-28
100003c8:	dfc00615 	stw	ra,24(sp)
100003cc:	df000515 	stw	fp,20(sp)
100003d0:	df000504 	addi	fp,sp,20
	IO_init();
100003d4:	00002600 	call	10000260 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003d8:	e03ffe8d 	sth	zero,-6(fp)
	int keycode = 0;
100003dc:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100003e0:	e03fff45 	stb	zero,-3(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003e4:	01040074 	movhi	r4,4097
100003e8:	21075604 	addi	r4,r4,7512
100003ec:	00023b80 	call	100023b8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f0:	00011a80 	call	100011a8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003f4:	000b883a 	mov	r5,zero
100003f8:	01005104 	movi	r4,324
100003fc:	00011080 	call	10001108 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000400:	017fffd4 	movui	r5,65535
10000404:	01302414 	movui	r4,49296
10000408:	00011080 	call	10001108 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
1000040c:	01409604 	movi	r5,600
10000410:	01006d04 	movi	r4,436
10000414:	00011080 	call	10001108 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000418:	00811004 	movi	r2,1088
1000041c:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000420:	e0bfff8b 	ldhu	r2,-2(fp)
10000424:	100b883a 	mov	r5,r2
10000428:	01005084 	movi	r4,322
1000042c:	00011080 	call	10001108 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000430:	00808404 	movi	r2,528
10000434:	e0bffc8d 	sth	r2,-14(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000438:	e0bffc8b 	ldhu	r2,-14(fp)
1000043c:	100b883a 	mov	r5,r2
10000440:	01302314 	movui	r4,49292
10000444:	00011080 	call	10001108 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000448:	000b883a 	mov	r5,zero
1000044c:	01007104 	movi	r4,452
10000450:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000454:	000b883a 	mov	r5,zero
10000458:	01007184 	movi	r4,454
1000045c:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000460:	000b883a 	mov	r5,zero
10000464:	01007204 	movi	r4,456
10000468:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000046c:	000b883a 	mov	r5,zero
10000470:	01007284 	movi	r4,458
10000474:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000478:	000b883a 	mov	r5,zero
1000047c:	01007304 	movi	r4,460
10000480:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000484:	000b883a 	mov	r5,zero
10000488:	01007384 	movi	r4,462
1000048c:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000490:	000b883a 	mov	r5,zero
10000494:	01007404 	movi	r4,464
10000498:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000049c:	000b883a 	mov	r5,zero
100004a0:	01007484 	movi	r4,466
100004a4:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004a8:	000b883a 	mov	r5,zero
100004ac:	01007504 	movi	r4,468
100004b0:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004b4:	000b883a 	mov	r5,zero
100004b8:	01007584 	movi	r4,470
100004bc:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c0:	000b883a 	mov	r5,zero
100004c4:	01007604 	movi	r4,472
100004c8:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004cc:	000b883a 	mov	r5,zero
100004d0:	01007684 	movi	r4,474
100004d4:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004d8:	000b883a 	mov	r5,zero
100004dc:	01007704 	movi	r4,476
100004e0:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004e4:	000b883a 	mov	r5,zero
100004e8:	01007784 	movi	r4,478
100004ec:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f0:	01401c84 	movi	r5,114
100004f4:	01007084 	movi	r4,450
100004f8:	00011080 	call	10001108 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100004fc:	01738054 	movui	r5,52737
10000500:	01000044 	movi	r4,1
10000504:	00002e80 	call	100002e8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000508:	0001883a 	nop
1000050c:	010000c4 	movi	r4,3
10000510:	000035c0 	call	1000035c <IO_read>
10000514:	10bfffcc 	andi	r2,r2,65535
10000518:	103ffc26 	beq	r2,zero,1000050c <main+0x148>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000051c:	00000806 	br	10000540 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000520:	01000044 	movi	r4,1
10000524:	000035c0 	call	1000035c <IO_read>
10000528:	10bfffcc 	andi	r2,r2,65535
1000052c:	100b883a 	mov	r5,r2
10000530:	01040074 	movhi	r4,4097
10000534:	21075c04 	addi	r4,r4,7536
10000538:	00022b40 	call	100022b4 <printf>
		goto USB_HOT_PLUG;
1000053c:	003fac06 	br	100003f0 <main+0x2c>
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000540:	01000044 	movi	r4,1
10000544:	000035c0 	call	1000035c <IO_read>
10000548:	10bfffcc 	andi	r2,r2,65535
1000054c:	1083fb58 	cmpnei	r2,r2,4077
10000550:	103ff31e 	bne	r2,zero,10000520 <main+0x15c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000554:	01040074 	movhi	r4,4097
10000558:	21076504 	addi	r4,r4,7572
1000055c:	00022b40 	call	100022b4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000560:	01401d04 	movi	r5,116
10000564:	01007084 	movi	r4,450
10000568:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000056c:	01400f04 	movi	r5,60
10000570:	01007104 	movi	r4,452
10000574:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000578:	000b883a 	mov	r5,zero
1000057c:	01007184 	movi	r4,454
10000580:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000584:	000b883a 	mov	r5,zero
10000588:	01007204 	movi	r4,456
1000058c:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000590:	000b883a 	mov	r5,zero
10000594:	01007284 	movi	r4,458
10000598:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000059c:	000b883a 	mov	r5,zero
100005a0:	01007304 	movi	r4,460
100005a4:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005a8:	000b883a 	mov	r5,zero
100005ac:	01007384 	movi	r4,462
100005b0:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005b4:	000b883a 	mov	r5,zero
100005b8:	01007404 	movi	r4,464
100005bc:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005c0:	000b883a 	mov	r5,zero
100005c4:	01007484 	movi	r4,466
100005c8:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005cc:	000b883a 	mov	r5,zero
100005d0:	01007504 	movi	r4,468
100005d4:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005d8:	000b883a 	mov	r5,zero
100005dc:	01007584 	movi	r4,470
100005e0:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005e4:	000b883a 	mov	r5,zero
100005e8:	01007604 	movi	r4,472
100005ec:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005f0:	000b883a 	mov	r5,zero
100005f4:	01007684 	movi	r4,474
100005f8:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005fc:	000b883a 	mov	r5,zero
10000600:	01007704 	movi	r4,476
10000604:	00011080 	call	10001108 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000608:	000b883a 	mov	r5,zero
1000060c:	01007784 	movi	r4,478
10000610:	00011080 	call	10001108 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000614:	01738054 	movui	r5,52737
10000618:	01000044 	movi	r4,1
1000061c:	00002e80 	call	100002e8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000620:	0001883a 	nop
10000624:	01000044 	movi	r4,1
10000628:	000035c0 	call	1000035c <IO_read>
1000062c:	10bfffcc 	andi	r2,r2,65535
10000630:	1083fb58 	cmpnei	r2,r2,4077
10000634:	10000826 	beq	r2,zero,10000658 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000638:	01000044 	movi	r4,1
1000063c:	000035c0 	call	1000035c <IO_read>
10000640:	10bfffcc 	andi	r2,r2,65535
10000644:	100b883a 	mov	r5,r2
10000648:	01040074 	movhi	r4,4097
1000064c:	21075c04 	addi	r4,r4,7536
10000650:	00022b40 	call	100022b4 <printf>
		goto USB_HOT_PLUG;
10000654:	003f6606 	br	100003f0 <main+0x2c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000658:	00b02284 	movi	r2,-16246
1000065c:	d0a7040d 	sth	r2,-25584(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000660:	008c0004 	movi	r2,12288
10000664:	d0a7048d 	sth	r2,-25582(gp)
	fs_device = A_DP_STAT;
10000668:	00880004 	movi	r2,8192
1000066c:	e0bffe8d 	sth	r2,-6(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000670:	d0a7040b 	ldhu	r2,-25584(gp)
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1009883a 	mov	r4,r2
1000067c:	00011640 	call	10001164 <UsbRead>
10000680:	e0bfff8d 	sth	r2,-2(fp)

	if (!(usb_ctl_val & no_device))
10000684:	d0a7048b 	ldhu	r2,-25582(gp)
10000688:	e0ffff8b 	ldhu	r3,-2(fp)
1000068c:	1884703a 	and	r2,r3,r2
10000690:	10bfffcc 	andi	r2,r2,65535
10000694:	1000351e 	bne	r2,zero,1000076c <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000698:	e03fff05 	stb	zero,-4(fp)
1000069c:	00000f06 	br	100006dc <main+0x318>
		{
			usleep(5*1000);
100006a0:	0104e204 	movi	r4,5000
100006a4:	000feb80 	call	1000feb8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006a8:	d0a7040b 	ldhu	r2,-25584(gp)
100006ac:	10bfffcc 	andi	r2,r2,65535
100006b0:	1009883a 	mov	r4,r2
100006b4:	00011640 	call	10001164 <UsbRead>
100006b8:	e0bfff8d 	sth	r2,-2(fp)
			if(usb_ctl_val & no_device) break;
100006bc:	d0a7048b 	ldhu	r2,-25582(gp)
100006c0:	e0ffff8b 	ldhu	r3,-2(fp)
100006c4:	1884703a 	and	r2,r3,r2
100006c8:	10bfffcc 	andi	r2,r2,65535
100006cc:	1000071e 	bne	r2,zero,100006ec <main+0x328>
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006d0:	e0bfff03 	ldbu	r2,-4(fp)
100006d4:	10800044 	addi	r2,r2,1
100006d8:	e0bfff05 	stb	r2,-4(fp)
100006dc:	e0bfff03 	ldbu	r2,-4(fp)
100006e0:	10800170 	cmpltui	r2,r2,5
100006e4:	103fee1e 	bne	r2,zero,100006a0 <main+0x2dc>
100006e8:	00000106 	br	100006f0 <main+0x32c>
			if(usb_ctl_val & no_device) break;
100006ec:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100006f0:	d0a7048b 	ldhu	r2,-25582(gp)
100006f4:	e0ffff8b 	ldhu	r3,-2(fp)
100006f8:	1884703a 	and	r2,r3,r2
100006fc:	10bfffcc 	andi	r2,r2,65535
10000700:	1000261e 	bne	r2,zero,1000079c <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000704:	01040074 	movhi	r4,4097
10000708:	21076904 	addi	r4,r4,7588
1000070c:	00023b80 	call	100023b8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000710:	01040074 	movhi	r4,4097
10000714:	21077304 	addi	r4,r4,7628
10000718:	00023b80 	call	100023b8 <puts>
			while (!(usb_ctl_val & no_device))
1000071c:	00000d06 	br	10000754 <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000720:	d0a7040b 	ldhu	r2,-25584(gp)
10000724:	10bfffcc 	andi	r2,r2,65535
10000728:	1009883a 	mov	r4,r2
1000072c:	00011640 	call	10001164 <UsbRead>
10000730:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device)
10000734:	d0a7048b 	ldhu	r2,-25582(gp)
10000738:	e0ffff8b 	ldhu	r3,-2(fp)
1000073c:	1884703a 	and	r2,r3,r2
10000740:	10bfffcc 	andi	r2,r2,65535
10000744:	10000126 	beq	r2,zero,1000074c <main+0x388>
					goto USB_HOT_PLUG;
10000748:	003f2906 	br	100003f0 <main+0x2c>

				usleep(2000);
1000074c:	0101f404 	movi	r4,2000
10000750:	000feb80 	call	1000feb8 <usleep>
			while (!(usb_ctl_val & no_device))
10000754:	d0a7048b 	ldhu	r2,-25582(gp)
10000758:	e0ffff8b 	ldhu	r3,-2(fp)
1000075c:	1884703a 	and	r2,r3,r2
10000760:	10bfffcc 	andi	r2,r2,65535
10000764:	103fee26 	beq	r2,zero,10000720 <main+0x35c>
10000768:	00000c06 	br	1000079c <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
1000076c:	e0ffff8b 	ldhu	r3,-2(fp)
10000770:	e0bffe8b 	ldhu	r2,-6(fp)
10000774:	1884703a 	and	r2,r3,r2
10000778:	10bfffcc 	andi	r2,r2,65535
1000077c:	10000426 	beq	r2,zero,10000790 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
10000780:	01040074 	movhi	r4,4097
10000784:	21077f04 	addi	r4,r4,7676
10000788:	00023b80 	call	100023b8 <puts>
1000078c:	00000306 	br	1000079c <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000790:	01040074 	movhi	r4,4097
10000794:	21078604 	addi	r4,r4,7704
10000798:	00023b80 	call	100023b8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
1000079c:	000125c0 	call	1000125c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a0:	00000306 	br	100007b0 <main+0x3ec>
	{
		UsbSetAddress();
100007a4:	000125c0 	call	1000125c <UsbSetAddress>
		usleep(10*1000);
100007a8:	0109c404 	movi	r4,10000
100007ac:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b0:	010000c4 	movi	r4,3
100007b4:	000035c0 	call	1000035c <IO_read>
100007b8:	10bfffcc 	andi	r2,r2,65535
100007bc:	1080040c 	andi	r2,r2,16
100007c0:	103ff826 	beq	r2,zero,100007a4 <main+0x3e0>
	}

	UsbWaitTDListDone();
100007c4:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007c8:	01414184 	movi	r5,1286
100007cc:	01000084 	movi	r4,2
100007d0:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007d4:	0009883a 	mov	r4,zero
100007d8:	000035c0 	call	1000035c <IO_read>
100007dc:	10bfffcc 	andi	r2,r2,65535
100007e0:	100b883a 	mov	r5,r2
100007e4:	01040074 	movhi	r4,4097
100007e8:	21078d04 	addi	r4,r4,7732
100007ec:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007f0:	01414204 	movi	r5,1288
100007f4:	01000084 	movi	r4,2
100007f8:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007fc:	0009883a 	mov	r4,zero
10000800:	000035c0 	call	1000035c <IO_read>
10000804:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000808:	e0bfff8b 	ldhu	r2,-2(fp)
1000080c:	100b883a 	mov	r5,r2
10000810:	01040074 	movhi	r4,4097
10000814:	21079804 	addi	r4,r4,7776
10000818:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
1000081c:	e0bfff8b 	ldhu	r2,-2(fp)
10000820:	108000e0 	cmpeqi	r2,r2,3
10000824:	1000031e 	bne	r2,zero,10000834 <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000828:	00021800 	call	10002180 <UsbGetRetryCnt>
1000082c:	e0bfff8d 	sth	r2,-2(fp)

		goto USB_HOT_PLUG;
10000830:	003eef06 	br	100003f0 <main+0x2c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000834:	01040074 	movhi	r4,4097
10000838:	2107a404 	addi	r4,r4,7824
1000083c:	00023b80 	call	100023b8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000840:	000135c0 	call	1000135c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000844:	00000306 	br	10000854 <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000848:	000135c0 	call	1000135c <UsbGetDeviceDesc1>
		usleep(10*1000);
1000084c:	0109c404 	movi	r4,10000
10000850:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000854:	010000c4 	movi	r4,3
10000858:	000035c0 	call	1000035c <IO_read>
1000085c:	10bfffcc 	andi	r2,r2,65535
10000860:	1080040c 	andi	r2,r2,16
10000864:	103ff826 	beq	r2,zero,10000848 <main+0x484>
	}

	UsbWaitTDListDone();
10000868:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000086c:	01414184 	movi	r5,1286
10000870:	01000084 	movi	r4,2
10000874:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000878:	0009883a 	mov	r4,zero
1000087c:	000035c0 	call	1000035c <IO_read>
10000880:	10bfffcc 	andi	r2,r2,65535
10000884:	100b883a 	mov	r5,r2
10000888:	01040074 	movhi	r4,4097
1000088c:	2107b304 	addi	r4,r4,7884
10000890:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000894:	01414204 	movi	r5,1288
10000898:	01000084 	movi	r4,2
1000089c:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008a0:	0009883a 	mov	r4,zero
100008a4:	000035c0 	call	1000035c <IO_read>
100008a8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008ac:	e0bfff8b 	ldhu	r2,-2(fp)
100008b0:	100b883a 	mov	r5,r2
100008b4:	01040074 	movhi	r4,4097
100008b8:	2107be04 	addi	r4,r4,7928
100008bc:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
100008c0:	00000206 	br	100008cc <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008c4:	00021800 	call	10002180 <UsbGetRetryCnt>
100008c8:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
100008cc:	e0bfff8b 	ldhu	r2,-2(fp)
100008d0:	108000d8 	cmpnei	r2,r2,3
100008d4:	103ffb1e 	bne	r2,zero,100008c4 <main+0x500>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008d8:	01040074 	movhi	r4,4097
100008dc:	2107ca04 	addi	r4,r4,7976
100008e0:	00023b80 	call	100023b8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008e4:	00014a40 	call	100014a4 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008e8:	00000306 	br	100008f8 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008ec:	00014a40 	call	100014a4 <UsbGetDeviceDesc2>
		usleep(10*1000);
100008f0:	0109c404 	movi	r4,10000
100008f4:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f8:	010000c4 	movi	r4,3
100008fc:	000035c0 	call	1000035c <IO_read>
10000900:	10bfffcc 	andi	r2,r2,65535
10000904:	1080040c 	andi	r2,r2,16
10000908:	103ff826 	beq	r2,zero,100008ec <main+0x528>
	}

	UsbWaitTDListDone();
1000090c:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000910:	01414184 	movi	r5,1286
10000914:	01000084 	movi	r4,2
10000918:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000091c:	0009883a 	mov	r4,zero
10000920:	000035c0 	call	1000035c <IO_read>
10000924:	10bfffcc 	andi	r2,r2,65535
10000928:	100b883a 	mov	r5,r2
1000092c:	01040074 	movhi	r4,4097
10000930:	2107b304 	addi	r4,r4,7884
10000934:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000938:	01414204 	movi	r5,1288
1000093c:	01000084 	movi	r4,2
10000940:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000944:	0009883a 	mov	r4,zero
10000948:	000035c0 	call	1000035c <IO_read>
1000094c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000950:	e0bfff8b 	ldhu	r2,-2(fp)
10000954:	100b883a 	mov	r5,r2
10000958:	01040074 	movhi	r4,4097
1000095c:	2107be04 	addi	r4,r4,7928
10000960:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000964:	00000206 	br	10000970 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000968:	00021800 	call	10002180 <UsbGetRetryCnt>
1000096c:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000970:	e0bfff8b 	ldhu	r2,-2(fp)
10000974:	108000d8 	cmpnei	r2,r2,3
10000978:	103ffb1e 	bne	r2,zero,10000968 <main+0x5a4>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
1000097c:	01040074 	movhi	r4,4097
10000980:	2107de04 	addi	r4,r4,8056
10000984:	00023b80 	call	100023b8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000988:	000167c0 	call	1000167c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000098c:	00000306 	br	1000099c <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000990:	000167c0 	call	1000167c <UsbGetConfigDesc1>
		usleep(10*1000);
10000994:	0109c404 	movi	r4,10000
10000998:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000099c:	010000c4 	movi	r4,3
100009a0:	000035c0 	call	1000035c <IO_read>
100009a4:	10bfffcc 	andi	r2,r2,65535
100009a8:	1080040c 	andi	r2,r2,16
100009ac:	103ff826 	beq	r2,zero,10000990 <main+0x5cc>
	}

	UsbWaitTDListDone();
100009b0:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009b4:	01414184 	movi	r5,1286
100009b8:	01000084 	movi	r4,2
100009bc:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009c0:	0009883a 	mov	r4,zero
100009c4:	000035c0 	call	1000035c <IO_read>
100009c8:	10bfffcc 	andi	r2,r2,65535
100009cc:	100b883a 	mov	r5,r2
100009d0:	01040074 	movhi	r4,4097
100009d4:	2107f004 	addi	r4,r4,8128
100009d8:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
100009dc:	01414204 	movi	r5,1288
100009e0:	01000084 	movi	r4,2
100009e4:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009e8:	0009883a 	mov	r4,zero
100009ec:	000035c0 	call	1000035c <IO_read>
100009f0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100009f4:	e0bfff8b 	ldhu	r2,-2(fp)
100009f8:	100b883a 	mov	r5,r2
100009fc:	01040074 	movhi	r4,4097
10000a00:	2107fb04 	addi	r4,r4,8172
10000a04:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000a08:	00000206 	br	10000a14 <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a0c:	00021800 	call	10002180 <UsbGetRetryCnt>
10000a10:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000a14:	e0bfff8b 	ldhu	r2,-2(fp)
10000a18:	108000d8 	cmpnei	r2,r2,3
10000a1c:	103ffb1e 	bne	r2,zero,10000a0c <main+0x648>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a20:	01040074 	movhi	r4,4097
10000a24:	21080704 	addi	r4,r4,8220
10000a28:	00023b80 	call	100023b8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a2c:	000180c0 	call	1000180c <UsbGetConfigDesc2>

	usleep(100*1000);
10000a30:	010000b4 	movhi	r4,2
10000a34:	2121a804 	addi	r4,r4,-31072
10000a38:	000feb80 	call	1000feb8 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a3c:	00000306 	br	10000a4c <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a40:	000180c0 	call	1000180c <UsbGetConfigDesc2>
		usleep(10*1000);
10000a44:	0109c404 	movi	r4,10000
10000a48:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a4c:	010000c4 	movi	r4,3
10000a50:	000035c0 	call	1000035c <IO_read>
10000a54:	10bfffcc 	andi	r2,r2,65535
10000a58:	1080040c 	andi	r2,r2,16
10000a5c:	103ff826 	beq	r2,zero,10000a40 <main+0x67c>
	}

	UsbWaitTDListDone();
10000a60:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a64:	01414184 	movi	r5,1286
10000a68:	01000084 	movi	r4,2
10000a6c:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a70:	0009883a 	mov	r4,zero
10000a74:	000035c0 	call	1000035c <IO_read>
10000a78:	10bfffcc 	andi	r2,r2,65535
10000a7c:	100b883a 	mov	r5,r2
10000a80:	01040074 	movhi	r4,4097
10000a84:	21081a04 	addi	r4,r4,8296
10000a88:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a8c:	01414204 	movi	r5,1288
10000a90:	01000084 	movi	r4,2
10000a94:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a98:	0009883a 	mov	r4,zero
10000a9c:	000035c0 	call	1000035c <IO_read>
10000aa0:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000aa4:	e0bfff8b 	ldhu	r2,-2(fp)
10000aa8:	100b883a 	mov	r5,r2
10000aac:	01040074 	movhi	r4,4097
10000ab0:	21082504 	addi	r4,r4,8340
10000ab4:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000ab8:	00000206 	br	10000ac4 <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000abc:	00021800 	call	10002180 <UsbGetRetryCnt>
10000ac0:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000ac4:	e0bfff8b 	ldhu	r2,-2(fp)
10000ac8:	108000d8 	cmpnei	r2,r2,3
10000acc:	103ffb1e 	bne	r2,zero,10000abc <main+0x6f8>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000ad0:	01040074 	movhi	r4,4097
10000ad4:	21083104 	addi	r4,r4,8388
10000ad8:	00023b80 	call	100023b8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000adc:	01415b04 	movi	r5,1388
10000ae0:	01000084 	movi	r4,2
10000ae4:	00002e80 	call	100002e8 <IO_write>
	code = IO_read(HPI_DATA);
10000ae8:	0009883a 	mov	r4,zero
10000aec:	000035c0 	call	1000035c <IO_read>
10000af0:	e0bffc0d 	sth	r2,-16(fp)
	code = code & 0x003;
10000af4:	e0bffc0b 	ldhu	r2,-16(fp)
10000af8:	108000cc 	andi	r2,r2,3
10000afc:	e0bffc0d 	sth	r2,-16(fp)
	printf("\ncode = %x\n", code);
10000b00:	e0bffc0b 	ldhu	r2,-16(fp)
10000b04:	100b883a 	mov	r5,r2
10000b08:	01040074 	movhi	r4,4097
10000b0c:	21084404 	addi	r4,r4,8464
10000b10:	00022b40 	call	100022b4 <printf>

	if (code == 0x01)
10000b14:	e0bffc0b 	ldhu	r2,-16(fp)
10000b18:	10800058 	cmpnei	r2,r2,1
10000b1c:	1000041e 	bne	r2,zero,10000b30 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b20:	01040074 	movhi	r4,4097
10000b24:	21084704 	addi	r4,r4,8476
10000b28:	00023b80 	call	100023b8 <puts>
10000b2c:	00000306 	br	10000b3c <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b30:	01040074 	movhi	r4,4097
10000b34:	21085604 	addi	r4,r4,8536
10000b38:	00023b80 	call	100023b8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b3c:	01415d84 	movi	r5,1398
10000b40:	01000084 	movi	r4,2
10000b44:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b48:	0141cfc4 	movi	r5,1855
10000b4c:	0009883a 	mov	r4,zero
10000b50:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b54:	01604154 	movui	r5,33029
10000b58:	0009883a 	mov	r4,zero
10000b5c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b60:	014000c4 	movi	r5,3
10000b64:	0009883a 	mov	r4,zero
10000b68:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b6c:	01400204 	movi	r5,8
10000b70:	0009883a 	mov	r4,zero
10000b74:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b78:	016b0294 	movui	r5,44042
10000b7c:	0009883a 	mov	r4,zero
10000b80:	00002e80 	call	100002e8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b84:	01415d84 	movi	r5,1398
10000b88:	01006c04 	movi	r4,432
10000b8c:	00011080 	call	10001108 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b90:	01415f04 	movi	r5,1404
10000b94:	01000084 	movi	r4,2
10000b98:	00002e80 	call	100002e8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b9c:	0009883a 	mov	r4,zero
10000ba0:	000035c0 	call	1000035c <IO_read>
10000ba4:	e0bffbc5 	stb	r2,-17(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000ba8:	e0bffbc3 	ldbu	r2,-17(fp)
10000bac:	100b883a 	mov	r5,r2
10000bb0:	01040074 	movhi	r4,4097
10000bb4:	21085f04 	addi	r4,r4,8572
10000bb8:	00022b40 	call	100022b4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bbc:	0001a740 	call	10001a74 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bc0:	00000306 	br	10000bd0 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bc4:	0001a740 	call	10001a74 <UsbSetConfig>
		usleep(10*1000);
10000bc8:	0109c404 	movi	r4,10000
10000bcc:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bd0:	010000c4 	movi	r4,3
10000bd4:	000035c0 	call	1000035c <IO_read>
10000bd8:	10bfffcc 	andi	r2,r2,65535
10000bdc:	1080040c 	andi	r2,r2,16
10000be0:	103ff826 	beq	r2,zero,10000bc4 <main+0x800>
	}

	UsbWaitTDListDone();
10000be4:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000be8:	01414184 	movi	r5,1286
10000bec:	01000084 	movi	r4,2
10000bf0:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bf4:	0009883a 	mov	r4,zero
10000bf8:	000035c0 	call	1000035c <IO_read>
10000bfc:	10bfffcc 	andi	r2,r2,65535
10000c00:	100b883a 	mov	r5,r2
10000c04:	01040074 	movhi	r4,4097
10000c08:	21086904 	addi	r4,r4,8612
10000c0c:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c10:	01414204 	movi	r5,1288
10000c14:	01000084 	movi	r4,2
10000c18:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c1c:	0009883a 	mov	r4,zero
10000c20:	000035c0 	call	1000035c <IO_read>
10000c24:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c28:	e0bfff8b 	ldhu	r2,-2(fp)
10000c2c:	100b883a 	mov	r5,r2
10000c30:	01040074 	movhi	r4,4097
10000c34:	21087404 	addi	r4,r4,8656
10000c38:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000c3c:	00000206 	br	10000c48 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c40:	00021800 	call	10002180 <UsbGetRetryCnt>
10000c44:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000c48:	e0bfff8b 	ldhu	r2,-2(fp)
10000c4c:	108000d8 	cmpnei	r2,r2,3
10000c50:	103ffb1e 	bne	r2,zero,10000c40 <main+0x87c>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c54:	01040074 	movhi	r4,4097
10000c58:	21088004 	addi	r4,r4,8704
10000c5c:	00023b80 	call	100023b8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c60:	0001b740 	call	10001b74 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c64:	00000306 	br	10000c74 <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c68:	0001b740 	call	10001b74 <UsbClassRequest>
		usleep(10*1000);
10000c6c:	0109c404 	movi	r4,10000
10000c70:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c74:	010000c4 	movi	r4,3
10000c78:	000035c0 	call	1000035c <IO_read>
10000c7c:	10bfffcc 	andi	r2,r2,65535
10000c80:	1080040c 	andi	r2,r2,16
10000c84:	103ff826 	beq	r2,zero,10000c68 <main+0x8a4>
	}

	UsbWaitTDListDone();
10000c88:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c8c:	01414184 	movi	r5,1286
10000c90:	01000084 	movi	r4,2
10000c94:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c98:	0009883a 	mov	r4,zero
10000c9c:	000035c0 	call	1000035c <IO_read>
10000ca0:	10bfffcc 	andi	r2,r2,65535
10000ca4:	100b883a 	mov	r5,r2
10000ca8:	01040074 	movhi	r4,4097
10000cac:	21089204 	addi	r4,r4,8776
10000cb0:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cb4:	01414204 	movi	r5,1288
10000cb8:	01000084 	movi	r4,2
10000cbc:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cc0:	0009883a 	mov	r4,zero
10000cc4:	000035c0 	call	1000035c <IO_read>
10000cc8:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ccc:	e0bfff8b 	ldhu	r2,-2(fp)
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	01040074 	movhi	r4,4097
10000cd8:	21089d04 	addi	r4,r4,8820
10000cdc:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000ce0:	00000206 	br	10000cec <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ce4:	00021800 	call	10002180 <UsbGetRetryCnt>
10000ce8:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000cec:	e0bfff8b 	ldhu	r2,-2(fp)
10000cf0:	108000d8 	cmpnei	r2,r2,3
10000cf4:	103ffb1e 	bne	r2,zero,10000ce4 <main+0x920>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000cf8:	01040074 	movhi	r4,4097
10000cfc:	2108a904 	addi	r4,r4,8868
10000d00:	00023b80 	call	100023b8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d04:	0001c740 	call	10001c74 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d08:	00000306 	br	10000d18 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d0c:	0001c740 	call	10001c74 <UsbGetHidDesc>
		usleep(10*1000);
10000d10:	0109c404 	movi	r4,10000
10000d14:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d18:	010000c4 	movi	r4,3
10000d1c:	000035c0 	call	1000035c <IO_read>
10000d20:	10bfffcc 	andi	r2,r2,65535
10000d24:	1080040c 	andi	r2,r2,16
10000d28:	103ff826 	beq	r2,zero,10000d0c <main+0x948>
	}

	UsbWaitTDListDone();
10000d2c:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d30:	01414184 	movi	r5,1286
10000d34:	01000084 	movi	r4,2
10000d38:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d3c:	0009883a 	mov	r4,zero
10000d40:	000035c0 	call	1000035c <IO_read>
10000d44:	10bfffcc 	andi	r2,r2,65535
10000d48:	100b883a 	mov	r5,r2
10000d4c:	01040074 	movhi	r4,4097
10000d50:	21089204 	addi	r4,r4,8776
10000d54:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d58:	01414204 	movi	r5,1288
10000d5c:	01000084 	movi	r4,2
10000d60:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d64:	0009883a 	mov	r4,zero
10000d68:	000035c0 	call	1000035c <IO_read>
10000d6c:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d70:	e0bfff8b 	ldhu	r2,-2(fp)
10000d74:	100b883a 	mov	r5,r2
10000d78:	01040074 	movhi	r4,4097
10000d7c:	21089d04 	addi	r4,r4,8820
10000d80:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000d84:	00000206 	br	10000d90 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d88:	00021800 	call	10002180 <UsbGetRetryCnt>
10000d8c:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000d90:	e0bfff8b 	ldhu	r2,-2(fp)
10000d94:	108000d8 	cmpnei	r2,r2,3
10000d98:	103ffb1e 	bne	r2,zero,10000d88 <main+0x9c4>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d9c:	01040074 	movhi	r4,4097
10000da0:	2108bb04 	addi	r4,r4,8940
10000da4:	00023b80 	call	100023b8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000da8:	0001dbc0 	call	10001dbc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dac:	00000306 	br	10000dbc <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000db0:	0001dbc0 	call	10001dbc <UsbGetReportDesc>
		usleep(10*1000);
10000db4:	0109c404 	movi	r4,10000
10000db8:	000feb80 	call	1000feb8 <usleep>
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000dbc:	010000c4 	movi	r4,3
10000dc0:	000035c0 	call	1000035c <IO_read>
10000dc4:	10bfffcc 	andi	r2,r2,65535
10000dc8:	1080040c 	andi	r2,r2,16
10000dcc:	103ff826 	beq	r2,zero,10000db0 <main+0x9ec>
	}

	UsbWaitTDListDone();
10000dd0:	00020fc0 	call	100020fc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000dd4:	01414184 	movi	r5,1286
10000dd8:	01000084 	movi	r4,2
10000ddc:	00002e80 	call	100002e8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000de0:	0009883a 	mov	r4,zero
10000de4:	000035c0 	call	1000035c <IO_read>
10000de8:	10bfffcc 	andi	r2,r2,65535
10000dec:	100b883a 	mov	r5,r2
10000df0:	01040074 	movhi	r4,4097
10000df4:	2108cf04 	addi	r4,r4,9020
10000df8:	00022b40 	call	100022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
10000dfc:	01414204 	movi	r5,1288
10000e00:	01000084 	movi	r4,2
10000e04:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e08:	0009883a 	mov	r4,zero
10000e0c:	000035c0 	call	1000035c <IO_read>
10000e10:	e0bfff8d 	sth	r2,-2(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e14:	e0bfff8b 	ldhu	r2,-2(fp)
10000e18:	100b883a 	mov	r5,r2
10000e1c:	01040074 	movhi	r4,4097
10000e20:	2108db04 	addi	r4,r4,9068
10000e24:	00022b40 	call	100022b4 <printf>
	while (usb_ctl_val != 0x03)
10000e28:	00000206 	br	10000e34 <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e2c:	00021800 	call	10002180 <UsbGetRetryCnt>
10000e30:	e0bfff8d 	sth	r2,-2(fp)
	while (usb_ctl_val != 0x03)
10000e34:	e0bfff8b 	ldhu	r2,-2(fp)
10000e38:	108000d8 	cmpnei	r2,r2,3
10000e3c:	103ffb1e 	bne	r2,zero,10000e2c <main+0xa68>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e40:	01040074 	movhi	r4,4097
10000e44:	2108e704 	addi	r4,r4,9116
10000e48:	00023b80 	call	100023b8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000e4c:	0109c404 	movi	r4,10000
10000e50:	000feb80 	call	1000feb8 <usleep>
	while(1)
	{
		toggle++;
10000e54:	e0bfff43 	ldbu	r2,-3(fp)
10000e58:	10800044 	addi	r2,r2,1
10000e5c:	e0bfff45 	stb	r2,-3(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000e60:	01414004 	movi	r5,1280
10000e64:	01000084 	movi	r4,2
10000e68:	00002e80 	call	100002e8 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000e6c:	01414704 	movi	r5,1308
10000e70:	0009883a 	mov	r4,zero
10000e74:	00002e80 	call	100002e8 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e78:	e0bffbc3 	ldbu	r2,-17(fp)
10000e7c:	108003cc 	andi	r2,r2,15
10000e80:	100b883a 	mov	r5,r2
10000e84:	0009883a 	mov	r4,zero
10000e88:	00002e80 	call	100002e8 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e8c:	0140a444 	movi	r5,657
10000e90:	0009883a 	mov	r4,zero
10000e94:	00002e80 	call	100002e8 <IO_write>
		if(toggle%2)
10000e98:	e0bfff43 	ldbu	r2,-3(fp)
10000e9c:	1080004c 	andi	r2,r2,1
10000ea0:	10803fcc 	andi	r2,r2,255
10000ea4:	10000426 	beq	r2,zero,10000eb8 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000ea8:	01400044 	movi	r5,1
10000eac:	0009883a 	mov	r4,zero
10000eb0:	00002e80 	call	100002e8 <IO_write>
10000eb4:	00000306 	br	10000ec4 <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000eb8:	01401044 	movi	r5,65
10000ebc:	0009883a 	mov	r4,zero
10000ec0:	00002e80 	call	100002e8 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000ec4:	014004c4 	movi	r5,19
10000ec8:	0009883a 	mov	r4,zero
10000ecc:	00002e80 	call	100002e8 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000ed0:	000b883a 	mov	r5,zero
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	00002e80 	call	100002e8 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000edc:	01414004 	movi	r5,1280
10000ee0:	01006c04 	movi	r4,432
10000ee4:	00011080 	call	10001108 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ee8:	00002406 	br	10000f7c <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000eec:	01414004 	movi	r5,1280
10000ef0:	01000084 	movi	r4,2
10000ef4:	00002e80 	call	100002e8 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000ef8:	01414704 	movi	r5,1308
10000efc:	0009883a 	mov	r4,zero
10000f00:	00002e80 	call	100002e8 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f04:	e0bffbc3 	ldbu	r2,-17(fp)
10000f08:	108003cc 	andi	r2,r2,15
10000f0c:	100b883a 	mov	r5,r2
10000f10:	0009883a 	mov	r4,zero
10000f14:	00002e80 	call	100002e8 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f18:	0140a444 	movi	r5,657
10000f1c:	0009883a 	mov	r4,zero
10000f20:	00002e80 	call	100002e8 <IO_write>
			if(toggle%2)
10000f24:	e0bfff43 	ldbu	r2,-3(fp)
10000f28:	1080004c 	andi	r2,r2,1
10000f2c:	10803fcc 	andi	r2,r2,255
10000f30:	10000426 	beq	r2,zero,10000f44 <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f34:	01400044 	movi	r5,1
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00002e80 	call	100002e8 <IO_write>
10000f40:	00000306 	br	10000f50 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000f44:	01401044 	movi	r5,65
10000f48:	0009883a 	mov	r4,zero
10000f4c:	00002e80 	call	100002e8 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000f50:	014004c4 	movi	r5,19
10000f54:	0009883a 	mov	r4,zero
10000f58:	00002e80 	call	100002e8 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000f5c:	000b883a 	mov	r5,zero
10000f60:	0009883a 	mov	r4,zero
10000f64:	00002e80 	call	100002e8 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f68:	01414004 	movi	r5,1280
10000f6c:	01006c04 	movi	r4,432
10000f70:	00011080 	call	10001108 <UsbWrite>
			usleep(10*1000);
10000f74:	0109c404 	movi	r4,10000
10000f78:	000feb80 	call	1000feb8 <usleep>
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f7c:	010000c4 	movi	r4,3
10000f80:	000035c0 	call	1000035c <IO_read>
10000f84:	10bfffcc 	andi	r2,r2,65535
10000f88:	1080040c 	andi	r2,r2,16
10000f8c:	103fd726 	beq	r2,zero,10000eec <main+0xb28>
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000f90:	00020fc0 	call	100020fc <UsbWaitTDListDone>
10000f94:	e0bfff8d 	sth	r2,-2(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
10000f98:	01014784 	movi	r4,1310
10000f9c:	00011640 	call	10001164 <UsbRead>
10000fa0:	10bfffcc 	andi	r2,r2,65535
10000fa4:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000fa8:	e17ffd17 	ldw	r5,-12(fp)
10000fac:	01040074 	movhi	r4,4097
10000fb0:	2108fb04 	addi	r4,r4,9196
10000fb4:	00022b40 	call	100022b4 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
10000fb8:	00802004 	movi	r2,128
10000fbc:	e0fffd17 	ldw	r3,-12(fp)
10000fc0:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
10000fc4:	01003204 	movi	r4,200
10000fc8:	000feb80 	call	1000feb8 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000fcc:	d0a7040b 	ldhu	r2,-25584(gp)
10000fd0:	10bfffcc 	andi	r2,r2,65535
10000fd4:	1009883a 	mov	r4,r2
10000fd8:	00011640 	call	10001164 <UsbRead>
10000fdc:	e0bfff8d 	sth	r2,-2(fp)

		if(!(usb_ctl_val & no_device))
10000fe0:	d0a7048b 	ldhu	r2,-25582(gp)
10000fe4:	e0ffff8b 	ldhu	r3,-2(fp)
10000fe8:	1884703a 	and	r2,r3,r2
10000fec:	10bfffcc 	andi	r2,r2,65535
10000ff0:	10003f1e 	bne	r2,zero,100010f0 <main+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000ff4:	e03fff05 	stb	zero,-4(fp)
10000ff8:	00000f06 	br	10001038 <main+0xc74>
			{
				usleep(5*1000);
10000ffc:	0104e204 	movi	r4,5000
10001000:	000feb80 	call	1000feb8 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001004:	d0a7040b 	ldhu	r2,-25584(gp)
10001008:	10bfffcc 	andi	r2,r2,65535
1000100c:	1009883a 	mov	r4,r2
10001010:	00011640 	call	10001164 <UsbRead>
10001014:	e0bfff8d 	sth	r2,-2(fp)
				if(usb_ctl_val & no_device) break;
10001018:	d0a7048b 	ldhu	r2,-25582(gp)
1000101c:	e0ffff8b 	ldhu	r3,-2(fp)
10001020:	1884703a 	and	r2,r3,r2
10001024:	10bfffcc 	andi	r2,r2,65535
10001028:	1000071e 	bne	r2,zero,10001048 <main+0xc84>
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000102c:	e0bfff03 	ldbu	r2,-4(fp)
10001030:	10800044 	addi	r2,r2,1
10001034:	e0bfff05 	stb	r2,-4(fp)
10001038:	e0bfff03 	ldbu	r2,-4(fp)
1000103c:	108001f0 	cmpltui	r2,r2,7
10001040:	103fee1e 	bne	r2,zero,10000ffc <main+0xc38>
10001044:	00000106 	br	1000104c <main+0xc88>
				if(usb_ctl_val & no_device) break;
10001048:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
1000104c:	d0a7048b 	ldhu	r2,-25582(gp)
10001050:	e0ffff8b 	ldhu	r3,-2(fp)
10001054:	1884703a 	and	r2,r3,r2
10001058:	10bfffcc 	andi	r2,r2,65535
1000105c:	1000241e 	bne	r2,zero,100010f0 <main+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001060:	01040074 	movhi	r4,4097
10001064:	21090404 	addi	r4,r4,9232
10001068:	00023b80 	call	100023b8 <puts>
				printf("[INFO]: please insert again!!! \n");
1000106c:	01040074 	movhi	r4,4097
10001070:	21090f04 	addi	r4,r4,9276
10001074:	00023b80 	call	100023b8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001078:	00001d06 	br	100010f0 <main+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
1000107c:	d0a7040b 	ldhu	r2,-25584(gp)
10001080:	10bfffcc 	andi	r2,r2,65535
10001084:	1009883a 	mov	r4,r2
10001088:	00011640 	call	10001164 <UsbRead>
1000108c:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
10001090:	0104e204 	movi	r4,5000
10001094:	000feb80 	call	1000feb8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001098:	d0a7040b 	ldhu	r2,-25584(gp)
1000109c:	10bfffcc 	andi	r2,r2,65535
100010a0:	1009883a 	mov	r4,r2
100010a4:	00011640 	call	10001164 <UsbRead>
100010a8:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
100010ac:	0104e204 	movi	r4,5000
100010b0:	000feb80 	call	1000feb8 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100010b4:	d0a7040b 	ldhu	r2,-25584(gp)
100010b8:	10bfffcc 	andi	r2,r2,65535
100010bc:	1009883a 	mov	r4,r2
100010c0:	00011640 	call	10001164 <UsbRead>
100010c4:	e0bfff8d 	sth	r2,-2(fp)
			usleep(5*1000);
100010c8:	0104e204 	movi	r4,5000
100010cc:	000feb80 	call	1000feb8 <usleep>

			if(usb_ctl_val & no_device)
100010d0:	d0a7048b 	ldhu	r2,-25582(gp)
100010d4:	e0ffff8b 	ldhu	r3,-2(fp)
100010d8:	1884703a 	and	r2,r3,r2
100010dc:	10bfffcc 	andi	r2,r2,65535
100010e0:	10000126 	beq	r2,zero,100010e8 <main+0xd24>
				goto USB_HOT_PLUG;
100010e4:	003cc206 	br	100003f0 <main+0x2c>

			usleep(200);
100010e8:	01003204 	movi	r4,200
100010ec:	000feb80 	call	1000feb8 <usleep>
		while (!(usb_ctl_val & no_device))
100010f0:	d0a7048b 	ldhu	r2,-25582(gp)
100010f4:	e0ffff8b 	ldhu	r3,-2(fp)
100010f8:	1884703a 	and	r2,r3,r2
100010fc:	10bfffcc 	andi	r2,r2,65535
10001100:	103fde26 	beq	r2,zero,1000107c <main+0xcb8>
		toggle++;
10001104:	003f5306 	br	10000e54 <main+0xa90>

10001108 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001108:	defffc04 	addi	sp,sp,-16
1000110c:	dfc00315 	stw	ra,12(sp)
10001110:	df000215 	stw	fp,8(sp)
10001114:	df000204 	addi	fp,sp,8
10001118:	2005883a 	mov	r2,r4
1000111c:	2807883a 	mov	r3,r5
10001120:	e0bfff0d 	sth	r2,-4(fp)
10001124:	1805883a 	mov	r2,r3
10001128:	e0bffe0d 	sth	r2,-8(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
1000112c:	e0bfff0b 	ldhu	r2,-4(fp)
10001130:	100b883a 	mov	r5,r2
10001134:	01000084 	movi	r4,2
10001138:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,Data);
1000113c:	e0bffe0b 	ldhu	r2,-8(fp)
10001140:	100b883a 	mov	r5,r2
10001144:	0009883a 	mov	r4,zero
10001148:	00002e80 	call	100002e8 <IO_write>
}
1000114c:	0001883a 	nop
10001150:	e037883a 	mov	sp,fp
10001154:	dfc00117 	ldw	ra,4(sp)
10001158:	df000017 	ldw	fp,0(sp)
1000115c:	dec00204 	addi	sp,sp,8
10001160:	f800283a 	ret

10001164 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001164:	defffd04 	addi	sp,sp,-12
10001168:	dfc00215 	stw	ra,8(sp)
1000116c:	df000115 	stw	fp,4(sp)
10001170:	df000104 	addi	fp,sp,4
10001174:	2005883a 	mov	r2,r4
10001178:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR,Address);
1000117c:	e0bfff0b 	ldhu	r2,-4(fp)
10001180:	100b883a 	mov	r5,r2
10001184:	01000084 	movi	r4,2
10001188:	00002e80 	call	100002e8 <IO_write>
	return IO_read(HPI_DATA);
1000118c:	0009883a 	mov	r4,zero
10001190:	000035c0 	call	1000035c <IO_read>
}
10001194:	e037883a 	mov	sp,fp
10001198:	dfc00117 	ldw	ra,4(sp)
1000119c:	df000017 	ldw	fp,0(sp)
100011a0:	dec00204 	addi	sp,sp,8
100011a4:	f800283a 	ret

100011a8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100011a8:	defffe04 	addi	sp,sp,-8
100011ac:	dfc00115 	stw	ra,4(sp)
100011b0:	df000015 	stw	fp,0(sp)
100011b4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100011b8:	017e9414 	movui	r5,64080
100011bc:	01000044 	movi	r4,1
100011c0:	00002e80 	call	100002e8 <IO_write>
	usleep(100000);
100011c4:	010000b4 	movhi	r4,2
100011c8:	2121a804 	addi	r4,r4,-31072
100011cc:	000feb80 	call	1000feb8 <usleep>
	printf("[USB INIT]:reset finished!\n");
100011d0:	01040074 	movhi	r4,4097
100011d4:	21091704 	addi	r4,r4,9308
100011d8:	00023b80 	call	100023b8 <puts>

	usleep(500000);
100011dc:	01000234 	movhi	r4,8
100011e0:	21284804 	addi	r4,r4,-24288
100011e4:	000feb80 	call	1000feb8 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100011e8:	01040074 	movhi	r4,4097
100011ec:	21091e04 	addi	r4,r4,9336
100011f0:	00023b80 	call	100023b8 <puts>
	IO_read(HPI_MAILBOX);
100011f4:	01000044 	movi	r4,1
100011f8:	000035c0 	call	1000035c <IO_read>
	IO_read(HPI_STATUS);
100011fc:	010000c4 	movi	r4,3
10001200:	000035c0 	call	1000035c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001204:	01005104 	movi	r4,324
10001208:	00011640 	call	10001164 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000120c:	000b883a 	mov	r5,zero
10001210:	01005104 	movi	r4,324
10001214:	00011080 	call	10001108 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001218:	01005204 	movi	r4,328
1000121c:	00011640 	call	10001164 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001220:	000b883a 	mov	r5,zero
10001224:	01005204 	movi	r4,328
10001228:	00011080 	call	10001108 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000122c:	017fffd4 	movui	r5,65535
10001230:	01302414 	movui	r4,49296
10001234:	00011080 	call	10001108 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001238:	017fffd4 	movui	r5,65535
1000123c:	01302c14 	movui	r4,49328
10001240:	00011080 	call	10001108 <UsbWrite>
}
10001244:	0001883a 	nop
10001248:	e037883a 	mov	sp,fp
1000124c:	dfc00117 	ldw	ra,4(sp)
10001250:	df000017 	ldw	fp,0(sp)
10001254:	dec00204 	addi	sp,sp,8
10001258:	f800283a 	ret

1000125c <UsbSetAddress>:


void UsbSetAddress()
{
1000125c:	defffe04 	addi	sp,sp,-8
10001260:	dfc00115 	stw	ra,4(sp)
10001264:	df000015 	stw	fp,0(sp)
10001268:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000126c:	01414004 	movi	r5,1280
10001270:	01000084 	movi	r4,2
10001274:	00002e80 	call	100002e8 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001278:	01414304 	movi	r5,1292
1000127c:	0009883a 	mov	r4,zero
10001280:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001284:	01400204 	movi	r5,8
10001288:	0009883a 	mov	r4,zero
1000128c:	00002e80 	call	100002e8 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001290:	01403404 	movi	r5,208
10001294:	0009883a 	mov	r4,zero
10001298:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000129c:	01400044 	movi	r5,1
100012a0:	0009883a 	mov	r4,zero
100012a4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012a8:	014004c4 	movi	r5,19
100012ac:	0009883a 	mov	r4,zero
100012b0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
100012b4:	01414504 	movi	r5,1300
100012b8:	0009883a 	mov	r4,zero
100012bc:	00002e80 	call	100002e8 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100012c0:	01414004 	movi	r5,1280
100012c4:	0009883a 	mov	r4,zero
100012c8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0002);
100012cc:	01400084 	movi	r5,2
100012d0:	0009883a 	mov	r4,zero
100012d4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012d8:	000b883a 	mov	r5,zero
100012dc:	0009883a 	mov	r4,zero
100012e0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100012e4:	000b883a 	mov	r5,zero
100012e8:	0009883a 	mov	r4,zero
100012ec:	00002e80 	call	100002e8 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100012f0:	000b883a 	mov	r5,zero
100012f4:	0009883a 	mov	r4,zero
100012f8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100012fc:	000b883a 	mov	r5,zero
10001300:	0009883a 	mov	r4,zero
10001304:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001308:	01402404 	movi	r5,144
1000130c:	0009883a 	mov	r4,zero
10001310:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001314:	01401044 	movi	r5,65
10001318:	0009883a 	mov	r4,zero
1000131c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001320:	014004c4 	movi	r5,19
10001324:	0009883a 	mov	r4,zero
10001328:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000132c:	000b883a 	mov	r5,zero
10001330:	0009883a 	mov	r4,zero
10001334:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001338:	01414004 	movi	r5,1280
1000133c:	01006c04 	movi	r4,432
10001340:	00011080 	call	10001108 <UsbWrite>
}
10001344:	0001883a 	nop
10001348:	e037883a 	mov	sp,fp
1000134c:	dfc00117 	ldw	ra,4(sp)
10001350:	df000017 	ldw	fp,0(sp)
10001354:	dec00204 	addi	sp,sp,8
10001358:	f800283a 	ret

1000135c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
1000135c:	defffe04 	addi	sp,sp,-8
10001360:	dfc00115 	stw	ra,4(sp)
10001364:	df000015 	stw	fp,0(sp)
10001368:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000136c:	01414004 	movi	r5,1280
10001370:	01000084 	movi	r4,2
10001374:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001378:	01414304 	movi	r5,1292
1000137c:	0009883a 	mov	r4,zero
10001380:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001384:	01400204 	movi	r5,8
10001388:	0009883a 	mov	r4,zero
1000138c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001390:	0140b404 	movi	r5,720
10001394:	0009883a 	mov	r4,zero
10001398:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000139c:	01400044 	movi	r5,1
100013a0:	0009883a 	mov	r4,zero
100013a4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013a8:	014004c4 	movi	r5,19
100013ac:	0009883a 	mov	r4,zero
100013b0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
100013b4:	01414504 	movi	r5,1300
100013b8:	0009883a 	mov	r4,zero
100013bc:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100013c0:	0141a004 	movi	r5,1664
100013c4:	0009883a 	mov	r4,zero
100013c8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100013cc:	01404004 	movi	r5,256
100013d0:	0009883a 	mov	r4,zero
100013d4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013d8:	000b883a 	mov	r5,zero
100013dc:	0009883a 	mov	r4,zero
100013e0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);
100013e4:	01400204 	movi	r5,8
100013e8:	0009883a 	mov	r4,zero
100013ec:	00002e80 	call	100002e8 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100013f0:	01414b04 	movi	r5,1324
100013f4:	0009883a 	mov	r4,zero
100013f8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100013fc:	01400204 	movi	r5,8
10001400:	0009883a 	mov	r4,zero
10001404:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001408:	0140a404 	movi	r5,656
1000140c:	0009883a 	mov	r4,zero
10001410:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001414:	01401044 	movi	r5,65
10001418:	0009883a 	mov	r4,zero
1000141c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001420:	014004c4 	movi	r5,19
10001424:	0009883a 	mov	r4,zero
10001428:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000142c:	01414804 	movi	r5,1312
10001430:	0009883a 	mov	r4,zero
10001434:	00002e80 	call	100002e8 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001438:	000b883a 	mov	r5,zero
1000143c:	0009883a 	mov	r4,zero
10001440:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001444:	000b883a 	mov	r5,zero
10001448:	0009883a 	mov	r4,zero
1000144c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10001450:	01408404 	movi	r5,528
10001454:	0009883a 	mov	r4,zero
10001458:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000145c:	01401044 	movi	r5,65
10001460:	0009883a 	mov	r4,zero
10001464:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001468:	014004c4 	movi	r5,19
1000146c:	0009883a 	mov	r4,zero
10001470:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001474:	000b883a 	mov	r5,zero
10001478:	0009883a 	mov	r4,zero
1000147c:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001480:	01414004 	movi	r5,1280
10001484:	01006c04 	movi	r4,432
10001488:	00011080 	call	10001108 <UsbWrite>
}
1000148c:	0001883a 	nop
10001490:	e037883a 	mov	sp,fp
10001494:	dfc00117 	ldw	ra,4(sp)
10001498:	df000017 	ldw	fp,0(sp)
1000149c:	dec00204 	addi	sp,sp,8
100014a0:	f800283a 	ret

100014a4 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100014a4:	defffe04 	addi	sp,sp,-8
100014a8:	dfc00115 	stw	ra,4(sp)
100014ac:	df000015 	stw	fp,0(sp)
100014b0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100014b4:	01414004 	movi	r5,1280
100014b8:	01000084 	movi	r4,2
100014bc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
100014c0:	01414304 	movi	r5,1292
100014c4:	0009883a 	mov	r4,zero
100014c8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100014cc:	01400204 	movi	r5,8
100014d0:	0009883a 	mov	r4,zero
100014d4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100014d8:	0140b404 	movi	r5,720
100014dc:	0009883a 	mov	r4,zero
100014e0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
100014e4:	01400044 	movi	r5,1
100014e8:	0009883a 	mov	r4,zero
100014ec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014f0:	014004c4 	movi	r5,19
100014f4:	0009883a 	mov	r4,zero
100014f8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
100014fc:	01414504 	movi	r5,1300
10001500:	0009883a 	mov	r4,zero
10001504:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001508:	0141a004 	movi	r5,1664
1000150c:	0009883a 	mov	r4,zero
10001510:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001514:	01404004 	movi	r5,256
10001518:	0009883a 	mov	r4,zero
1000151c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001520:	000b883a 	mov	r5,zero
10001524:	0009883a 	mov	r4,zero
10001528:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
1000152c:	01400484 	movi	r5,18
10001530:	0009883a 	mov	r4,zero
10001534:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001538:	01415104 	movi	r5,1348
1000153c:	0009883a 	mov	r4,zero
10001540:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001544:	01400204 	movi	r5,8
10001548:	0009883a 	mov	r4,zero
1000154c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001550:	0140a404 	movi	r5,656
10001554:	0009883a 	mov	r4,zero
10001558:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000155c:	01401044 	movi	r5,65
10001560:	0009883a 	mov	r4,zero
10001564:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001568:	014004c4 	movi	r5,19
1000156c:	0009883a 	mov	r4,zero
10001570:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001574:	01414804 	movi	r5,1312
10001578:	0009883a 	mov	r4,zero
1000157c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001580:	01415304 	movi	r5,1356
10001584:	0009883a 	mov	r4,zero
10001588:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000158c:	01400204 	movi	r5,8
10001590:	0009883a 	mov	r4,zero
10001594:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001598:	0140a404 	movi	r5,656
1000159c:	0009883a 	mov	r4,zero
100015a0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100015a4:	01400044 	movi	r5,1
100015a8:	0009883a 	mov	r4,zero
100015ac:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100015b0:	014004c4 	movi	r5,19
100015b4:	0009883a 	mov	r4,zero
100015b8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100015bc:	01414b04 	movi	r5,1324
100015c0:	0009883a 	mov	r4,zero
100015c4:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100015c8:	01415504 	movi	r5,1364
100015cc:	0009883a 	mov	r4,zero
100015d0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100015d4:	01400084 	movi	r5,2
100015d8:	0009883a 	mov	r4,zero
100015dc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100015e0:	0140a404 	movi	r5,656
100015e4:	0009883a 	mov	r4,zero
100015e8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100015ec:	01401044 	movi	r5,65
100015f0:	0009883a 	mov	r4,zero
100015f4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100015f8:	014004c4 	movi	r5,19
100015fc:	0009883a 	mov	r4,zero
10001600:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001604:	01414e04 	movi	r5,1336
10001608:	0009883a 	mov	r4,zero
1000160c:	00002e80 	call	100002e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001610:	000b883a 	mov	r5,zero
10001614:	0009883a 	mov	r4,zero
10001618:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000161c:	000b883a 	mov	r5,zero
10001620:	0009883a 	mov	r4,zero
10001624:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001628:	01408404 	movi	r5,528
1000162c:	0009883a 	mov	r4,zero
10001630:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001634:	01401044 	movi	r5,65
10001638:	0009883a 	mov	r4,zero
1000163c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001640:	014004c4 	movi	r5,19
10001644:	0009883a 	mov	r4,zero
10001648:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000164c:	000b883a 	mov	r5,zero
10001650:	0009883a 	mov	r4,zero
10001654:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001658:	01414004 	movi	r5,1280
1000165c:	01006c04 	movi	r4,432
10001660:	00011080 	call	10001108 <UsbWrite>
}
10001664:	0001883a 	nop
10001668:	e037883a 	mov	sp,fp
1000166c:	dfc00117 	ldw	ra,4(sp)
10001670:	df000017 	ldw	fp,0(sp)
10001674:	dec00204 	addi	sp,sp,8
10001678:	f800283a 	ret

1000167c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000167c:	defffe04 	addi	sp,sp,-8
10001680:	dfc00115 	stw	ra,4(sp)
10001684:	df000015 	stw	fp,0(sp)
10001688:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000168c:	01414004 	movi	r5,1280
10001690:	01000084 	movi	r4,2
10001694:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001698:	01414304 	movi	r5,1292
1000169c:	0009883a 	mov	r4,zero
100016a0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100016a4:	01400204 	movi	r5,8
100016a8:	0009883a 	mov	r4,zero
100016ac:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100016b0:	0140b404 	movi	r5,720
100016b4:	0009883a 	mov	r4,zero
100016b8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
100016bc:	01400044 	movi	r5,1
100016c0:	0009883a 	mov	r4,zero
100016c4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
100016c8:	014004c4 	movi	r5,19
100016cc:	0009883a 	mov	r4,zero
100016d0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
100016d4:	01414504 	movi	r5,1300
100016d8:	0009883a 	mov	r4,zero
100016dc:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100016e0:	0141a004 	movi	r5,1664
100016e4:	0009883a 	mov	r4,zero
100016e8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100016ec:	01408004 	movi	r5,512
100016f0:	0009883a 	mov	r4,zero
100016f4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100016f8:	000b883a 	mov	r5,zero
100016fc:	0009883a 	mov	r4,zero
10001700:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10001704:	01400244 	movi	r5,9
10001708:	0009883a 	mov	r4,zero
1000170c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001710:	01415104 	movi	r5,1348
10001714:	0009883a 	mov	r4,zero
10001718:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000171c:	01400204 	movi	r5,8
10001720:	0009883a 	mov	r4,zero
10001724:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001728:	0140a404 	movi	r5,656
1000172c:	0009883a 	mov	r4,zero
10001730:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001734:	01401044 	movi	r5,65
10001738:	0009883a 	mov	r4,zero
1000173c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001740:	014004c4 	movi	r5,19
10001744:	0009883a 	mov	r4,zero
10001748:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000174c:	01414804 	movi	r5,1312
10001750:	0009883a 	mov	r4,zero
10001754:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001758:	01415304 	movi	r5,1356
1000175c:	0009883a 	mov	r4,zero
10001760:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10001764:	01400044 	movi	r5,1
10001768:	0009883a 	mov	r4,zero
1000176c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001770:	0140a404 	movi	r5,656
10001774:	0009883a 	mov	r4,zero
10001778:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000177c:	01400044 	movi	r5,1
10001780:	0009883a 	mov	r4,zero
10001784:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001788:	014004c4 	movi	r5,19
1000178c:	0009883a 	mov	r4,zero
10001790:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001794:	01414b04 	movi	r5,1324
10001798:	0009883a 	mov	r4,zero
1000179c:	00002e80 	call	100002e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100017a0:	000b883a 	mov	r5,zero
100017a4:	0009883a 	mov	r4,zero
100017a8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100017ac:	000b883a 	mov	r5,zero
100017b0:	0009883a 	mov	r4,zero
100017b4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100017b8:	01408404 	movi	r5,528
100017bc:	0009883a 	mov	r4,zero
100017c0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100017c4:	01401044 	movi	r5,65
100017c8:	0009883a 	mov	r4,zero
100017cc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100017d0:	014004c4 	movi	r5,19
100017d4:	0009883a 	mov	r4,zero
100017d8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100017dc:	000b883a 	mov	r5,zero
100017e0:	0009883a 	mov	r4,zero
100017e4:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017e8:	01414004 	movi	r5,1280
100017ec:	01006c04 	movi	r4,432
100017f0:	00011080 	call	10001108 <UsbWrite>
}
100017f4:	0001883a 	nop
100017f8:	e037883a 	mov	sp,fp
100017fc:	dfc00117 	ldw	ra,4(sp)
10001800:	df000017 	ldw	fp,0(sp)
10001804:	dec00204 	addi	sp,sp,8
10001808:	f800283a 	ret

1000180c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000180c:	defffe04 	addi	sp,sp,-8
10001810:	dfc00115 	stw	ra,4(sp)
10001814:	df000015 	stw	fp,0(sp)
10001818:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000181c:	01414004 	movi	r5,1280
10001820:	01000084 	movi	r4,2
10001824:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001828:	01414304 	movi	r5,1292
1000182c:	0009883a 	mov	r4,zero
10001830:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001834:	01400204 	movi	r5,8
10001838:	0009883a 	mov	r4,zero
1000183c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001840:	0140b404 	movi	r5,720
10001844:	0009883a 	mov	r4,zero
10001848:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000184c:	01400044 	movi	r5,1
10001850:	0009883a 	mov	r4,zero
10001854:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001858:	014004c4 	movi	r5,19
1000185c:	0009883a 	mov	r4,zero
10001860:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001864:	01414504 	movi	r5,1300
10001868:	0009883a 	mov	r4,zero
1000186c:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001870:	0141a004 	movi	r5,1664
10001874:	0009883a 	mov	r4,zero
10001878:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000187c:	01408004 	movi	r5,512
10001880:	0009883a 	mov	r4,zero
10001884:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001888:	000b883a 	mov	r5,zero
1000188c:	0009883a 	mov	r4,zero
10001890:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10001894:	01403fc4 	movi	r5,255
10001898:	0009883a 	mov	r4,zero
1000189c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100018a0:	01415704 	movi	r5,1372
100018a4:	0009883a 	mov	r4,zero
100018a8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100018ac:	01400204 	movi	r5,8
100018b0:	0009883a 	mov	r4,zero
100018b4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100018b8:	0140a404 	movi	r5,656
100018bc:	0009883a 	mov	r4,zero
100018c0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100018c4:	01401044 	movi	r5,65
100018c8:	0009883a 	mov	r4,zero
100018cc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100018d0:	014004c4 	movi	r5,19
100018d4:	0009883a 	mov	r4,zero
100018d8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100018dc:	01414804 	movi	r5,1312
100018e0:	0009883a 	mov	r4,zero
100018e4:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100018e8:	01415904 	movi	r5,1380
100018ec:	0009883a 	mov	r4,zero
100018f0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100018f4:	01400204 	movi	r5,8
100018f8:	0009883a 	mov	r4,zero
100018fc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001900:	0140a404 	movi	r5,656
10001904:	0009883a 	mov	r4,zero
10001908:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000190c:	01400044 	movi	r5,1
10001910:	0009883a 	mov	r4,zero
10001914:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001918:	014004c4 	movi	r5,19
1000191c:	0009883a 	mov	r4,zero
10001920:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001924:	01414b04 	movi	r5,1324
10001928:	0009883a 	mov	r4,zero
1000192c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001930:	01415b04 	movi	r5,1388
10001934:	0009883a 	mov	r4,zero
10001938:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000193c:	01400204 	movi	r5,8
10001940:	0009883a 	mov	r4,zero
10001944:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001948:	0140a404 	movi	r5,656
1000194c:	0009883a 	mov	r4,zero
10001950:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001954:	01401044 	movi	r5,65
10001958:	0009883a 	mov	r4,zero
1000195c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001960:	014004c4 	movi	r5,19
10001964:	0009883a 	mov	r4,zero
10001968:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000196c:	01414e04 	movi	r5,1336
10001970:	0009883a 	mov	r4,zero
10001974:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001978:	01415d04 	movi	r5,1396
1000197c:	0009883a 	mov	r4,zero
10001980:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001984:	01400204 	movi	r5,8
10001988:	0009883a 	mov	r4,zero
1000198c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001990:	0140a404 	movi	r5,656
10001994:	0009883a 	mov	r4,zero
10001998:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000199c:	01400044 	movi	r5,1
100019a0:	0009883a 	mov	r4,zero
100019a4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100019a8:	014004c4 	movi	r5,19
100019ac:	0009883a 	mov	r4,zero
100019b0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100019b4:	01415104 	movi	r5,1348
100019b8:	0009883a 	mov	r4,zero
100019bc:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100019c0:	01415f04 	movi	r5,1404
100019c4:	0009883a 	mov	r4,zero
100019c8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100019cc:	01400084 	movi	r5,2
100019d0:	0009883a 	mov	r4,zero
100019d4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100019d8:	0140a404 	movi	r5,656
100019dc:	0009883a 	mov	r4,zero
100019e0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100019e4:	01401044 	movi	r5,65
100019e8:	0009883a 	mov	r4,zero
100019ec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100019f0:	014004c4 	movi	r5,19
100019f4:	0009883a 	mov	r4,zero
100019f8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100019fc:	01415404 	movi	r5,1360
10001a00:	0009883a 	mov	r4,zero
10001a04:	00002e80 	call	100002e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001a08:	000b883a 	mov	r5,zero
10001a0c:	0009883a 	mov	r4,zero
10001a10:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001a14:	000b883a 	mov	r5,zero
10001a18:	0009883a 	mov	r4,zero
10001a1c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001a20:	01408404 	movi	r5,528
10001a24:	0009883a 	mov	r4,zero
10001a28:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001a2c:	01401044 	movi	r5,65
10001a30:	0009883a 	mov	r4,zero
10001a34:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001a38:	014004c4 	movi	r5,19
10001a3c:	0009883a 	mov	r4,zero
10001a40:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001a44:	000b883a 	mov	r5,zero
10001a48:	0009883a 	mov	r4,zero
10001a4c:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a50:	01414004 	movi	r5,1280
10001a54:	01006c04 	movi	r4,432
10001a58:	00011080 	call	10001108 <UsbWrite>
}
10001a5c:	0001883a 	nop
10001a60:	e037883a 	mov	sp,fp
10001a64:	dfc00117 	ldw	ra,4(sp)
10001a68:	df000017 	ldw	fp,0(sp)
10001a6c:	dec00204 	addi	sp,sp,8
10001a70:	f800283a 	ret

10001a74 <UsbSetConfig>:

void UsbSetConfig()
{
10001a74:	defffe04 	addi	sp,sp,-8
10001a78:	dfc00115 	stw	ra,4(sp)
10001a7c:	df000015 	stw	fp,0(sp)
10001a80:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001a84:	01414004 	movi	r5,1280
10001a88:	01000084 	movi	r4,2
10001a8c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001a90:	01414304 	movi	r5,1292
10001a94:	0009883a 	mov	r4,zero
10001a98:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001a9c:	01400204 	movi	r5,8
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001aa8:	0140b404 	movi	r5,720
10001aac:	0009883a 	mov	r4,zero
10001ab0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001ab4:	01400044 	movi	r5,1
10001ab8:	0009883a 	mov	r4,zero
10001abc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001ac0:	014004c4 	movi	r5,19
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001acc:	01414504 	movi	r5,1300
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001ad8:	01424004 	movi	r5,2304
10001adc:	0009883a 	mov	r4,zero
10001ae0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001ae4:	01400044 	movi	r5,1
10001ae8:	0009883a 	mov	r4,zero
10001aec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001af0:	000b883a 	mov	r5,zero
10001af4:	0009883a 	mov	r4,zero
10001af8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001afc:	000b883a 	mov	r5,zero
10001b00:	0009883a 	mov	r4,zero
10001b04:	00002e80 	call	100002e8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b08:	000b883a 	mov	r5,zero
10001b0c:	0009883a 	mov	r4,zero
10001b10:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001b14:	000b883a 	mov	r5,zero
10001b18:	0009883a 	mov	r4,zero
10001b1c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001b20:	0140a404 	movi	r5,656
10001b24:	0009883a 	mov	r4,zero
10001b28:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001b2c:	01401044 	movi	r5,65
10001b30:	0009883a 	mov	r4,zero
10001b34:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b38:	014004c4 	movi	r5,19
10001b3c:	0009883a 	mov	r4,zero
10001b40:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b44:	000b883a 	mov	r5,zero
10001b48:	0009883a 	mov	r4,zero
10001b4c:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b50:	01414004 	movi	r5,1280
10001b54:	01006c04 	movi	r4,432
10001b58:	00011080 	call	10001108 <UsbWrite>

}
10001b5c:	0001883a 	nop
10001b60:	e037883a 	mov	sp,fp
10001b64:	dfc00117 	ldw	ra,4(sp)
10001b68:	df000017 	ldw	fp,0(sp)
10001b6c:	dec00204 	addi	sp,sp,8
10001b70:	f800283a 	ret

10001b74 <UsbClassRequest>:

void UsbClassRequest()
{
10001b74:	defffe04 	addi	sp,sp,-8
10001b78:	dfc00115 	stw	ra,4(sp)
10001b7c:	df000015 	stw	fp,0(sp)
10001b80:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b84:	01414004 	movi	r5,1280
10001b88:	01000084 	movi	r4,2
10001b8c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b90:	01414304 	movi	r5,1292
10001b94:	0009883a 	mov	r4,zero
10001b98:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b9c:	01400204 	movi	r5,8
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ba8:	0140b404 	movi	r5,720
10001bac:	0009883a 	mov	r4,zero
10001bb0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001bb4:	01400044 	movi	r5,1
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bc0:	014004c4 	movi	r5,19
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001bcc:	01414504 	movi	r5,1300
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001bd8:	01428844 	movi	r5,2593
10001bdc:	0009883a 	mov	r4,zero
10001be0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001be4:	000b883a 	mov	r5,zero
10001be8:	0009883a 	mov	r4,zero
10001bec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bf0:	000b883a 	mov	r5,zero
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bfc:	000b883a 	mov	r5,zero
10001c00:	0009883a 	mov	r4,zero
10001c04:	00002e80 	call	100002e8 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001c08:	000b883a 	mov	r5,zero
10001c0c:	0009883a 	mov	r4,zero
10001c10:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001c14:	000b883a 	mov	r5,zero
10001c18:	0009883a 	mov	r4,zero
10001c1c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001c20:	0140a404 	movi	r5,656
10001c24:	0009883a 	mov	r4,zero
10001c28:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001c2c:	01401044 	movi	r5,65
10001c30:	0009883a 	mov	r4,zero
10001c34:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c38:	014004c4 	movi	r5,19
10001c3c:	0009883a 	mov	r4,zero
10001c40:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c44:	000b883a 	mov	r5,zero
10001c48:	0009883a 	mov	r4,zero
10001c4c:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c50:	01414004 	movi	r5,1280
10001c54:	01006c04 	movi	r4,432
10001c58:	00011080 	call	10001108 <UsbWrite>
}
10001c5c:	0001883a 	nop
10001c60:	e037883a 	mov	sp,fp
10001c64:	dfc00117 	ldw	ra,4(sp)
10001c68:	df000017 	ldw	fp,0(sp)
10001c6c:	dec00204 	addi	sp,sp,8
10001c70:	f800283a 	ret

10001c74 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c74:	defffe04 	addi	sp,sp,-8
10001c78:	dfc00115 	stw	ra,4(sp)
10001c7c:	df000015 	stw	fp,0(sp)
10001c80:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c84:	01414004 	movi	r5,1280
10001c88:	01000084 	movi	r4,2
10001c8c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c90:	01414304 	movi	r5,1292
10001c94:	0009883a 	mov	r4,zero
10001c98:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c9c:	01400204 	movi	r5,8
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ca8:	0140b404 	movi	r5,720
10001cac:	0009883a 	mov	r4,zero
10001cb0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001cb4:	01400044 	movi	r5,1
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001cc0:	014004c4 	movi	r5,19
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001ccc:	01414504 	movi	r5,1300
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001cd8:	0141a044 	movi	r5,1665
10001cdc:	0009883a 	mov	r4,zero
10001ce0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001ce4:	01484004 	movi	r5,8448
10001ce8:	0009883a 	mov	r4,zero
10001cec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001cf0:	000b883a 	mov	r5,zero
10001cf4:	0009883a 	mov	r4,zero
10001cf8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001cfc:	01401ec4 	movi	r5,123
10001d00:	0009883a 	mov	r4,zero
10001d04:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001d08:	01415104 	movi	r5,1348
10001d0c:	0009883a 	mov	r4,zero
10001d10:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d14:	01400204 	movi	r5,8
10001d18:	0009883a 	mov	r4,zero
10001d1c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001d20:	0140a404 	movi	r5,656
10001d24:	0009883a 	mov	r4,zero
10001d28:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001d2c:	01401044 	movi	r5,65
10001d30:	0009883a 	mov	r4,zero
10001d34:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001d38:	014004c4 	movi	r5,19
10001d3c:	0009883a 	mov	r4,zero
10001d40:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001d44:	01414804 	movi	r5,1312
10001d48:	0009883a 	mov	r4,zero
10001d4c:	00002e80 	call	100002e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001d50:	000b883a 	mov	r5,zero
10001d54:	0009883a 	mov	r4,zero
10001d58:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001d5c:	000b883a 	mov	r5,zero
10001d60:	0009883a 	mov	r4,zero
10001d64:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001d68:	01408404 	movi	r5,528
10001d6c:	0009883a 	mov	r4,zero
10001d70:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001d74:	01401044 	movi	r5,65
10001d78:	0009883a 	mov	r4,zero
10001d7c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001d80:	014004c4 	movi	r5,19
10001d84:	0009883a 	mov	r4,zero
10001d88:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001d8c:	000b883a 	mov	r5,zero
10001d90:	0009883a 	mov	r4,zero
10001d94:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d98:	01414004 	movi	r5,1280
10001d9c:	01006c04 	movi	r4,432
10001da0:	00011080 	call	10001108 <UsbWrite>

}
10001da4:	0001883a 	nop
10001da8:	e037883a 	mov	sp,fp
10001dac:	dfc00117 	ldw	ra,4(sp)
10001db0:	df000017 	ldw	fp,0(sp)
10001db4:	dec00204 	addi	sp,sp,8
10001db8:	f800283a 	ret

10001dbc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001dbc:	defffe04 	addi	sp,sp,-8
10001dc0:	dfc00115 	stw	ra,4(sp)
10001dc4:	df000015 	stw	fp,0(sp)
10001dc8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001dcc:	01414004 	movi	r5,1280
10001dd0:	01000084 	movi	r4,2
10001dd4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001dd8:	01414304 	movi	r5,1292
10001ddc:	0009883a 	mov	r4,zero
10001de0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001de4:	01400204 	movi	r5,8
10001de8:	0009883a 	mov	r4,zero
10001dec:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001df0:	0140b404 	movi	r5,720
10001df4:	0009883a 	mov	r4,zero
10001df8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001dfc:	01400044 	movi	r5,1
10001e00:	0009883a 	mov	r4,zero
10001e04:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e08:	014004c4 	movi	r5,19
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001e14:	01414504 	movi	r5,1300
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00002e80 	call	100002e8 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001e20:	0141a044 	movi	r5,1665
10001e24:	0009883a 	mov	r4,zero
10001e28:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001e2c:	01488004 	movi	r5,8704
10001e30:	0009883a 	mov	r4,zero
10001e34:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001e38:	000b883a 	mov	r5,zero
10001e3c:	0009883a 	mov	r4,zero
10001e40:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001e44:	01401ec4 	movi	r5,123
10001e48:	0009883a 	mov	r4,zero
10001e4c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001e50:	01416004 	movi	r5,1408
10001e54:	0009883a 	mov	r4,zero
10001e58:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001e5c:	01400204 	movi	r5,8
10001e60:	0009883a 	mov	r4,zero
10001e64:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001e68:	0140a404 	movi	r5,656
10001e6c:	0009883a 	mov	r4,zero
10001e70:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001e74:	01401044 	movi	r5,65
10001e78:	0009883a 	mov	r4,zero
10001e7c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001e80:	014004c4 	movi	r5,19
10001e84:	0009883a 	mov	r4,zero
10001e88:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001e8c:	01414804 	movi	r5,1312
10001e90:	0009883a 	mov	r4,zero
10001e94:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001e98:	01416204 	movi	r5,1416
10001e9c:	0009883a 	mov	r4,zero
10001ea0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ea4:	01400204 	movi	r5,8
10001ea8:	0009883a 	mov	r4,zero
10001eac:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001eb0:	0140a404 	movi	r5,656
10001eb4:	0009883a 	mov	r4,zero
10001eb8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001ebc:	01400044 	movi	r5,1
10001ec0:	0009883a 	mov	r4,zero
10001ec4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001ec8:	014004c4 	movi	r5,19
10001ecc:	0009883a 	mov	r4,zero
10001ed0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001ed4:	01414b04 	movi	r5,1324
10001ed8:	0009883a 	mov	r4,zero
10001edc:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001ee0:	01416404 	movi	r5,1424
10001ee4:	0009883a 	mov	r4,zero
10001ee8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001eec:	01400204 	movi	r5,8
10001ef0:	0009883a 	mov	r4,zero
10001ef4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001ef8:	0140a404 	movi	r5,656
10001efc:	0009883a 	mov	r4,zero
10001f00:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001f04:	01401044 	movi	r5,65
10001f08:	0009883a 	mov	r4,zero
10001f0c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f10:	014004c4 	movi	r5,19
10001f14:	0009883a 	mov	r4,zero
10001f18:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001f1c:	01414e04 	movi	r5,1336
10001f20:	0009883a 	mov	r4,zero
10001f24:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001f28:	01416604 	movi	r5,1432
10001f2c:	0009883a 	mov	r4,zero
10001f30:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001f34:	01400204 	movi	r5,8
10001f38:	0009883a 	mov	r4,zero
10001f3c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f40:	0140a404 	movi	r5,656
10001f44:	0009883a 	mov	r4,zero
10001f48:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001f4c:	01400044 	movi	r5,1
10001f50:	0009883a 	mov	r4,zero
10001f54:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001f58:	014004c4 	movi	r5,19
10001f5c:	0009883a 	mov	r4,zero
10001f60:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001f64:	01415104 	movi	r5,1348
10001f68:	0009883a 	mov	r4,zero
10001f6c:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001f70:	01416804 	movi	r5,1440
10001f74:	0009883a 	mov	r4,zero
10001f78:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001f7c:	01400204 	movi	r5,8
10001f80:	0009883a 	mov	r4,zero
10001f84:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001f88:	0140a404 	movi	r5,656
10001f8c:	0009883a 	mov	r4,zero
10001f90:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001f94:	01401044 	movi	r5,65
10001f98:	0009883a 	mov	r4,zero
10001f9c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001fa0:	014004c4 	movi	r5,19
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001fac:	01415404 	movi	r5,1360
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001fb8:	01416a04 	movi	r5,1448
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001fc4:	01400204 	movi	r5,8
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001fd0:	0140a404 	movi	r5,656
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001fdc:	01400044 	movi	r5,1
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001fe8:	014004c4 	movi	r5,19
10001fec:	0009883a 	mov	r4,zero
10001ff0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001ff4:	01415704 	movi	r5,1372
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002000:	01416c04 	movi	r5,1456
10002004:	0009883a 	mov	r4,zero
10002008:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000200c:	01400204 	movi	r5,8
10002010:	0009883a 	mov	r4,zero
10002014:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002018:	0140a404 	movi	r5,656
1000201c:	0009883a 	mov	r4,zero
10002020:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002024:	01401044 	movi	r5,65
10002028:	0009883a 	mov	r4,zero
1000202c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002030:	014004c4 	movi	r5,19
10002034:	0009883a 	mov	r4,zero
10002038:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
1000203c:	01415a04 	movi	r5,1384
10002040:	0009883a 	mov	r4,zero
10002044:	00002e80 	call	100002e8 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002048:	01416e04 	movi	r5,1464
1000204c:	0009883a 	mov	r4,zero
10002050:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002054:	014000c4 	movi	r5,3
10002058:	0009883a 	mov	r4,zero
1000205c:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002060:	0140a404 	movi	r5,656
10002064:	0009883a 	mov	r4,zero
10002068:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000206c:	01400044 	movi	r5,1
10002070:	0009883a 	mov	r4,zero
10002074:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002078:	014004c4 	movi	r5,19
1000207c:	0009883a 	mov	r4,zero
10002080:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002084:	01415d04 	movi	r5,1396
10002088:	0009883a 	mov	r4,zero
1000208c:	00002e80 	call	100002e8 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002090:	000b883a 	mov	r5,zero
10002094:	0009883a 	mov	r4,zero
10002098:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000209c:	000b883a 	mov	r5,zero
100020a0:	0009883a 	mov	r4,zero
100020a4:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100020a8:	01408404 	movi	r5,528
100020ac:	0009883a 	mov	r4,zero
100020b0:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100020b4:	01401044 	movi	r5,65
100020b8:	0009883a 	mov	r4,zero
100020bc:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100020c0:	014004c4 	movi	r5,19
100020c4:	0009883a 	mov	r4,zero
100020c8:	00002e80 	call	100002e8 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100020cc:	000b883a 	mov	r5,zero
100020d0:	0009883a 	mov	r4,zero
100020d4:	00002e80 	call	100002e8 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100020d8:	01414004 	movi	r5,1280
100020dc:	01006c04 	movi	r4,432
100020e0:	00011080 	call	10001108 <UsbWrite>

}
100020e4:	0001883a 	nop
100020e8:	e037883a 	mov	sp,fp
100020ec:	dfc00117 	ldw	ra,4(sp)
100020f0:	df000017 	ldw	fp,0(sp)
100020f4:	dec00204 	addi	sp,sp,8
100020f8:	f800283a 	ret

100020fc <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100020fc:	defffd04 	addi	sp,sp,-12
10002100:	dfc00215 	stw	ra,8(sp)
10002104:	df000115 	stw	fp,4(sp)
10002108:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
1000210c:	01005104 	movi	r4,324
10002110:	00011640 	call	10001164 <UsbRead>
10002114:	e0bfff8d 	sth	r2,-2(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002118:	000b883a 	mov	r5,zero
1000211c:	01005104 	movi	r4,324
10002120:	00011080 	call	10001108 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002124:	00000d06 	br	1000215c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002128:	e0bfff8b 	ldhu	r2,-2(fp)
1000212c:	10000526 	beq	r2,zero,10002144 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002130:	e0bfff8b 	ldhu	r2,-2(fp)
10002134:	100b883a 	mov	r5,r2
10002138:	01040074 	movhi	r4,4097
1000213c:	21092704 	addi	r4,r4,9372
10002140:	00022b40 	call	100022b4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002144:	01005104 	movi	r4,324
10002148:	00011640 	call	10001164 <UsbRead>
1000214c:	e0bfff8d 	sth	r2,-2(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002150:	000b883a 	mov	r5,zero
10002154:	01005104 	movi	r4,324
10002158:	00011080 	call	10001108 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000215c:	e0bfff8b 	ldhu	r2,-2(fp)
10002160:	10840018 	cmpnei	r2,r2,4096
10002164:	103ff01e 	bne	r2,zero,10002128 <UsbWaitTDListDone+0x2c>
	}

	return usb_ctl_val;
10002168:	e0bfff8b 	ldhu	r2,-2(fp)
}
1000216c:	e037883a 	mov	sp,fp
10002170:	dfc00117 	ldw	ra,4(sp)
10002174:	df000017 	ldw	fp,0(sp)
10002178:	dec00204 	addi	sp,sp,8
1000217c:	f800283a 	ret

10002180 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002180:	defffd04 	addi	sp,sp,-12
10002184:	dfc00215 	stw	ra,8(sp)
10002188:	df000115 	stw	fp,4(sp)
1000218c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002190:	010000c4 	movi	r4,3
10002194:	000035c0 	call	1000035c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002198:	01005104 	movi	r4,324
1000219c:	00011640 	call	10001164 <UsbRead>
100021a0:	10bfffcc 	andi	r2,r2,65535
100021a4:	10840018 	cmpnei	r2,r2,4096
100021a8:	1000091e 	bne	r2,zero,100021d0 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021ac:	000b883a 	mov	r5,zero
100021b0:	01005104 	movi	r4,324
100021b4:	00011080 	call	10001108 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100021b8:	0001883a 	nop
100021bc:	010000c4 	movi	r4,3
100021c0:	000035c0 	call	1000035c <IO_read>
100021c4:	10bfffcc 	andi	r2,r2,65535
100021c8:	1080040c 	andi	r2,r2,16
100021cc:	103ffb26 	beq	r2,zero,100021bc <UsbGetRetryCnt+0x3c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100021d0:	01414204 	movi	r5,1288
100021d4:	01000084 	movi	r4,2
100021d8:	00002e80 	call	100002e8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100021dc:	0009883a 	mov	r4,zero
100021e0:	000035c0 	call	1000035c <IO_read>
100021e4:	e0bfff8d 	sth	r2,-2(fp)

	return usb_ctl_val;
100021e8:	e0bfff8b 	ldhu	r2,-2(fp)
}
100021ec:	e037883a 	mov	sp,fp
100021f0:	dfc00117 	ldw	ra,4(sp)
100021f4:	df000017 	ldw	fp,0(sp)
100021f8:	dec00204 	addi	sp,sp,8
100021fc:	f800283a 	ret

10002200 <UsbPrintMem>:


void UsbPrintMem()
{
10002200:	defffc04 	addi	sp,sp,-16
10002204:	dfc00315 	stw	ra,12(sp)
10002208:	df000215 	stw	fp,8(sp)
1000220c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002210:	01414004 	movi	r5,1280
10002214:	01000084 	movi	r4,2
10002218:	00002e80 	call	100002e8 <IO_write>
	for (i = 0; i <= 200; i += 2)
1000221c:	e03fff15 	stw	zero,-4(fp)
10002220:	00000e06 	br	1000225c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002224:	0009883a 	mov	r4,zero
10002228:	000035c0 	call	1000035c <IO_read>
1000222c:	10bfffcc 	andi	r2,r2,65535
10002230:	e0bffe15 	stw	r2,-8(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002234:	e0bfff17 	ldw	r2,-4(fp)
10002238:	10814004 	addi	r2,r2,1280
1000223c:	e1bffe17 	ldw	r6,-8(fp)
10002240:	100b883a 	mov	r5,r2
10002244:	01040074 	movhi	r4,4097
10002248:	21092f04 	addi	r4,r4,9404
1000224c:	00022b40 	call	100022b4 <printf>
	for (i = 0; i <= 200; i += 2)
10002250:	e0bfff17 	ldw	r2,-4(fp)
10002254:	10800084 	addi	r2,r2,2
10002258:	e0bfff15 	stw	r2,-4(fp)
1000225c:	e0bfff17 	ldw	r2,-4(fp)
10002260:	10803250 	cmplti	r2,r2,201
10002264:	103fef1e 	bne	r2,zero,10002224 <UsbPrintMem+0x24>
	}
}
10002268:	0001883a 	nop
1000226c:	0001883a 	nop
10002270:	e037883a 	mov	sp,fp
10002274:	dfc00117 	ldw	ra,4(sp)
10002278:	df000017 	ldw	fp,0(sp)
1000227c:	dec00204 	addi	sp,sp,8
10002280:	f800283a 	ret

10002284 <_printf_r>:
10002284:	defffd04 	addi	sp,sp,-12
10002288:	2805883a 	mov	r2,r5
1000228c:	dfc00015 	stw	ra,0(sp)
10002290:	d9800115 	stw	r6,4(sp)
10002294:	d9c00215 	stw	r7,8(sp)
10002298:	21400217 	ldw	r5,8(r4)
1000229c:	d9c00104 	addi	r7,sp,4
100022a0:	100d883a 	mov	r6,r2
100022a4:	00024600 	call	10002460 <___vfprintf_internal_r>
100022a8:	dfc00017 	ldw	ra,0(sp)
100022ac:	dec00304 	addi	sp,sp,12
100022b0:	f800283a 	ret

100022b4 <printf>:
100022b4:	defffc04 	addi	sp,sp,-16
100022b8:	dfc00015 	stw	ra,0(sp)
100022bc:	d9400115 	stw	r5,4(sp)
100022c0:	d9800215 	stw	r6,8(sp)
100022c4:	d9c00315 	stw	r7,12(sp)
100022c8:	00840074 	movhi	r2,4097
100022cc:	1091b317 	ldw	r2,18124(r2)
100022d0:	200b883a 	mov	r5,r4
100022d4:	d9800104 	addi	r6,sp,4
100022d8:	11000217 	ldw	r4,8(r2)
100022dc:	00045640 	call	10004564 <__vfprintf_internal>
100022e0:	dfc00017 	ldw	ra,0(sp)
100022e4:	dec00404 	addi	sp,sp,16
100022e8:	f800283a 	ret

100022ec <_puts_r>:
100022ec:	defff504 	addi	sp,sp,-44
100022f0:	dc000815 	stw	r16,32(sp)
100022f4:	2021883a 	mov	r16,r4
100022f8:	2809883a 	mov	r4,r5
100022fc:	dc400915 	stw	r17,36(sp)
10002300:	dfc00a15 	stw	ra,40(sp)
10002304:	2823883a 	mov	r17,r5
10002308:	00023c80 	call	100023c8 <strlen>
1000230c:	11000044 	addi	r4,r2,1
10002310:	d8800515 	stw	r2,20(sp)
10002314:	00800044 	movi	r2,1
10002318:	00c40074 	movhi	r3,4097
1000231c:	d8800715 	stw	r2,28(sp)
10002320:	d8800404 	addi	r2,sp,16
10002324:	18c93404 	addi	r3,r3,9424
10002328:	d8800115 	stw	r2,4(sp)
1000232c:	00800084 	movi	r2,2
10002330:	dc400415 	stw	r17,16(sp)
10002334:	d8c00615 	stw	r3,24(sp)
10002338:	d9000315 	stw	r4,12(sp)
1000233c:	d8800215 	stw	r2,8(sp)
10002340:	81400217 	ldw	r5,8(r16)
10002344:	80000226 	beq	r16,zero,10002350 <_puts_r+0x64>
10002348:	80800e17 	ldw	r2,56(r16)
1000234c:	10001326 	beq	r2,zero,1000239c <_puts_r+0xb0>
10002350:	2880030b 	ldhu	r2,12(r5)
10002354:	10c8000c 	andi	r3,r2,8192
10002358:	1800061e 	bne	r3,zero,10002374 <_puts_r+0x88>
1000235c:	28c01917 	ldw	r3,100(r5)
10002360:	0137ffc4 	movi	r4,-8193
10002364:	10880014 	ori	r2,r2,8192
10002368:	1906703a 	and	r3,r3,r4
1000236c:	2880030d 	sth	r2,12(r5)
10002370:	28c01915 	stw	r3,100(r5)
10002374:	d9800104 	addi	r6,sp,4
10002378:	8009883a 	mov	r4,r16
1000237c:	0006bdc0 	call	10006bdc <__sfvwrite_r>
10002380:	10000b1e 	bne	r2,zero,100023b0 <_puts_r+0xc4>
10002384:	00800284 	movi	r2,10
10002388:	dfc00a17 	ldw	ra,40(sp)
1000238c:	dc400917 	ldw	r17,36(sp)
10002390:	dc000817 	ldw	r16,32(sp)
10002394:	dec00b04 	addi	sp,sp,44
10002398:	f800283a 	ret
1000239c:	8009883a 	mov	r4,r16
100023a0:	d9400015 	stw	r5,0(sp)
100023a4:	000677c0 	call	1000677c <__sinit>
100023a8:	d9400017 	ldw	r5,0(sp)
100023ac:	003fe806 	br	10002350 <_puts_r+0x64>
100023b0:	00bfffc4 	movi	r2,-1
100023b4:	003ff406 	br	10002388 <_puts_r+0x9c>

100023b8 <puts>:
100023b8:	00840074 	movhi	r2,4097
100023bc:	200b883a 	mov	r5,r4
100023c0:	1111b317 	ldw	r4,18124(r2)
100023c4:	00022ec1 	jmpi	100022ec <_puts_r>

100023c8 <strlen>:
100023c8:	208000cc 	andi	r2,r4,3
100023cc:	10000926 	beq	r2,zero,100023f4 <strlen+0x2c>
100023d0:	2005883a 	mov	r2,r4
100023d4:	00000306 	br	100023e4 <strlen+0x1c>
100023d8:	10800044 	addi	r2,r2,1
100023dc:	10c000cc 	andi	r3,r2,3
100023e0:	18000526 	beq	r3,zero,100023f8 <strlen+0x30>
100023e4:	10c00007 	ldb	r3,0(r2)
100023e8:	183ffb1e 	bne	r3,zero,100023d8 <strlen+0x10>
100023ec:	1105c83a 	sub	r2,r2,r4
100023f0:	f800283a 	ret
100023f4:	2005883a 	mov	r2,r4
100023f8:	11400017 	ldw	r5,0(r2)
100023fc:	01ffbff4 	movhi	r7,65279
10002400:	39ffbfc4 	addi	r7,r7,-257
10002404:	29c7883a 	add	r3,r5,r7
10002408:	01a02074 	movhi	r6,32897
1000240c:	014a303a 	nor	r5,zero,r5
10002410:	1946703a 	and	r3,r3,r5
10002414:	31a02004 	addi	r6,r6,-32640
10002418:	1986703a 	and	r3,r3,r6
1000241c:	1800071e 	bne	r3,zero,1000243c <strlen+0x74>
10002420:	11400117 	ldw	r5,4(r2)
10002424:	10800104 	addi	r2,r2,4
10002428:	29c7883a 	add	r3,r5,r7
1000242c:	014a303a 	nor	r5,zero,r5
10002430:	1946703a 	and	r3,r3,r5
10002434:	1986703a 	and	r3,r3,r6
10002438:	183ff926 	beq	r3,zero,10002420 <strlen+0x58>
1000243c:	10c00007 	ldb	r3,0(r2)
10002440:	183fea26 	beq	r3,zero,100023ec <strlen+0x24>
10002444:	10c00047 	ldb	r3,1(r2)
10002448:	10800044 	addi	r2,r2,1
1000244c:	183fe726 	beq	r3,zero,100023ec <strlen+0x24>
10002450:	10c00047 	ldb	r3,1(r2)
10002454:	10800044 	addi	r2,r2,1
10002458:	183ffa1e 	bne	r3,zero,10002444 <strlen+0x7c>
1000245c:	003fe306 	br	100023ec <strlen+0x24>

10002460 <___vfprintf_internal_r>:
10002460:	deffbf04 	addi	sp,sp,-260
10002464:	dfc04015 	stw	ra,256(sp)
10002468:	dd803d15 	stw	r22,244(sp)
1000246c:	dcc03a15 	stw	r19,232(sp)
10002470:	dc803915 	stw	r18,228(sp)
10002474:	2027883a 	mov	r19,r4
10002478:	2825883a 	mov	r18,r5
1000247c:	302d883a 	mov	r22,r6
10002480:	d9c00615 	stw	r7,24(sp)
10002484:	df003f15 	stw	fp,252(sp)
10002488:	ddc03e15 	stw	r23,248(sp)
1000248c:	dd403c15 	stw	r21,240(sp)
10002490:	dd003b15 	stw	r20,236(sp)
10002494:	dc403815 	stw	r17,224(sp)
10002498:	dc003715 	stw	r16,220(sp)
1000249c:	00071ec0 	call	100071ec <_localeconv_r>
100024a0:	10800017 	ldw	r2,0(r2)
100024a4:	1009883a 	mov	r4,r2
100024a8:	d8800d15 	stw	r2,52(sp)
100024ac:	00023c80 	call	100023c8 <strlen>
100024b0:	d8800b15 	stw	r2,44(sp)
100024b4:	98000226 	beq	r19,zero,100024c0 <___vfprintf_internal_r+0x60>
100024b8:	98800e17 	ldw	r2,56(r19)
100024bc:	1001e026 	beq	r2,zero,10002c40 <___vfprintf_internal_r+0x7e0>
100024c0:	9080030b 	ldhu	r2,12(r18)
100024c4:	10c8000c 	andi	r3,r2,8192
100024c8:	1800061e 	bne	r3,zero,100024e4 <___vfprintf_internal_r+0x84>
100024cc:	90c01917 	ldw	r3,100(r18)
100024d0:	0137ffc4 	movi	r4,-8193
100024d4:	10880014 	ori	r2,r2,8192
100024d8:	1906703a 	and	r3,r3,r4
100024dc:	9080030d 	sth	r2,12(r18)
100024e0:	90c01915 	stw	r3,100(r18)
100024e4:	10c0020c 	andi	r3,r2,8
100024e8:	1800fc26 	beq	r3,zero,100028dc <___vfprintf_internal_r+0x47c>
100024ec:	90c00417 	ldw	r3,16(r18)
100024f0:	1800fa26 	beq	r3,zero,100028dc <___vfprintf_internal_r+0x47c>
100024f4:	1080068c 	andi	r2,r2,26
100024f8:	10800298 	cmpnei	r2,r2,10
100024fc:	1000ff26 	beq	r2,zero,100028fc <___vfprintf_internal_r+0x49c>
10002500:	d8802704 	addi	r2,sp,156
10002504:	b02f883a 	mov	r23,r22
10002508:	d8801a15 	stw	r2,104(sp)
1000250c:	d8001c15 	stw	zero,112(sp)
10002510:	d8001b15 	stw	zero,108(sp)
10002514:	d8000815 	stw	zero,32(sp)
10002518:	d8000915 	stw	zero,36(sp)
1000251c:	d8000a15 	stw	zero,40(sp)
10002520:	d8000c15 	stw	zero,48(sp)
10002524:	d8001015 	stw	zero,64(sp)
10002528:	d8000515 	stw	zero,20(sp)
1000252c:	102d883a 	mov	r22,r2
10002530:	b8800007 	ldb	r2,0(r23)
10002534:	1000d726 	beq	r2,zero,10002894 <___vfprintf_internal_r+0x434>
10002538:	b821883a 	mov	r16,r23
1000253c:	00000306 	br	1000254c <___vfprintf_internal_r+0xec>
10002540:	80800047 	ldb	r2,1(r16)
10002544:	84000044 	addi	r16,r16,1
10002548:	10012226 	beq	r2,zero,100029d4 <___vfprintf_internal_r+0x574>
1000254c:	10800958 	cmpnei	r2,r2,37
10002550:	103ffb1e 	bne	r2,zero,10002540 <___vfprintf_internal_r+0xe0>
10002554:	85e3c83a 	sub	r17,r16,r23
10002558:	85c1201e 	bne	r16,r23,100029dc <___vfprintf_internal_r+0x57c>
1000255c:	80800003 	ldbu	r2,0(r16)
10002560:	10803fcc 	andi	r2,r2,255
10002564:	1080201c 	xori	r2,r2,128
10002568:	10bfe004 	addi	r2,r2,-128
1000256c:	1000c926 	beq	r2,zero,10002894 <___vfprintf_internal_r+0x434>
10002570:	82c00047 	ldb	r11,1(r16)
10002574:	85c00044 	addi	r23,r16,1
10002578:	d8001345 	stb	zero,77(sp)
1000257c:	0009883a 	mov	r4,zero
10002580:	000b883a 	mov	r5,zero
10002584:	023fffc4 	movi	r8,-1
10002588:	0021883a 	mov	r16,zero
1000258c:	0019883a 	mov	r12,zero
10002590:	bdc00044 	addi	r23,r23,1
10002594:	5839883a 	mov	fp,r11
10002598:	e0bff804 	addi	r2,fp,-32
1000259c:	10c01668 	cmpgeui	r3,r2,89
100025a0:	18006c1e 	bne	r3,zero,10002754 <___vfprintf_internal_r+0x2f4>
100025a4:	100490ba 	slli	r2,r2,2
100025a8:	00c40034 	movhi	r3,4096
100025ac:	10c7883a 	add	r3,r2,r3
100025b0:	18896e17 	ldw	r2,9656(r3)
100025b4:	1000683a 	jmp	r2
100025b8:	10002f08 	cmpgei	zero,r2,188
100025bc:	10002754 	ori	zero,r2,157
100025c0:	10002754 	ori	zero,r2,157
100025c4:	10002efc 	xorhi	zero,r2,187
100025c8:	10002754 	ori	zero,r2,157
100025cc:	10002754 	ori	zero,r2,157
100025d0:	10002754 	ori	zero,r2,157
100025d4:	10002754 	ori	zero,r2,157
100025d8:	10002754 	ori	zero,r2,157
100025dc:	10002754 	ori	zero,r2,157
100025e0:	10002ed4 	ori	zero,r2,187
100025e4:	10002ec4 	addi	zero,r2,187
100025e8:	10002754 	ori	zero,r2,157
100025ec:	10002eac 	andhi	zero,r2,186
100025f0:	10002e60 	cmpeqi	zero,r2,185
100025f4:	10002754 	ori	zero,r2,157
100025f8:	10002e54 	ori	zero,r2,185
100025fc:	1000271c 	xori	zero,r2,156
10002600:	1000271c 	xori	zero,r2,156
10002604:	1000271c 	xori	zero,r2,156
10002608:	1000271c 	xori	zero,r2,156
1000260c:	1000271c 	xori	zero,r2,156
10002610:	1000271c 	xori	zero,r2,156
10002614:	1000271c 	xori	zero,r2,156
10002618:	1000271c 	xori	zero,r2,156
1000261c:	1000271c 	xori	zero,r2,156
10002620:	10002754 	ori	zero,r2,157
10002624:	10002754 	ori	zero,r2,157
10002628:	10002754 	ori	zero,r2,157
1000262c:	10002754 	ori	zero,r2,157
10002630:	10002754 	ori	zero,r2,157
10002634:	10002754 	ori	zero,r2,157
10002638:	10002754 	ori	zero,r2,157
1000263c:	10002754 	ori	zero,r2,157
10002640:	10002754 	ori	zero,r2,157
10002644:	10002754 	ori	zero,r2,157
10002648:	10002d6c 	andhi	zero,r2,181
1000264c:	10002a38 	rdprs	zero,r2,168
10002650:	10002754 	ori	zero,r2,157
10002654:	10002a38 	rdprs	zero,r2,168
10002658:	10002754 	ori	zero,r2,157
1000265c:	10002754 	ori	zero,r2,157
10002660:	10002754 	ori	zero,r2,157
10002664:	10002754 	ori	zero,r2,157
10002668:	10002d60 	cmpeqi	zero,r2,181
1000266c:	10002754 	ori	zero,r2,157
10002670:	10002754 	ori	zero,r2,157
10002674:	1000296c 	andhi	zero,r2,165
10002678:	10002754 	ori	zero,r2,157
1000267c:	10002754 	ori	zero,r2,157
10002680:	10002754 	ori	zero,r2,157
10002684:	10002754 	ori	zero,r2,157
10002688:	10002754 	ori	zero,r2,157
1000268c:	10002944 	addi	zero,r2,165
10002690:	10002754 	ori	zero,r2,157
10002694:	10002754 	ori	zero,r2,157
10002698:	10002d18 	cmpnei	zero,r2,180
1000269c:	10002754 	ori	zero,r2,157
100026a0:	10002754 	ori	zero,r2,157
100026a4:	10002754 	ori	zero,r2,157
100026a8:	10002754 	ori	zero,r2,157
100026ac:	10002754 	ori	zero,r2,157
100026b0:	10002754 	ori	zero,r2,157
100026b4:	10002754 	ori	zero,r2,157
100026b8:	10002754 	ori	zero,r2,157
100026bc:	10002754 	ori	zero,r2,157
100026c0:	10002754 	ori	zero,r2,157
100026c4:	10002cf0 	cmpltui	zero,r2,179
100026c8:	10002c4c 	andi	zero,r2,177
100026cc:	10002a38 	rdprs	zero,r2,168
100026d0:	10002a38 	rdprs	zero,r2,168
100026d4:	10002a38 	rdprs	zero,r2,168
100026d8:	10002ce4 	muli	zero,r2,179
100026dc:	10002c4c 	andi	zero,r2,177
100026e0:	10002754 	ori	zero,r2,157
100026e4:	10002754 	ori	zero,r2,157
100026e8:	1000305c 	xori	zero,r2,193
100026ec:	10002754 	ori	zero,r2,157
100026f0:	10003020 	cmpeqi	zero,r2,192
100026f4:	10002970 	cmpltui	zero,r2,165
100026f8:	10002fe0 	cmpeqi	zero,r2,191
100026fc:	10002fd4 	ori	zero,r2,191
10002700:	10002754 	ori	zero,r2,157
10002704:	10002f7c 	xorhi	zero,r2,189
10002708:	10002754 	ori	zero,r2,157
1000270c:	10002948 	cmpgei	zero,r2,165
10002710:	10002754 	ori	zero,r2,157
10002714:	10002754 	ori	zero,r2,157
10002718:	10002f34 	orhi	zero,r2,188
1000271c:	0021883a 	mov	r16,zero
10002720:	e0fff404 	addi	r3,fp,-48
10002724:	800490ba 	slli	r2,r16,2
10002728:	bf000007 	ldb	fp,0(r23)
1000272c:	bdc00044 	addi	r23,r23,1
10002730:	1421883a 	add	r16,r2,r16
10002734:	8421883a 	add	r16,r16,r16
10002738:	1c21883a 	add	r16,r3,r16
1000273c:	e0fff404 	addi	r3,fp,-48
10002740:	188002b0 	cmpltui	r2,r3,10
10002744:	103ff71e 	bne	r2,zero,10002724 <___vfprintf_internal_r+0x2c4>
10002748:	e0bff804 	addi	r2,fp,-32
1000274c:	10c01668 	cmpgeui	r3,r2,89
10002750:	183f9426 	beq	r3,zero,100025a4 <___vfprintf_internal_r+0x144>
10002754:	21003fcc 	andi	r4,r4,255
10002758:	2006871e 	bne	r4,zero,10004178 <___vfprintf_internal_r+0x1d18>
1000275c:	e0004d26 	beq	fp,zero,10002894 <___vfprintf_internal_r+0x434>
10002760:	df001d05 	stb	fp,116(sp)
10002764:	d8001345 	stb	zero,77(sp)
10002768:	05000044 	movi	r20,1
1000276c:	05400044 	movi	r21,1
10002770:	dc401d04 	addi	r17,sp,116
10002774:	db000415 	stw	r12,16(sp)
10002778:	0011883a 	mov	r8,zero
1000277c:	d8000715 	stw	zero,28(sp)
10002780:	d8800417 	ldw	r2,16(sp)
10002784:	1380008c 	andi	r14,r2,2
10002788:	70000126 	beq	r14,zero,10002790 <___vfprintf_internal_r+0x330>
1000278c:	a5000084 	addi	r20,r20,2
10002790:	d8800417 	ldw	r2,16(sp)
10002794:	d8c01c17 	ldw	r3,112(sp)
10002798:	1340210c 	andi	r13,r2,132
1000279c:	6800021e 	bne	r13,zero,100027a8 <___vfprintf_internal_r+0x348>
100027a0:	850fc83a 	sub	r7,r16,r20
100027a4:	01c34516 	blt	zero,r7,100034bc <___vfprintf_internal_r+0x105c>
100027a8:	d8801347 	ldb	r2,77(sp)
100027ac:	10000c26 	beq	r2,zero,100027e0 <___vfprintf_internal_r+0x380>
100027b0:	d8801b17 	ldw	r2,108(sp)
100027b4:	d9001344 	addi	r4,sp,77
100027b8:	18c00044 	addi	r3,r3,1
100027bc:	10800044 	addi	r2,r2,1
100027c0:	b1000015 	stw	r4,0(r22)
100027c4:	01000044 	movi	r4,1
100027c8:	d8801b15 	stw	r2,108(sp)
100027cc:	b1000115 	stw	r4,4(r22)
100027d0:	d8c01c15 	stw	r3,112(sp)
100027d4:	10800208 	cmpgei	r2,r2,8
100027d8:	1003791e 	bne	r2,zero,100035c0 <___vfprintf_internal_r+0x1160>
100027dc:	b5800204 	addi	r22,r22,8
100027e0:	70000c26 	beq	r14,zero,10002814 <___vfprintf_internal_r+0x3b4>
100027e4:	d8801b17 	ldw	r2,108(sp)
100027e8:	d9001384 	addi	r4,sp,78
100027ec:	18c00084 	addi	r3,r3,2
100027f0:	10800044 	addi	r2,r2,1
100027f4:	b1000015 	stw	r4,0(r22)
100027f8:	01000084 	movi	r4,2
100027fc:	d8801b15 	stw	r2,108(sp)
10002800:	b1000115 	stw	r4,4(r22)
10002804:	d8c01c15 	stw	r3,112(sp)
10002808:	10800208 	cmpgei	r2,r2,8
1000280c:	10037a1e 	bne	r2,zero,100035f8 <___vfprintf_internal_r+0x1198>
10002810:	b5800204 	addi	r22,r22,8
10002814:	6b402018 	cmpnei	r13,r13,128
10002818:	68025b26 	beq	r13,zero,10003188 <___vfprintf_internal_r+0xd28>
1000281c:	4551c83a 	sub	r8,r8,r21
10002820:	02029316 	blt	zero,r8,10003270 <___vfprintf_internal_r+0xe10>
10002824:	d8800417 	ldw	r2,16(sp)
10002828:	1080400c 	andi	r2,r2,256
1000282c:	1002101e 	bne	r2,zero,10003070 <___vfprintf_internal_r+0xc10>
10002830:	d8801b17 	ldw	r2,108(sp)
10002834:	1d47883a 	add	r3,r3,r21
10002838:	b4400015 	stw	r17,0(r22)
1000283c:	10800044 	addi	r2,r2,1
10002840:	b5400115 	stw	r21,4(r22)
10002844:	d8801b15 	stw	r2,108(sp)
10002848:	d8c01c15 	stw	r3,112(sp)
1000284c:	10800208 	cmpgei	r2,r2,8
10002850:	1003101e 	bne	r2,zero,10003494 <___vfprintf_internal_r+0x1034>
10002854:	b5800204 	addi	r22,r22,8
10002858:	d8800417 	ldw	r2,16(sp)
1000285c:	1440010c 	andi	r17,r2,4
10002860:	88000226 	beq	r17,zero,1000286c <___vfprintf_internal_r+0x40c>
10002864:	8523c83a 	sub	r17,r16,r20
10002868:	0440c616 	blt	zero,r17,10002b84 <___vfprintf_internal_r+0x724>
1000286c:	8500010e 	bge	r16,r20,10002874 <___vfprintf_internal_r+0x414>
10002870:	a021883a 	mov	r16,r20
10002874:	d8800517 	ldw	r2,20(sp)
10002878:	1405883a 	add	r2,r2,r16
1000287c:	d8800515 	stw	r2,20(sp)
10002880:	1802c21e 	bne	r3,zero,1000338c <___vfprintf_internal_r+0xf2c>
10002884:	b8800007 	ldb	r2,0(r23)
10002888:	d8001b15 	stw	zero,108(sp)
1000288c:	dd802704 	addi	r22,sp,156
10002890:	103f291e 	bne	r2,zero,10002538 <___vfprintf_internal_r+0xd8>
10002894:	d8801c17 	ldw	r2,112(sp)
10002898:	1006391e 	bne	r2,zero,10004180 <___vfprintf_internal_r+0x1d20>
1000289c:	9080030b 	ldhu	r2,12(r18)
100028a0:	1080100c 	andi	r2,r2,64
100028a4:	1006cf1e 	bne	r2,zero,100043e4 <___vfprintf_internal_r+0x1f84>
100028a8:	d8800517 	ldw	r2,20(sp)
100028ac:	dfc04017 	ldw	ra,256(sp)
100028b0:	df003f17 	ldw	fp,252(sp)
100028b4:	ddc03e17 	ldw	r23,248(sp)
100028b8:	dd803d17 	ldw	r22,244(sp)
100028bc:	dd403c17 	ldw	r21,240(sp)
100028c0:	dd003b17 	ldw	r20,236(sp)
100028c4:	dcc03a17 	ldw	r19,232(sp)
100028c8:	dc803917 	ldw	r18,228(sp)
100028cc:	dc403817 	ldw	r17,224(sp)
100028d0:	dc003717 	ldw	r16,220(sp)
100028d4:	dec04104 	addi	sp,sp,260
100028d8:	f800283a 	ret
100028dc:	900b883a 	mov	r5,r18
100028e0:	9809883a 	mov	r4,r19
100028e4:	00046400 	call	10004640 <__swsetup_r>
100028e8:	1006be1e 	bne	r2,zero,100043e4 <___vfprintf_internal_r+0x1f84>
100028ec:	9080030b 	ldhu	r2,12(r18)
100028f0:	1080068c 	andi	r2,r2,26
100028f4:	10800298 	cmpnei	r2,r2,10
100028f8:	103f011e 	bne	r2,zero,10002500 <___vfprintf_internal_r+0xa0>
100028fc:	9080038f 	ldh	r2,14(r18)
10002900:	103eff16 	blt	r2,zero,10002500 <___vfprintf_internal_r+0xa0>
10002904:	d9c00617 	ldw	r7,24(sp)
10002908:	b00d883a 	mov	r6,r22
1000290c:	900b883a 	mov	r5,r18
10002910:	9809883a 	mov	r4,r19
10002914:	dfc04017 	ldw	ra,256(sp)
10002918:	df003f17 	ldw	fp,252(sp)
1000291c:	ddc03e17 	ldw	r23,248(sp)
10002920:	dd803d17 	ldw	r22,244(sp)
10002924:	dd403c17 	ldw	r21,240(sp)
10002928:	dd003b17 	ldw	r20,236(sp)
1000292c:	dcc03a17 	ldw	r19,232(sp)
10002930:	dc803917 	ldw	r18,228(sp)
10002934:	dc403817 	ldw	r17,224(sp)
10002938:	dc003717 	ldw	r16,220(sp)
1000293c:	dec04104 	addi	sp,sp,260
10002940:	00045801 	jmpi	10004580 <__sbprintf>
10002944:	63000414 	ori	r12,r12,16
10002948:	6080080c 	andi	r2,r12,32
1000294c:	10008126 	beq	r2,zero,10002b54 <___vfprintf_internal_r+0x6f4>
10002950:	d8c00617 	ldw	r3,24(sp)
10002954:	00800044 	movi	r2,1
10002958:	1d000017 	ldw	r20,0(r3)
1000295c:	1d400117 	ldw	r21,4(r3)
10002960:	18c00204 	addi	r3,r3,8
10002964:	d8c00615 	stw	r3,24(sp)
10002968:	00000906 	br	10002990 <___vfprintf_internal_r+0x530>
1000296c:	63000414 	ori	r12,r12,16
10002970:	6080080c 	andi	r2,r12,32
10002974:	10006b26 	beq	r2,zero,10002b24 <___vfprintf_internal_r+0x6c4>
10002978:	d8c00617 	ldw	r3,24(sp)
1000297c:	0005883a 	mov	r2,zero
10002980:	1d000017 	ldw	r20,0(r3)
10002984:	1d400117 	ldw	r21,4(r3)
10002988:	18c00204 	addi	r3,r3,8
1000298c:	d8c00615 	stw	r3,24(sp)
10002990:	d8001345 	stb	zero,77(sp)
10002994:	40ffffe0 	cmpeqi	r3,r8,-1
10002998:	001b883a 	mov	r13,zero
1000299c:	18010e1e 	bne	r3,zero,10002dd8 <___vfprintf_internal_r+0x978>
100029a0:	047fdfc4 	movi	r17,-129
100029a4:	6448703a 	and	r4,r12,r17
100029a8:	a546b03a 	or	r3,r20,r21
100029ac:	d9000415 	stw	r4,16(sp)
100029b0:	1802c01e 	bne	r3,zero,100034b4 <___vfprintf_internal_r+0x1054>
100029b4:	40025f1e 	bne	r8,zero,10003334 <___vfprintf_internal_r+0xed4>
100029b8:	1003751e 	bne	r2,zero,10003790 <___vfprintf_internal_r+0x1330>
100029bc:	6540004c 	andi	r21,r12,1
100029c0:	a803b026 	beq	r21,zero,10003884 <___vfprintf_internal_r+0x1424>
100029c4:	00800c04 	movi	r2,48
100029c8:	d88026c5 	stb	r2,155(sp)
100029cc:	dc4026c4 	addi	r17,sp,155
100029d0:	0000ba06 	br	10002cbc <___vfprintf_internal_r+0x85c>
100029d4:	85e3c83a 	sub	r17,r16,r23
100029d8:	85ffae26 	beq	r16,r23,10002894 <___vfprintf_internal_r+0x434>
100029dc:	d8c01c17 	ldw	r3,112(sp)
100029e0:	d8801b17 	ldw	r2,108(sp)
100029e4:	b5c00015 	stw	r23,0(r22)
100029e8:	1c47883a 	add	r3,r3,r17
100029ec:	10800044 	addi	r2,r2,1
100029f0:	d8801b15 	stw	r2,108(sp)
100029f4:	b4400115 	stw	r17,4(r22)
100029f8:	d8c01c15 	stw	r3,112(sp)
100029fc:	10800208 	cmpgei	r2,r2,8
10002a00:	1000061e 	bne	r2,zero,10002a1c <___vfprintf_internal_r+0x5bc>
10002a04:	b5800204 	addi	r22,r22,8
10002a08:	d8c00517 	ldw	r3,20(sp)
10002a0c:	80800003 	ldbu	r2,0(r16)
10002a10:	1c47883a 	add	r3,r3,r17
10002a14:	d8c00515 	stw	r3,20(sp)
10002a18:	003ed106 	br	10002560 <___vfprintf_internal_r+0x100>
10002a1c:	d9801a04 	addi	r6,sp,104
10002a20:	900b883a 	mov	r5,r18
10002a24:	9809883a 	mov	r4,r19
10002a28:	00099f80 	call	100099f8 <__sprint_r>
10002a2c:	103f9b1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10002a30:	dd802704 	addi	r22,sp,156
10002a34:	003ff406 	br	10002a08 <___vfprintf_internal_r+0x5a8>
10002a38:	21003fcc 	andi	r4,r4,255
10002a3c:	2006671e 	bne	r4,zero,100043dc <___vfprintf_internal_r+0x1f7c>
10002a40:	d8c00617 	ldw	r3,24(sp)
10002a44:	6080020c 	andi	r2,r12,8
10002a48:	19000204 	addi	r4,r3,8
10002a4c:	d9000e15 	stw	r4,56(sp)
10002a50:	1003a71e 	bne	r2,zero,100038f0 <___vfprintf_internal_r+0x1490>
10002a54:	d8800617 	ldw	r2,24(sp)
10002a58:	10c00017 	ldw	r3,0(r2)
10002a5c:	10800117 	ldw	r2,4(r2)
10002a60:	d8c00915 	stw	r3,36(sp)
10002a64:	d8800a15 	stw	r2,40(sp)
10002a68:	dd400a17 	ldw	r21,40(sp)
10002a6c:	dd000917 	ldw	r20,36(sp)
10002a70:	00a00034 	movhi	r2,32768
10002a74:	10bfffc4 	addi	r2,r2,-1
10002a78:	a8a2703a 	and	r17,r21,r2
10002a7c:	01dffc34 	movhi	r7,32752
10002a80:	01bfffc4 	movi	r6,-1
10002a84:	39ffffc4 	addi	r7,r7,-1
10002a88:	a009883a 	mov	r4,r20
10002a8c:	880b883a 	mov	r5,r17
10002a90:	da000615 	stw	r8,24(sp)
10002a94:	db000415 	stw	r12,16(sp)
10002a98:	000f2280 	call	1000f228 <__unorddf2>
10002a9c:	db000417 	ldw	r12,16(sp)
10002aa0:	da000617 	ldw	r8,24(sp)
10002aa4:	1004641e 	bne	r2,zero,10003c38 <___vfprintf_internal_r+0x17d8>
10002aa8:	01dffc34 	movhi	r7,32752
10002aac:	01bfffc4 	movi	r6,-1
10002ab0:	39ffffc4 	addi	r7,r7,-1
10002ab4:	a009883a 	mov	r4,r20
10002ab8:	880b883a 	mov	r5,r17
10002abc:	000e0e00 	call	1000e0e0 <__ledf2>
10002ac0:	db000417 	ldw	r12,16(sp)
10002ac4:	da000617 	ldw	r8,24(sp)
10002ac8:	00845b0e 	bge	zero,r2,10003c38 <___vfprintf_internal_r+0x17d8>
10002acc:	000d883a 	mov	r6,zero
10002ad0:	000f883a 	mov	r7,zero
10002ad4:	a009883a 	mov	r4,r20
10002ad8:	a80b883a 	mov	r5,r21
10002adc:	000e0e00 	call	1000e0e0 <__ledf2>
10002ae0:	db000417 	ldw	r12,16(sp)
10002ae4:	10059116 	blt	r2,zero,1000412c <___vfprintf_internal_r+0x1ccc>
10002ae8:	db401343 	ldbu	r13,77(sp)
10002aec:	e0801210 	cmplti	r2,fp,72
10002af0:	1005391e 	bne	r2,zero,10003fd8 <___vfprintf_internal_r+0x1b78>
10002af4:	04440074 	movhi	r17,4097
10002af8:	8c493604 	addi	r17,r17,9432
10002afc:	00bfdfc4 	movi	r2,-129
10002b00:	6084703a 	and	r2,r12,r2
10002b04:	d8800415 	stw	r2,16(sp)
10002b08:	d8800e17 	ldw	r2,56(sp)
10002b0c:	050000c4 	movi	r20,3
10002b10:	054000c4 	movi	r21,3
10002b14:	d8800615 	stw	r2,24(sp)
10002b18:	0011883a 	mov	r8,zero
10002b1c:	d8000715 	stw	zero,28(sp)
10002b20:	00006a06 	br	10002ccc <___vfprintf_internal_r+0x86c>
10002b24:	d9000617 	ldw	r4,24(sp)
10002b28:	6080040c 	andi	r2,r12,16
10002b2c:	20c00104 	addi	r3,r4,4
10002b30:	10036a1e 	bne	r2,zero,100038dc <___vfprintf_internal_r+0x147c>
10002b34:	6080100c 	andi	r2,r12,64
10002b38:	10052126 	beq	r2,zero,10003fc0 <___vfprintf_internal_r+0x1b60>
10002b3c:	d8800617 	ldw	r2,24(sp)
10002b40:	002b883a 	mov	r21,zero
10002b44:	d8c00615 	stw	r3,24(sp)
10002b48:	1500000b 	ldhu	r20,0(r2)
10002b4c:	0005883a 	mov	r2,zero
10002b50:	003f8f06 	br	10002990 <___vfprintf_internal_r+0x530>
10002b54:	d9000617 	ldw	r4,24(sp)
10002b58:	6080040c 	andi	r2,r12,16
10002b5c:	20c00104 	addi	r3,r4,4
10002b60:	1003501e 	bne	r2,zero,100038a4 <___vfprintf_internal_r+0x1444>
10002b64:	6080100c 	andi	r2,r12,64
10002b68:	10055926 	beq	r2,zero,100040d0 <___vfprintf_internal_r+0x1c70>
10002b6c:	d8800617 	ldw	r2,24(sp)
10002b70:	002b883a 	mov	r21,zero
10002b74:	d8c00615 	stw	r3,24(sp)
10002b78:	1500000b 	ldhu	r20,0(r2)
10002b7c:	00800044 	movi	r2,1
10002b80:	003f8306 	br	10002990 <___vfprintf_internal_r+0x530>
10002b84:	03040074 	movhi	r12,4097
10002b88:	89000450 	cmplti	r4,r17,17
10002b8c:	d8801b17 	ldw	r2,108(sp)
10002b90:	63094a04 	addi	r12,r12,9512
10002b94:	20001b1e 	bne	r4,zero,10002c04 <___vfprintf_internal_r+0x7a4>
10002b98:	05400404 	movi	r21,16
10002b9c:	6039883a 	mov	fp,r12
10002ba0:	00000406 	br	10002bb4 <___vfprintf_internal_r+0x754>
10002ba4:	8c7ffc04 	addi	r17,r17,-16
10002ba8:	89000448 	cmpgei	r4,r17,17
10002bac:	b5800204 	addi	r22,r22,8
10002bb0:	20001326 	beq	r4,zero,10002c00 <___vfprintf_internal_r+0x7a0>
10002bb4:	10800044 	addi	r2,r2,1
10002bb8:	18c00404 	addi	r3,r3,16
10002bbc:	b7000015 	stw	fp,0(r22)
10002bc0:	b5400115 	stw	r21,4(r22)
10002bc4:	d8c01c15 	stw	r3,112(sp)
10002bc8:	d8801b15 	stw	r2,108(sp)
10002bcc:	11000208 	cmpgei	r4,r2,8
10002bd0:	203ff426 	beq	r4,zero,10002ba4 <___vfprintf_internal_r+0x744>
10002bd4:	d9801a04 	addi	r6,sp,104
10002bd8:	900b883a 	mov	r5,r18
10002bdc:	9809883a 	mov	r4,r19
10002be0:	00099f80 	call	100099f8 <__sprint_r>
10002be4:	103f2d1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10002be8:	8c7ffc04 	addi	r17,r17,-16
10002bec:	89000448 	cmpgei	r4,r17,17
10002bf0:	d8c01c17 	ldw	r3,112(sp)
10002bf4:	d8801b17 	ldw	r2,108(sp)
10002bf8:	dd802704 	addi	r22,sp,156
10002bfc:	203fed1e 	bne	r4,zero,10002bb4 <___vfprintf_internal_r+0x754>
10002c00:	e019883a 	mov	r12,fp
10002c04:	10800044 	addi	r2,r2,1
10002c08:	1c47883a 	add	r3,r3,r17
10002c0c:	d8801b15 	stw	r2,108(sp)
10002c10:	b3000015 	stw	r12,0(r22)
10002c14:	b4400115 	stw	r17,4(r22)
10002c18:	d8c01c15 	stw	r3,112(sp)
10002c1c:	10800210 	cmplti	r2,r2,8
10002c20:	103f121e 	bne	r2,zero,1000286c <___vfprintf_internal_r+0x40c>
10002c24:	d9801a04 	addi	r6,sp,104
10002c28:	900b883a 	mov	r5,r18
10002c2c:	9809883a 	mov	r4,r19
10002c30:	00099f80 	call	100099f8 <__sprint_r>
10002c34:	103f191e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10002c38:	d8c01c17 	ldw	r3,112(sp)
10002c3c:	003f0b06 	br	1000286c <___vfprintf_internal_r+0x40c>
10002c40:	9809883a 	mov	r4,r19
10002c44:	000677c0 	call	1000677c <__sinit>
10002c48:	003e1d06 	br	100024c0 <___vfprintf_internal_r+0x60>
10002c4c:	21003fcc 	andi	r4,r4,255
10002c50:	2005de1e 	bne	r4,zero,100043cc <___vfprintf_internal_r+0x1f6c>
10002c54:	6080080c 	andi	r2,r12,32
10002c58:	10004926 	beq	r2,zero,10002d80 <___vfprintf_internal_r+0x920>
10002c5c:	d8c00617 	ldw	r3,24(sp)
10002c60:	18800117 	ldw	r2,4(r3)
10002c64:	1d000017 	ldw	r20,0(r3)
10002c68:	18c00204 	addi	r3,r3,8
10002c6c:	d8c00615 	stw	r3,24(sp)
10002c70:	102b883a 	mov	r21,r2
10002c74:	10004e16 	blt	r2,zero,10002db0 <___vfprintf_internal_r+0x950>
10002c78:	40bfffd8 	cmpnei	r2,r8,-1
10002c7c:	db401343 	ldbu	r13,77(sp)
10002c80:	10000626 	beq	r2,zero,10002c9c <___vfprintf_internal_r+0x83c>
10002c84:	047fdfc4 	movi	r17,-129
10002c88:	6446703a 	and	r3,r12,r17
10002c8c:	a544b03a 	or	r2,r20,r21
10002c90:	d8c00415 	stw	r3,16(sp)
10002c94:	1002bd26 	beq	r2,zero,1000378c <___vfprintf_internal_r+0x132c>
10002c98:	db000417 	ldw	r12,16(sp)
10002c9c:	a803701e 	bne	r21,zero,10003a60 <___vfprintf_internal_r+0x1600>
10002ca0:	a08002a8 	cmpgeui	r2,r20,10
10002ca4:	10036e1e 	bne	r2,zero,10003a60 <___vfprintf_internal_r+0x1600>
10002ca8:	a5000c04 	addi	r20,r20,48
10002cac:	dd0026c5 	stb	r20,155(sp)
10002cb0:	db000415 	stw	r12,16(sp)
10002cb4:	05400044 	movi	r21,1
10002cb8:	dc4026c4 	addi	r17,sp,155
10002cbc:	4029883a 	mov	r20,r8
10002cc0:	4540010e 	bge	r8,r21,10002cc8 <___vfprintf_internal_r+0x868>
10002cc4:	a829883a 	mov	r20,r21
10002cc8:	d8000715 	stw	zero,28(sp)
10002ccc:	6b403fcc 	andi	r13,r13,255
10002cd0:	6b40201c 	xori	r13,r13,128
10002cd4:	6b7fe004 	addi	r13,r13,-128
10002cd8:	683ea926 	beq	r13,zero,10002780 <___vfprintf_internal_r+0x320>
10002cdc:	a5000044 	addi	r20,r20,1
10002ce0:	003ea706 	br	10002780 <___vfprintf_internal_r+0x320>
10002ce4:	bac00007 	ldb	r11,0(r23)
10002ce8:	63001014 	ori	r12,r12,64
10002cec:	003e2806 	br	10002590 <___vfprintf_internal_r+0x130>
10002cf0:	d8c00617 	ldw	r3,24(sp)
10002cf4:	d8001345 	stb	zero,77(sp)
10002cf8:	05000044 	movi	r20,1
10002cfc:	18800017 	ldw	r2,0(r3)
10002d00:	18c00104 	addi	r3,r3,4
10002d04:	d8c00615 	stw	r3,24(sp)
10002d08:	d8801d05 	stb	r2,116(sp)
10002d0c:	05400044 	movi	r21,1
10002d10:	dc401d04 	addi	r17,sp,116
10002d14:	003e9706 	br	10002774 <___vfprintf_internal_r+0x314>
10002d18:	21003fcc 	andi	r4,r4,255
10002d1c:	2005a71e 	bne	r4,zero,100043bc <___vfprintf_internal_r+0x1f5c>
10002d20:	00840074 	movhi	r2,4097
10002d24:	10893e04 	addi	r2,r2,9464
10002d28:	d8800c15 	stw	r2,48(sp)
10002d2c:	6080080c 	andi	r2,r12,32
10002d30:	10008726 	beq	r2,zero,10002f50 <___vfprintf_internal_r+0xaf0>
10002d34:	d8800617 	ldw	r2,24(sp)
10002d38:	15000017 	ldw	r20,0(r2)
10002d3c:	15400117 	ldw	r21,4(r2)
10002d40:	10800204 	addi	r2,r2,8
10002d44:	d8800615 	stw	r2,24(sp)
10002d48:	6080004c 	andi	r2,r12,1
10002d4c:	10000226 	beq	r2,zero,10002d58 <___vfprintf_internal_r+0x8f8>
10002d50:	a544b03a 	or	r2,r20,r21
10002d54:	1002cd1e 	bne	r2,zero,1000388c <___vfprintf_internal_r+0x142c>
10002d58:	00800084 	movi	r2,2
10002d5c:	003f0c06 	br	10002990 <___vfprintf_internal_r+0x530>
10002d60:	bac00007 	ldb	r11,0(r23)
10002d64:	63000214 	ori	r12,r12,8
10002d68:	003e0906 	br	10002590 <___vfprintf_internal_r+0x130>
10002d6c:	21003fcc 	andi	r4,r4,255
10002d70:	2005981e 	bne	r4,zero,100043d4 <___vfprintf_internal_r+0x1f74>
10002d74:	63000414 	ori	r12,r12,16
10002d78:	6080080c 	andi	r2,r12,32
10002d7c:	103fb71e 	bne	r2,zero,10002c5c <___vfprintf_internal_r+0x7fc>
10002d80:	d9000617 	ldw	r4,24(sp)
10002d84:	6080040c 	andi	r2,r12,16
10002d88:	20c00104 	addi	r3,r4,4
10002d8c:	1002dd1e 	bne	r2,zero,10003904 <___vfprintf_internal_r+0x14a4>
10002d90:	6080100c 	andi	r2,r12,64
10002d94:	10048426 	beq	r2,zero,10003fa8 <___vfprintf_internal_r+0x1b48>
10002d98:	d8800617 	ldw	r2,24(sp)
10002d9c:	d8c00615 	stw	r3,24(sp)
10002da0:	1500000f 	ldh	r20,0(r2)
10002da4:	a02bd7fa 	srai	r21,r20,31
10002da8:	a805883a 	mov	r2,r21
10002dac:	103fb20e 	bge	r2,zero,10002c78 <___vfprintf_internal_r+0x818>
10002db0:	a004c03a 	cmpne	r2,r20,zero
10002db4:	056bc83a 	sub	r21,zero,r21
10002db8:	a8abc83a 	sub	r21,r21,r2
10002dbc:	00800b44 	movi	r2,45
10002dc0:	d8801345 	stb	r2,77(sp)
10002dc4:	40ffffe0 	cmpeqi	r3,r8,-1
10002dc8:	0529c83a 	sub	r20,zero,r20
10002dcc:	03400b44 	movi	r13,45
10002dd0:	00800044 	movi	r2,1
10002dd4:	183ef226 	beq	r3,zero,100029a0 <___vfprintf_internal_r+0x540>
10002dd8:	10c00060 	cmpeqi	r3,r2,1
10002ddc:	183faf1e 	bne	r3,zero,10002c9c <___vfprintf_internal_r+0x83c>
10002de0:	108000a0 	cmpeqi	r2,r2,2
10002de4:	1001581e 	bne	r2,zero,10003348 <___vfprintf_internal_r+0xee8>
10002de8:	dc402704 	addi	r17,sp,156
10002dec:	a006d0fa 	srli	r3,r20,3
10002df0:	a808977a 	slli	r4,r21,29
10002df4:	a82ad0fa 	srli	r21,r21,3
10002df8:	a50001cc 	andi	r20,r20,7
10002dfc:	a0800c04 	addi	r2,r20,48
10002e00:	20e8b03a 	or	r20,r4,r3
10002e04:	88bfffc5 	stb	r2,-1(r17)
10002e08:	a546b03a 	or	r3,r20,r21
10002e0c:	880b883a 	mov	r5,r17
10002e10:	8c7fffc4 	addi	r17,r17,-1
10002e14:	183ff51e 	bne	r3,zero,10002dec <___vfprintf_internal_r+0x98c>
10002e18:	60c0004c 	andi	r3,r12,1
10002e1c:	18015726 	beq	r3,zero,1000337c <___vfprintf_internal_r+0xf1c>
10002e20:	10803fcc 	andi	r2,r2,255
10002e24:	1080201c 	xori	r2,r2,128
10002e28:	10bfe004 	addi	r2,r2,-128
10002e2c:	10800c18 	cmpnei	r2,r2,48
10002e30:	10015226 	beq	r2,zero,1000337c <___vfprintf_internal_r+0xf1c>
10002e34:	00800c04 	movi	r2,48
10002e38:	297fff84 	addi	r5,r5,-2
10002e3c:	88bfffc5 	stb	r2,-1(r17)
10002e40:	d8802704 	addi	r2,sp,156
10002e44:	116bc83a 	sub	r21,r2,r5
10002e48:	db000415 	stw	r12,16(sp)
10002e4c:	2823883a 	mov	r17,r5
10002e50:	003f9a06 	br	10002cbc <___vfprintf_internal_r+0x85c>
10002e54:	bac00007 	ldb	r11,0(r23)
10002e58:	63002014 	ori	r12,r12,128
10002e5c:	003dcc06 	br	10002590 <___vfprintf_internal_r+0x130>
10002e60:	bf000007 	ldb	fp,0(r23)
10002e64:	b8800044 	addi	r2,r23,1
10002e68:	e0c00aa0 	cmpeqi	r3,fp,42
10002e6c:	1805b11e 	bne	r3,zero,10004534 <___vfprintf_internal_r+0x20d4>
10002e70:	e0fff404 	addi	r3,fp,-48
10002e74:	198002b0 	cmpltui	r6,r3,10
10002e78:	102f883a 	mov	r23,r2
10002e7c:	0011883a 	mov	r8,zero
10002e80:	303dc526 	beq	r6,zero,10002598 <___vfprintf_internal_r+0x138>
10002e84:	400490ba 	slli	r2,r8,2
10002e88:	bf000007 	ldb	fp,0(r23)
10002e8c:	bdc00044 	addi	r23,r23,1
10002e90:	1211883a 	add	r8,r2,r8
10002e94:	4211883a 	add	r8,r8,r8
10002e98:	40d1883a 	add	r8,r8,r3
10002e9c:	e0fff404 	addi	r3,fp,-48
10002ea0:	188002b0 	cmpltui	r2,r3,10
10002ea4:	103ff71e 	bne	r2,zero,10002e84 <___vfprintf_internal_r+0xa24>
10002ea8:	003dbb06 	br	10002598 <___vfprintf_internal_r+0x138>
10002eac:	bf000003 	ldbu	fp,0(r23)
10002eb0:	e2c03fcc 	andi	r11,fp,255
10002eb4:	5ac0201c 	xori	r11,r11,128
10002eb8:	63000114 	ori	r12,r12,4
10002ebc:	5affe004 	addi	r11,r11,-128
10002ec0:	003db306 	br	10002590 <___vfprintf_internal_r+0x130>
10002ec4:	bac00007 	ldb	r11,0(r23)
10002ec8:	01000044 	movi	r4,1
10002ecc:	01400ac4 	movi	r5,43
10002ed0:	003daf06 	br	10002590 <___vfprintf_internal_r+0x130>
10002ed4:	d8800617 	ldw	r2,24(sp)
10002ed8:	bf000003 	ldbu	fp,0(r23)
10002edc:	14000017 	ldw	r16,0(r2)
10002ee0:	10800104 	addi	r2,r2,4
10002ee4:	80028c16 	blt	r16,zero,10003918 <___vfprintf_internal_r+0x14b8>
10002ee8:	d8800615 	stw	r2,24(sp)
10002eec:	e2c03fcc 	andi	r11,fp,255
10002ef0:	5ac0201c 	xori	r11,r11,128
10002ef4:	5affe004 	addi	r11,r11,-128
10002ef8:	003da506 	br	10002590 <___vfprintf_internal_r+0x130>
10002efc:	bac00007 	ldb	r11,0(r23)
10002f00:	63000054 	ori	r12,r12,1
10002f04:	003da206 	br	10002590 <___vfprintf_internal_r+0x130>
10002f08:	28803fcc 	andi	r2,r5,255
10002f0c:	1080201c 	xori	r2,r2,128
10002f10:	10bfe004 	addi	r2,r2,-128
10002f14:	bf000003 	ldbu	fp,0(r23)
10002f18:	103ff41e 	bne	r2,zero,10002eec <___vfprintf_internal_r+0xa8c>
10002f1c:	e2c03fcc 	andi	r11,fp,255
10002f20:	5ac0201c 	xori	r11,r11,128
10002f24:	01000044 	movi	r4,1
10002f28:	01400804 	movi	r5,32
10002f2c:	5affe004 	addi	r11,r11,-128
10002f30:	003d9706 	br	10002590 <___vfprintf_internal_r+0x130>
10002f34:	21003fcc 	andi	r4,r4,255
10002f38:	20051e1e 	bne	r4,zero,100043b4 <___vfprintf_internal_r+0x1f54>
10002f3c:	00840074 	movhi	r2,4097
10002f40:	10893904 	addi	r2,r2,9444
10002f44:	d8800c15 	stw	r2,48(sp)
10002f48:	6080080c 	andi	r2,r12,32
10002f4c:	103f791e 	bne	r2,zero,10002d34 <___vfprintf_internal_r+0x8d4>
10002f50:	d9000617 	ldw	r4,24(sp)
10002f54:	6080040c 	andi	r2,r12,16
10002f58:	20c00104 	addi	r3,r4,4
10002f5c:	10025b1e 	bne	r2,zero,100038cc <___vfprintf_internal_r+0x146c>
10002f60:	6080100c 	andi	r2,r12,64
10002f64:	10046026 	beq	r2,zero,100040e8 <___vfprintf_internal_r+0x1c88>
10002f68:	d8800617 	ldw	r2,24(sp)
10002f6c:	002b883a 	mov	r21,zero
10002f70:	d8c00615 	stw	r3,24(sp)
10002f74:	1500000b 	ldhu	r20,0(r2)
10002f78:	003f7306 	br	10002d48 <___vfprintf_internal_r+0x8e8>
10002f7c:	d8800617 	ldw	r2,24(sp)
10002f80:	d8001345 	stb	zero,77(sp)
10002f84:	14400017 	ldw	r17,0(r2)
10002f88:	10c00104 	addi	r3,r2,4
10002f8c:	88028e26 	beq	r17,zero,100039c8 <___vfprintf_internal_r+0x1568>
10002f90:	40bfffe0 	cmpeqi	r2,r8,-1
10002f94:	1003c01e 	bne	r2,zero,10003e98 <___vfprintf_internal_r+0x1a38>
10002f98:	400d883a 	mov	r6,r8
10002f9c:	000b883a 	mov	r5,zero
10002fa0:	8809883a 	mov	r4,r17
10002fa4:	d8c00715 	stw	r3,28(sp)
10002fa8:	db000615 	stw	r12,24(sp)
10002fac:	da000415 	stw	r8,16(sp)
10002fb0:	0007c2c0 	call	10007c2c <memchr>
10002fb4:	da000417 	ldw	r8,16(sp)
10002fb8:	db000617 	ldw	r12,24(sp)
10002fbc:	d8c00717 	ldw	r3,28(sp)
10002fc0:	1004ec26 	beq	r2,zero,10004374 <___vfprintf_internal_r+0x1f14>
10002fc4:	146bc83a 	sub	r21,r2,r17
10002fc8:	a829883a 	mov	r20,r21
10002fcc:	d8c00615 	stw	r3,24(sp)
10002fd0:	003de806 	br	10002774 <___vfprintf_internal_r+0x314>
10002fd4:	bac00007 	ldb	r11,0(r23)
10002fd8:	63000814 	ori	r12,r12,32
10002fdc:	003d6c06 	br	10002590 <___vfprintf_internal_r+0x130>
10002fe0:	d8c00617 	ldw	r3,24(sp)
10002fe4:	00800c04 	movi	r2,48
10002fe8:	d8801385 	stb	r2,78(sp)
10002fec:	00801e04 	movi	r2,120
10002ff0:	01040074 	movhi	r4,4097
10002ff4:	d88013c5 	stb	r2,79(sp)
10002ff8:	18800104 	addi	r2,r3,4
10002ffc:	d8800615 	stw	r2,24(sp)
10003000:	20893904 	addi	r2,r4,9444
10003004:	d8800c15 	stw	r2,48(sp)
10003008:	1d000017 	ldw	r20,0(r3)
1000300c:	002b883a 	mov	r21,zero
10003010:	63000094 	ori	r12,r12,2
10003014:	00800084 	movi	r2,2
10003018:	07001e04 	movi	fp,120
1000301c:	003e5c06 	br	10002990 <___vfprintf_internal_r+0x530>
10003020:	21003fcc 	andi	r4,r4,255
10003024:	2004e71e 	bne	r4,zero,100043c4 <___vfprintf_internal_r+0x1f64>
10003028:	d9000617 	ldw	r4,24(sp)
1000302c:	6080080c 	andi	r2,r12,32
10003030:	20c00017 	ldw	r3,0(r4)
10003034:	21000104 	addi	r4,r4,4
10003038:	d9000615 	stw	r4,24(sp)
1000303c:	10021e1e 	bne	r2,zero,100038b8 <___vfprintf_internal_r+0x1458>
10003040:	6080040c 	andi	r2,r12,16
10003044:	1002ae1e 	bne	r2,zero,10003b00 <___vfprintf_internal_r+0x16a0>
10003048:	6300100c 	andi	r12,r12,64
1000304c:	6002ac26 	beq	r12,zero,10003b00 <___vfprintf_internal_r+0x16a0>
10003050:	d8800517 	ldw	r2,20(sp)
10003054:	1880000d 	sth	r2,0(r3)
10003058:	003d3506 	br	10002530 <___vfprintf_internal_r+0xd0>
1000305c:	bac00007 	ldb	r11,0(r23)
10003060:	58801b18 	cmpnei	r2,r11,108
10003064:	10024926 	beq	r2,zero,1000398c <___vfprintf_internal_r+0x152c>
10003068:	63000414 	ori	r12,r12,16
1000306c:	003d4806 	br	10002590 <___vfprintf_internal_r+0x130>
10003070:	e2c01990 	cmplti	r11,fp,102
10003074:	5800cb1e 	bne	r11,zero,100033a4 <___vfprintf_internal_r+0xf44>
10003078:	d9000917 	ldw	r4,36(sp)
1000307c:	d9400a17 	ldw	r5,40(sp)
10003080:	000d883a 	mov	r6,zero
10003084:	000f883a 	mov	r7,zero
10003088:	d8c00e15 	stw	r3,56(sp)
1000308c:	000df780 	call	1000df78 <__eqdf2>
10003090:	d8c00e17 	ldw	r3,56(sp)
10003094:	1001641e 	bne	r2,zero,10003628 <___vfprintf_internal_r+0x11c8>
10003098:	d8801b17 	ldw	r2,108(sp)
1000309c:	01040074 	movhi	r4,4097
100030a0:	21094504 	addi	r4,r4,9492
100030a4:	10800044 	addi	r2,r2,1
100030a8:	18c00044 	addi	r3,r3,1
100030ac:	b1000015 	stw	r4,0(r22)
100030b0:	01000044 	movi	r4,1
100030b4:	d8801b15 	stw	r2,108(sp)
100030b8:	b1000115 	stw	r4,4(r22)
100030bc:	d8c01c15 	stw	r3,112(sp)
100030c0:	10800208 	cmpgei	r2,r2,8
100030c4:	1003621e 	bne	r2,zero,10003e50 <___vfprintf_internal_r+0x19f0>
100030c8:	b5800204 	addi	r22,r22,8
100030cc:	d8801417 	ldw	r2,80(sp)
100030d0:	d9000817 	ldw	r4,32(sp)
100030d4:	1101e70e 	bge	r2,r4,10003874 <___vfprintf_internal_r+0x1414>
100030d8:	d8800d17 	ldw	r2,52(sp)
100030dc:	d9000b17 	ldw	r4,44(sp)
100030e0:	b0800015 	stw	r2,0(r22)
100030e4:	d8801b17 	ldw	r2,108(sp)
100030e8:	1907883a 	add	r3,r3,r4
100030ec:	b1000115 	stw	r4,4(r22)
100030f0:	10800044 	addi	r2,r2,1
100030f4:	d8801b15 	stw	r2,108(sp)
100030f8:	d8c01c15 	stw	r3,112(sp)
100030fc:	10800208 	cmpgei	r2,r2,8
10003100:	1002291e 	bne	r2,zero,100039a8 <___vfprintf_internal_r+0x1548>
10003104:	b5800204 	addi	r22,r22,8
10003108:	d8800817 	ldw	r2,32(sp)
1000310c:	157fffc4 	addi	r21,r2,-1
10003110:	057dd10e 	bge	zero,r21,10002858 <___vfprintf_internal_r+0x3f8>
10003114:	01c40074 	movhi	r7,4097
10003118:	a9000450 	cmplti	r4,r21,17
1000311c:	d8801b17 	ldw	r2,108(sp)
10003120:	39c94604 	addi	r7,r7,9496
10003124:	2003461e 	bne	r4,zero,10003e40 <___vfprintf_internal_r+0x19e0>
10003128:	07000404 	movi	fp,16
1000312c:	3823883a 	mov	r17,r7
10003130:	00000406 	br	10003144 <___vfprintf_internal_r+0xce4>
10003134:	b5800204 	addi	r22,r22,8
10003138:	ad7ffc04 	addi	r21,r21,-16
1000313c:	a9000448 	cmpgei	r4,r21,17
10003140:	20033e26 	beq	r4,zero,10003e3c <___vfprintf_internal_r+0x19dc>
10003144:	10800044 	addi	r2,r2,1
10003148:	18c00404 	addi	r3,r3,16
1000314c:	b4400015 	stw	r17,0(r22)
10003150:	b7000115 	stw	fp,4(r22)
10003154:	d8c01c15 	stw	r3,112(sp)
10003158:	d8801b15 	stw	r2,108(sp)
1000315c:	11000208 	cmpgei	r4,r2,8
10003160:	203ff426 	beq	r4,zero,10003134 <___vfprintf_internal_r+0xcd4>
10003164:	d9801a04 	addi	r6,sp,104
10003168:	900b883a 	mov	r5,r18
1000316c:	9809883a 	mov	r4,r19
10003170:	00099f80 	call	100099f8 <__sprint_r>
10003174:	103dc91e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003178:	d8c01c17 	ldw	r3,112(sp)
1000317c:	d8801b17 	ldw	r2,108(sp)
10003180:	dd802704 	addi	r22,sp,156
10003184:	003fec06 	br	10003138 <___vfprintf_internal_r+0xcd8>
10003188:	8519c83a 	sub	r12,r16,r20
1000318c:	033da30e 	bge	zero,r12,1000281c <___vfprintf_internal_r+0x3bc>
10003190:	01c40074 	movhi	r7,4097
10003194:	61000450 	cmplti	r4,r12,17
10003198:	d8801b17 	ldw	r2,108(sp)
1000319c:	39c94604 	addi	r7,r7,9496
100031a0:	2000281e 	bne	r4,zero,10003244 <___vfprintf_internal_r+0xde4>
100031a4:	dc400e15 	stw	r17,56(sp)
100031a8:	dc000f15 	stw	r16,60(sp)
100031ac:	b009883a 	mov	r4,r22
100031b0:	03400404 	movi	r13,16
100031b4:	a02d883a 	mov	r22,r20
100031b8:	6021883a 	mov	r16,r12
100031bc:	4029883a 	mov	r20,r8
100031c0:	3823883a 	mov	r17,r7
100031c4:	00000406 	br	100031d8 <___vfprintf_internal_r+0xd78>
100031c8:	843ffc04 	addi	r16,r16,-16
100031cc:	81400448 	cmpgei	r5,r16,17
100031d0:	21000204 	addi	r4,r4,8
100031d4:	28001426 	beq	r5,zero,10003228 <___vfprintf_internal_r+0xdc8>
100031d8:	10800044 	addi	r2,r2,1
100031dc:	18c00404 	addi	r3,r3,16
100031e0:	24400015 	stw	r17,0(r4)
100031e4:	23400115 	stw	r13,4(r4)
100031e8:	d8c01c15 	stw	r3,112(sp)
100031ec:	d8801b15 	stw	r2,108(sp)
100031f0:	11400208 	cmpgei	r5,r2,8
100031f4:	283ff426 	beq	r5,zero,100031c8 <___vfprintf_internal_r+0xd68>
100031f8:	d9801a04 	addi	r6,sp,104
100031fc:	900b883a 	mov	r5,r18
10003200:	9809883a 	mov	r4,r19
10003204:	00099f80 	call	100099f8 <__sprint_r>
10003208:	103da41e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
1000320c:	843ffc04 	addi	r16,r16,-16
10003210:	81400448 	cmpgei	r5,r16,17
10003214:	d8c01c17 	ldw	r3,112(sp)
10003218:	d8801b17 	ldw	r2,108(sp)
1000321c:	d9002704 	addi	r4,sp,156
10003220:	03400404 	movi	r13,16
10003224:	283fec1e 	bne	r5,zero,100031d8 <___vfprintf_internal_r+0xd78>
10003228:	8019883a 	mov	r12,r16
1000322c:	880f883a 	mov	r7,r17
10003230:	dc000f17 	ldw	r16,60(sp)
10003234:	dc400e17 	ldw	r17,56(sp)
10003238:	a011883a 	mov	r8,r20
1000323c:	b029883a 	mov	r20,r22
10003240:	202d883a 	mov	r22,r4
10003244:	10800044 	addi	r2,r2,1
10003248:	1b07883a 	add	r3,r3,r12
1000324c:	d8801b15 	stw	r2,108(sp)
10003250:	b1c00015 	stw	r7,0(r22)
10003254:	b3000115 	stw	r12,4(r22)
10003258:	d8c01c15 	stw	r3,112(sp)
1000325c:	10800208 	cmpgei	r2,r2,8
10003260:	1003031e 	bne	r2,zero,10003e70 <___vfprintf_internal_r+0x1a10>
10003264:	4551c83a 	sub	r8,r8,r21
10003268:	b5800204 	addi	r22,r22,8
1000326c:	023d6d0e 	bge	zero,r8,10002824 <___vfprintf_internal_r+0x3c4>
10003270:	01c40074 	movhi	r7,4097
10003274:	41000450 	cmplti	r4,r8,17
10003278:	d8801b17 	ldw	r2,108(sp)
1000327c:	39c94604 	addi	r7,r7,9496
10003280:	2000221e 	bne	r4,zero,1000330c <___vfprintf_internal_r+0xeac>
10003284:	dc400e15 	stw	r17,56(sp)
10003288:	dc000f15 	stw	r16,60(sp)
1000328c:	03000404 	movi	r12,16
10003290:	4021883a 	mov	r16,r8
10003294:	3823883a 	mov	r17,r7
10003298:	00000406 	br	100032ac <___vfprintf_internal_r+0xe4c>
1000329c:	843ffc04 	addi	r16,r16,-16
100032a0:	81000448 	cmpgei	r4,r16,17
100032a4:	b5800204 	addi	r22,r22,8
100032a8:	20001426 	beq	r4,zero,100032fc <___vfprintf_internal_r+0xe9c>
100032ac:	10800044 	addi	r2,r2,1
100032b0:	18c00404 	addi	r3,r3,16
100032b4:	b4400015 	stw	r17,0(r22)
100032b8:	b3000115 	stw	r12,4(r22)
100032bc:	d8c01c15 	stw	r3,112(sp)
100032c0:	d8801b15 	stw	r2,108(sp)
100032c4:	11000208 	cmpgei	r4,r2,8
100032c8:	203ff426 	beq	r4,zero,1000329c <___vfprintf_internal_r+0xe3c>
100032cc:	d9801a04 	addi	r6,sp,104
100032d0:	900b883a 	mov	r5,r18
100032d4:	9809883a 	mov	r4,r19
100032d8:	00099f80 	call	100099f8 <__sprint_r>
100032dc:	103d6f1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
100032e0:	843ffc04 	addi	r16,r16,-16
100032e4:	81000448 	cmpgei	r4,r16,17
100032e8:	d8c01c17 	ldw	r3,112(sp)
100032ec:	d8801b17 	ldw	r2,108(sp)
100032f0:	dd802704 	addi	r22,sp,156
100032f4:	03000404 	movi	r12,16
100032f8:	203fec1e 	bne	r4,zero,100032ac <___vfprintf_internal_r+0xe4c>
100032fc:	8011883a 	mov	r8,r16
10003300:	880f883a 	mov	r7,r17
10003304:	dc000f17 	ldw	r16,60(sp)
10003308:	dc400e17 	ldw	r17,56(sp)
1000330c:	10800044 	addi	r2,r2,1
10003310:	1a07883a 	add	r3,r3,r8
10003314:	d8801b15 	stw	r2,108(sp)
10003318:	b1c00015 	stw	r7,0(r22)
1000331c:	b2000115 	stw	r8,4(r22)
10003320:	d8c01c15 	stw	r3,112(sp)
10003324:	10800208 	cmpgei	r2,r2,8
10003328:	10014a1e 	bne	r2,zero,10003854 <___vfprintf_internal_r+0x13f4>
1000332c:	b5800204 	addi	r22,r22,8
10003330:	003d3c06 	br	10002824 <___vfprintf_internal_r+0x3c4>
10003334:	10c00060 	cmpeqi	r3,r2,1
10003338:	1803bc1e 	bne	r3,zero,1000422c <___vfprintf_internal_r+0x1dcc>
1000333c:	108000a0 	cmpeqi	r2,r2,2
10003340:	db000417 	ldw	r12,16(sp)
10003344:	103ea826 	beq	r2,zero,10002de8 <___vfprintf_internal_r+0x988>
10003348:	d9000c17 	ldw	r4,48(sp)
1000334c:	dc402704 	addi	r17,sp,156
10003350:	a08003cc 	andi	r2,r20,15
10003354:	a806973a 	slli	r3,r21,28
10003358:	a028d13a 	srli	r20,r20,4
1000335c:	2085883a 	add	r2,r4,r2
10003360:	10800003 	ldbu	r2,0(r2)
10003364:	a82ad13a 	srli	r21,r21,4
10003368:	1d28b03a 	or	r20,r3,r20
1000336c:	88bfffc5 	stb	r2,-1(r17)
10003370:	a544b03a 	or	r2,r20,r21
10003374:	8c7fffc4 	addi	r17,r17,-1
10003378:	103ff51e 	bne	r2,zero,10003350 <___vfprintf_internal_r+0xef0>
1000337c:	d8802704 	addi	r2,sp,156
10003380:	146bc83a 	sub	r21,r2,r17
10003384:	db000415 	stw	r12,16(sp)
10003388:	003e4c06 	br	10002cbc <___vfprintf_internal_r+0x85c>
1000338c:	d9801a04 	addi	r6,sp,104
10003390:	900b883a 	mov	r5,r18
10003394:	9809883a 	mov	r4,r19
10003398:	00099f80 	call	100099f8 <__sprint_r>
1000339c:	103d3926 	beq	r2,zero,10002884 <___vfprintf_internal_r+0x424>
100033a0:	003d3e06 	br	1000289c <___vfprintf_internal_r+0x43c>
100033a4:	d8800817 	ldw	r2,32(sp)
100033a8:	da001b17 	ldw	r8,108(sp)
100033ac:	18c00044 	addi	r3,r3,1
100033b0:	10800088 	cmpgei	r2,r2,2
100033b4:	45400044 	addi	r21,r8,1
100033b8:	b7000204 	addi	fp,r22,8
100033bc:	1000f826 	beq	r2,zero,100037a0 <___vfprintf_internal_r+0x1340>
100033c0:	00800044 	movi	r2,1
100033c4:	b0800115 	stw	r2,4(r22)
100033c8:	b4400015 	stw	r17,0(r22)
100033cc:	d8c01c15 	stw	r3,112(sp)
100033d0:	dd401b15 	stw	r21,108(sp)
100033d4:	a8800210 	cmplti	r2,r21,8
100033d8:	1001cc26 	beq	r2,zero,10003b0c <___vfprintf_internal_r+0x16ac>
100033dc:	d8800b17 	ldw	r2,44(sp)
100033e0:	d9000d17 	ldw	r4,52(sp)
100033e4:	ad400044 	addi	r21,r21,1
100033e8:	1887883a 	add	r3,r3,r2
100033ec:	e0800115 	stw	r2,4(fp)
100033f0:	e1000015 	stw	r4,0(fp)
100033f4:	d8c01c15 	stw	r3,112(sp)
100033f8:	dd401b15 	stw	r21,108(sp)
100033fc:	a8800208 	cmpgei	r2,r21,8
10003400:	1001cb1e 	bne	r2,zero,10003b30 <___vfprintf_internal_r+0x16d0>
10003404:	e7000204 	addi	fp,fp,8
10003408:	d9000917 	ldw	r4,36(sp)
1000340c:	d9400a17 	ldw	r5,40(sp)
10003410:	aa000044 	addi	r8,r21,1
10003414:	000d883a 	mov	r6,zero
10003418:	000f883a 	mov	r7,zero
1000341c:	d8c00e15 	stw	r3,56(sp)
10003420:	da000715 	stw	r8,28(sp)
10003424:	000df780 	call	1000df78 <__eqdf2>
10003428:	d8c00817 	ldw	r3,32(sp)
1000342c:	da000717 	ldw	r8,28(sp)
10003430:	e5800204 	addi	r22,fp,8
10003434:	1affffc4 	addi	r11,r3,-1
10003438:	d8c00e17 	ldw	r3,56(sp)
1000343c:	1000e526 	beq	r2,zero,100037d4 <___vfprintf_internal_r+0x1374>
10003440:	8a400044 	addi	r9,r17,1
10003444:	1ac7883a 	add	r3,r3,r11
10003448:	da001b15 	stw	r8,108(sp)
1000344c:	e2400015 	stw	r9,0(fp)
10003450:	e2c00115 	stw	r11,4(fp)
10003454:	d8c01c15 	stw	r3,112(sp)
10003458:	42000208 	cmpgei	r8,r8,8
1000345c:	40013e1e 	bne	r8,zero,10003958 <___vfprintf_internal_r+0x14f8>
10003460:	e0800404 	addi	r2,fp,16
10003464:	aa000084 	addi	r8,r21,2
10003468:	b039883a 	mov	fp,r22
1000346c:	102d883a 	mov	r22,r2
10003470:	d9001017 	ldw	r4,64(sp)
10003474:	d8801644 	addi	r2,sp,89
10003478:	da001b15 	stw	r8,108(sp)
1000347c:	20c7883a 	add	r3,r4,r3
10003480:	e0800015 	stw	r2,0(fp)
10003484:	e1000115 	stw	r4,4(fp)
10003488:	d8c01c15 	stw	r3,112(sp)
1000348c:	42000210 	cmplti	r8,r8,8
10003490:	403cf11e 	bne	r8,zero,10002858 <___vfprintf_internal_r+0x3f8>
10003494:	d9801a04 	addi	r6,sp,104
10003498:	900b883a 	mov	r5,r18
1000349c:	9809883a 	mov	r4,r19
100034a0:	00099f80 	call	100099f8 <__sprint_r>
100034a4:	103cfd1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
100034a8:	d8c01c17 	ldw	r3,112(sp)
100034ac:	dd802704 	addi	r22,sp,156
100034b0:	003ce906 	br	10002858 <___vfprintf_internal_r+0x3f8>
100034b4:	db000417 	ldw	r12,16(sp)
100034b8:	003e4706 	br	10002dd8 <___vfprintf_internal_r+0x978>
100034bc:	03040074 	movhi	r12,4097
100034c0:	39000450 	cmplti	r4,r7,17
100034c4:	d8801b17 	ldw	r2,108(sp)
100034c8:	63094a04 	addi	r12,r12,9512
100034cc:	2000321e 	bne	r4,zero,10003598 <___vfprintf_internal_r+0x1138>
100034d0:	dc401115 	stw	r17,68(sp)
100034d4:	b009883a 	mov	r4,r22
100034d8:	9023883a 	mov	r17,r18
100034dc:	a82d883a 	mov	r22,r21
100034e0:	ddc01215 	stw	r23,72(sp)
100034e4:	03c00404 	movi	r15,16
100034e8:	a02f883a 	mov	r23,r20
100034ec:	db800e15 	stw	r14,56(sp)
100034f0:	8029883a 	mov	r20,r16
100034f4:	db400f15 	stw	r13,60(sp)
100034f8:	402b883a 	mov	r21,r8
100034fc:	3821883a 	mov	r16,r7
10003500:	6025883a 	mov	r18,r12
10003504:	00000406 	br	10003518 <___vfprintf_internal_r+0x10b8>
10003508:	843ffc04 	addi	r16,r16,-16
1000350c:	81800448 	cmpgei	r6,r16,17
10003510:	21000204 	addi	r4,r4,8
10003514:	30001426 	beq	r6,zero,10003568 <___vfprintf_internal_r+0x1108>
10003518:	10800044 	addi	r2,r2,1
1000351c:	18c00404 	addi	r3,r3,16
10003520:	24800015 	stw	r18,0(r4)
10003524:	23c00115 	stw	r15,4(r4)
10003528:	d8c01c15 	stw	r3,112(sp)
1000352c:	d8801b15 	stw	r2,108(sp)
10003530:	11800208 	cmpgei	r6,r2,8
10003534:	303ff426 	beq	r6,zero,10003508 <___vfprintf_internal_r+0x10a8>
10003538:	d9801a04 	addi	r6,sp,104
1000353c:	880b883a 	mov	r5,r17
10003540:	9809883a 	mov	r4,r19
10003544:	00099f80 	call	100099f8 <__sprint_r>
10003548:	1001b91e 	bne	r2,zero,10003c30 <___vfprintf_internal_r+0x17d0>
1000354c:	843ffc04 	addi	r16,r16,-16
10003550:	81800448 	cmpgei	r6,r16,17
10003554:	d8c01c17 	ldw	r3,112(sp)
10003558:	d8801b17 	ldw	r2,108(sp)
1000355c:	d9002704 	addi	r4,sp,156
10003560:	03c00404 	movi	r15,16
10003564:	303fec1e 	bne	r6,zero,10003518 <___vfprintf_internal_r+0x10b8>
10003568:	800f883a 	mov	r7,r16
1000356c:	9019883a 	mov	r12,r18
10003570:	a021883a 	mov	r16,r20
10003574:	8825883a 	mov	r18,r17
10003578:	b829883a 	mov	r20,r23
1000357c:	db800e17 	ldw	r14,56(sp)
10003580:	db400f17 	ldw	r13,60(sp)
10003584:	ddc01217 	ldw	r23,72(sp)
10003588:	dc401117 	ldw	r17,68(sp)
1000358c:	a811883a 	mov	r8,r21
10003590:	b02b883a 	mov	r21,r22
10003594:	202d883a 	mov	r22,r4
10003598:	10800044 	addi	r2,r2,1
1000359c:	19c7883a 	add	r3,r3,r7
100035a0:	d8801b15 	stw	r2,108(sp)
100035a4:	b3000015 	stw	r12,0(r22)
100035a8:	b1c00115 	stw	r7,4(r22)
100035ac:	d8c01c15 	stw	r3,112(sp)
100035b0:	10800208 	cmpgei	r2,r2,8
100035b4:	1001671e 	bne	r2,zero,10003b54 <___vfprintf_internal_r+0x16f4>
100035b8:	b5800204 	addi	r22,r22,8
100035bc:	003c7a06 	br	100027a8 <___vfprintf_internal_r+0x348>
100035c0:	d9801a04 	addi	r6,sp,104
100035c4:	900b883a 	mov	r5,r18
100035c8:	9809883a 	mov	r4,r19
100035cc:	da001115 	stw	r8,68(sp)
100035d0:	db400f15 	stw	r13,60(sp)
100035d4:	db800e15 	stw	r14,56(sp)
100035d8:	00099f80 	call	100099f8 <__sprint_r>
100035dc:	103caf1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
100035e0:	d8c01c17 	ldw	r3,112(sp)
100035e4:	da001117 	ldw	r8,68(sp)
100035e8:	db400f17 	ldw	r13,60(sp)
100035ec:	db800e17 	ldw	r14,56(sp)
100035f0:	dd802704 	addi	r22,sp,156
100035f4:	003c7a06 	br	100027e0 <___vfprintf_internal_r+0x380>
100035f8:	d9801a04 	addi	r6,sp,104
100035fc:	900b883a 	mov	r5,r18
10003600:	9809883a 	mov	r4,r19
10003604:	da000f15 	stw	r8,60(sp)
10003608:	db400e15 	stw	r13,56(sp)
1000360c:	00099f80 	call	100099f8 <__sprint_r>
10003610:	103ca21e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003614:	d8c01c17 	ldw	r3,112(sp)
10003618:	da000f17 	ldw	r8,60(sp)
1000361c:	db400e17 	ldw	r13,56(sp)
10003620:	dd802704 	addi	r22,sp,156
10003624:	003c7b06 	br	10002814 <___vfprintf_internal_r+0x3b4>
10003628:	d9401417 	ldw	r5,80(sp)
1000362c:	0141570e 	bge	zero,r5,10003b8c <___vfprintf_internal_r+0x172c>
10003630:	d8800717 	ldw	r2,28(sp)
10003634:	d9000817 	ldw	r4,32(sp)
10003638:	102b883a 	mov	r21,r2
1000363c:	2080b916 	blt	r4,r2,10003924 <___vfprintf_internal_r+0x14c4>
10003640:	05400a0e 	bge	zero,r21,1000366c <___vfprintf_internal_r+0x120c>
10003644:	d8801b17 	ldw	r2,108(sp)
10003648:	1d47883a 	add	r3,r3,r21
1000364c:	b4400015 	stw	r17,0(r22)
10003650:	10800044 	addi	r2,r2,1
10003654:	d8801b15 	stw	r2,108(sp)
10003658:	b5400115 	stw	r21,4(r22)
1000365c:	d8c01c15 	stw	r3,112(sp)
10003660:	10800208 	cmpgei	r2,r2,8
10003664:	10032d1e 	bne	r2,zero,1000431c <___vfprintf_internal_r+0x1ebc>
10003668:	b5800204 	addi	r22,r22,8
1000366c:	a800c516 	blt	r21,zero,10003984 <___vfprintf_internal_r+0x1524>
10003670:	d8800717 	ldw	r2,28(sp)
10003674:	156bc83a 	sub	r21,r2,r21
10003678:	0540db16 	blt	zero,r21,100039e8 <___vfprintf_internal_r+0x1588>
1000367c:	dd401417 	ldw	r21,80(sp)
10003680:	d8800817 	ldw	r2,32(sp)
10003684:	a880aa0e 	bge	r21,r2,10003930 <___vfprintf_internal_r+0x14d0>
10003688:	d8800d17 	ldw	r2,52(sp)
1000368c:	d9000b17 	ldw	r4,44(sp)
10003690:	b0800015 	stw	r2,0(r22)
10003694:	d8801b17 	ldw	r2,108(sp)
10003698:	1907883a 	add	r3,r3,r4
1000369c:	b1000115 	stw	r4,4(r22)
100036a0:	10800044 	addi	r2,r2,1
100036a4:	d8801b15 	stw	r2,108(sp)
100036a8:	d8c01c15 	stw	r3,112(sp)
100036ac:	10800208 	cmpgei	r2,r2,8
100036b0:	1003111e 	bne	r2,zero,100042f8 <___vfprintf_internal_r+0x1e98>
100036b4:	b5800204 	addi	r22,r22,8
100036b8:	d9000817 	ldw	r4,32(sp)
100036bc:	d9400717 	ldw	r5,28(sp)
100036c0:	2545c83a 	sub	r2,r4,r21
100036c4:	2149c83a 	sub	r4,r4,r5
100036c8:	102b883a 	mov	r21,r2
100036cc:	2080010e 	bge	r4,r2,100036d4 <___vfprintf_internal_r+0x1274>
100036d0:	202b883a 	mov	r21,r4
100036d4:	05400c0e 	bge	zero,r21,10003708 <___vfprintf_internal_r+0x12a8>
100036d8:	d9000717 	ldw	r4,28(sp)
100036dc:	1d47883a 	add	r3,r3,r21
100036e0:	b5400115 	stw	r21,4(r22)
100036e4:	8913883a 	add	r9,r17,r4
100036e8:	d9001b17 	ldw	r4,108(sp)
100036ec:	b2400015 	stw	r9,0(r22)
100036f0:	d8c01c15 	stw	r3,112(sp)
100036f4:	21000044 	addi	r4,r4,1
100036f8:	d9001b15 	stw	r4,108(sp)
100036fc:	21000208 	cmpgei	r4,r4,8
10003700:	2003111e 	bne	r4,zero,10004348 <___vfprintf_internal_r+0x1ee8>
10003704:	b5800204 	addi	r22,r22,8
10003708:	a800010e 	bge	r21,zero,10003710 <___vfprintf_internal_r+0x12b0>
1000370c:	002b883a 	mov	r21,zero
10003710:	156bc83a 	sub	r21,r2,r21
10003714:	057c500e 	bge	zero,r21,10002858 <___vfprintf_internal_r+0x3f8>
10003718:	01c40074 	movhi	r7,4097
1000371c:	a9000450 	cmplti	r4,r21,17
10003720:	d8801b17 	ldw	r2,108(sp)
10003724:	39c94604 	addi	r7,r7,9496
10003728:	2001c51e 	bne	r4,zero,10003e40 <___vfprintf_internal_r+0x19e0>
1000372c:	07000404 	movi	fp,16
10003730:	3823883a 	mov	r17,r7
10003734:	00000406 	br	10003748 <___vfprintf_internal_r+0x12e8>
10003738:	b5800204 	addi	r22,r22,8
1000373c:	ad7ffc04 	addi	r21,r21,-16
10003740:	a9000448 	cmpgei	r4,r21,17
10003744:	2001bd26 	beq	r4,zero,10003e3c <___vfprintf_internal_r+0x19dc>
10003748:	10800044 	addi	r2,r2,1
1000374c:	18c00404 	addi	r3,r3,16
10003750:	b4400015 	stw	r17,0(r22)
10003754:	b7000115 	stw	fp,4(r22)
10003758:	d8c01c15 	stw	r3,112(sp)
1000375c:	d8801b15 	stw	r2,108(sp)
10003760:	11000208 	cmpgei	r4,r2,8
10003764:	203ff426 	beq	r4,zero,10003738 <___vfprintf_internal_r+0x12d8>
10003768:	d9801a04 	addi	r6,sp,104
1000376c:	900b883a 	mov	r5,r18
10003770:	9809883a 	mov	r4,r19
10003774:	00099f80 	call	100099f8 <__sprint_r>
10003778:	103c481e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
1000377c:	d8c01c17 	ldw	r3,112(sp)
10003780:	d8801b17 	ldw	r2,108(sp)
10003784:	dd802704 	addi	r22,sp,156
10003788:	003fec06 	br	1000373c <___vfprintf_internal_r+0x12dc>
1000378c:	4002a71e 	bne	r8,zero,1000422c <___vfprintf_internal_r+0x1dcc>
10003790:	0011883a 	mov	r8,zero
10003794:	002b883a 	mov	r21,zero
10003798:	dc402704 	addi	r17,sp,156
1000379c:	003d4706 	br	10002cbc <___vfprintf_internal_r+0x85c>
100037a0:	d8800417 	ldw	r2,16(sp)
100037a4:	1080004c 	andi	r2,r2,1
100037a8:	103f051e 	bne	r2,zero,100033c0 <___vfprintf_internal_r+0xf60>
100037ac:	00800044 	movi	r2,1
100037b0:	dd401b15 	stw	r21,108(sp)
100037b4:	b4400015 	stw	r17,0(r22)
100037b8:	b0800115 	stw	r2,4(r22)
100037bc:	d8c01c15 	stw	r3,112(sp)
100037c0:	ad400208 	cmpgei	r21,r21,8
100037c4:	a800641e 	bne	r21,zero,10003958 <___vfprintf_internal_r+0x14f8>
100037c8:	42000084 	addi	r8,r8,2
100037cc:	b5800404 	addi	r22,r22,16
100037d0:	003f2706 	br	10003470 <___vfprintf_internal_r+0x1010>
100037d4:	02ff260e 	bge	zero,r11,10003470 <___vfprintf_internal_r+0x1010>
100037d8:	58800450 	cmplti	r2,r11,17
100037dc:	01c40074 	movhi	r7,4097
100037e0:	10034c1e 	bne	r2,zero,10004514 <___vfprintf_internal_r+0x20b4>
100037e4:	39c94604 	addi	r7,r7,9496
100037e8:	dc000715 	stw	r16,28(sp)
100037ec:	05800404 	movi	r22,16
100037f0:	5823883a 	mov	r17,r11
100037f4:	402b883a 	mov	r21,r8
100037f8:	3821883a 	mov	r16,r7
100037fc:	00000506 	br	10003814 <___vfprintf_internal_r+0x13b4>
10003800:	e7000204 	addi	fp,fp,8
10003804:	8c7ffc04 	addi	r17,r17,-16
10003808:	88800448 	cmpgei	r2,r17,17
1000380c:	1001d626 	beq	r2,zero,10003f68 <___vfprintf_internal_r+0x1b08>
10003810:	ad400044 	addi	r21,r21,1
10003814:	18c00404 	addi	r3,r3,16
10003818:	e4000015 	stw	r16,0(fp)
1000381c:	e5800115 	stw	r22,4(fp)
10003820:	d8c01c15 	stw	r3,112(sp)
10003824:	dd401b15 	stw	r21,108(sp)
10003828:	a8800208 	cmpgei	r2,r21,8
1000382c:	103ff426 	beq	r2,zero,10003800 <___vfprintf_internal_r+0x13a0>
10003830:	d9801a04 	addi	r6,sp,104
10003834:	900b883a 	mov	r5,r18
10003838:	9809883a 	mov	r4,r19
1000383c:	00099f80 	call	100099f8 <__sprint_r>
10003840:	103c161e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003844:	dd401b17 	ldw	r21,108(sp)
10003848:	d8c01c17 	ldw	r3,112(sp)
1000384c:	df002704 	addi	fp,sp,156
10003850:	003fec06 	br	10003804 <___vfprintf_internal_r+0x13a4>
10003854:	d9801a04 	addi	r6,sp,104
10003858:	900b883a 	mov	r5,r18
1000385c:	9809883a 	mov	r4,r19
10003860:	00099f80 	call	100099f8 <__sprint_r>
10003864:	103c0d1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003868:	d8c01c17 	ldw	r3,112(sp)
1000386c:	dd802704 	addi	r22,sp,156
10003870:	003bec06 	br	10002824 <___vfprintf_internal_r+0x3c4>
10003874:	d8800417 	ldw	r2,16(sp)
10003878:	1080004c 	andi	r2,r2,1
1000387c:	103bf626 	beq	r2,zero,10002858 <___vfprintf_internal_r+0x3f8>
10003880:	003e1506 	br	100030d8 <___vfprintf_internal_r+0xc78>
10003884:	dc402704 	addi	r17,sp,156
10003888:	003d0c06 	br	10002cbc <___vfprintf_internal_r+0x85c>
1000388c:	00800c04 	movi	r2,48
10003890:	d8801385 	stb	r2,78(sp)
10003894:	df0013c5 	stb	fp,79(sp)
10003898:	63000094 	ori	r12,r12,2
1000389c:	00800084 	movi	r2,2
100038a0:	003c3b06 	br	10002990 <___vfprintf_internal_r+0x530>
100038a4:	25000017 	ldw	r20,0(r4)
100038a8:	002b883a 	mov	r21,zero
100038ac:	d8c00615 	stw	r3,24(sp)
100038b0:	00800044 	movi	r2,1
100038b4:	003c3606 	br	10002990 <___vfprintf_internal_r+0x530>
100038b8:	d9000517 	ldw	r4,20(sp)
100038bc:	2005d7fa 	srai	r2,r4,31
100038c0:	19000015 	stw	r4,0(r3)
100038c4:	18800115 	stw	r2,4(r3)
100038c8:	003b1906 	br	10002530 <___vfprintf_internal_r+0xd0>
100038cc:	25000017 	ldw	r20,0(r4)
100038d0:	002b883a 	mov	r21,zero
100038d4:	d8c00615 	stw	r3,24(sp)
100038d8:	003d1b06 	br	10002d48 <___vfprintf_internal_r+0x8e8>
100038dc:	25000017 	ldw	r20,0(r4)
100038e0:	002b883a 	mov	r21,zero
100038e4:	d8c00615 	stw	r3,24(sp)
100038e8:	0005883a 	mov	r2,zero
100038ec:	003c2806 	br	10002990 <___vfprintf_internal_r+0x530>
100038f0:	18800017 	ldw	r2,0(r3)
100038f4:	d8800915 	stw	r2,36(sp)
100038f8:	18800117 	ldw	r2,4(r3)
100038fc:	d8800a15 	stw	r2,40(sp)
10003900:	003c5906 	br	10002a68 <___vfprintf_internal_r+0x608>
10003904:	25000017 	ldw	r20,0(r4)
10003908:	d8c00615 	stw	r3,24(sp)
1000390c:	a02bd7fa 	srai	r21,r20,31
10003910:	a805883a 	mov	r2,r21
10003914:	003cd706 	br	10002c74 <___vfprintf_internal_r+0x814>
10003918:	0421c83a 	sub	r16,zero,r16
1000391c:	d8800615 	stw	r2,24(sp)
10003920:	003d6306 	br	10002eb0 <___vfprintf_internal_r+0xa50>
10003924:	202b883a 	mov	r21,r4
10003928:	057f4616 	blt	zero,r21,10003644 <___vfprintf_internal_r+0x11e4>
1000392c:	003f4f06 	br	1000366c <___vfprintf_internal_r+0x120c>
10003930:	d8800417 	ldw	r2,16(sp)
10003934:	1080004c 	andi	r2,r2,1
10003938:	103f531e 	bne	r2,zero,10003688 <___vfprintf_internal_r+0x1228>
1000393c:	d9000817 	ldw	r4,32(sp)
10003940:	d9400717 	ldw	r5,28(sp)
10003944:	2545c83a 	sub	r2,r4,r21
10003948:	216bc83a 	sub	r21,r4,r5
1000394c:	157f6e0e 	bge	r2,r21,10003708 <___vfprintf_internal_r+0x12a8>
10003950:	102b883a 	mov	r21,r2
10003954:	003f6c06 	br	10003708 <___vfprintf_internal_r+0x12a8>
10003958:	d9801a04 	addi	r6,sp,104
1000395c:	900b883a 	mov	r5,r18
10003960:	9809883a 	mov	r4,r19
10003964:	00099f80 	call	100099f8 <__sprint_r>
10003968:	103bcc1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
1000396c:	da001b17 	ldw	r8,108(sp)
10003970:	d8c01c17 	ldw	r3,112(sp)
10003974:	dd802904 	addi	r22,sp,164
10003978:	42000044 	addi	r8,r8,1
1000397c:	df002704 	addi	fp,sp,156
10003980:	003ebb06 	br	10003470 <___vfprintf_internal_r+0x1010>
10003984:	002b883a 	mov	r21,zero
10003988:	003f3906 	br	10003670 <___vfprintf_internal_r+0x1210>
1000398c:	bf000043 	ldbu	fp,1(r23)
10003990:	63000814 	ori	r12,r12,32
10003994:	bdc00044 	addi	r23,r23,1
10003998:	e2c03fcc 	andi	r11,fp,255
1000399c:	5ac0201c 	xori	r11,r11,128
100039a0:	5affe004 	addi	r11,r11,-128
100039a4:	003afa06 	br	10002590 <___vfprintf_internal_r+0x130>
100039a8:	d9801a04 	addi	r6,sp,104
100039ac:	900b883a 	mov	r5,r18
100039b0:	9809883a 	mov	r4,r19
100039b4:	00099f80 	call	100099f8 <__sprint_r>
100039b8:	103bb81e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
100039bc:	d8c01c17 	ldw	r3,112(sp)
100039c0:	dd802704 	addi	r22,sp,156
100039c4:	003dd006 	br	10003108 <___vfprintf_internal_r+0xca8>
100039c8:	408001f0 	cmpltui	r2,r8,7
100039cc:	402b883a 	mov	r21,r8
100039d0:	1001e726 	beq	r2,zero,10004170 <___vfprintf_internal_r+0x1d10>
100039d4:	04440074 	movhi	r17,4097
100039d8:	a829883a 	mov	r20,r21
100039dc:	d8c00615 	stw	r3,24(sp)
100039e0:	8c494304 	addi	r17,r17,9484
100039e4:	003b6306 	br	10002774 <___vfprintf_internal_r+0x314>
100039e8:	01c40074 	movhi	r7,4097
100039ec:	a9000450 	cmplti	r4,r21,17
100039f0:	d8801b17 	ldw	r2,108(sp)
100039f4:	39c94604 	addi	r7,r7,9496
100039f8:	2001c21e 	bne	r4,zero,10004104 <___vfprintf_internal_r+0x1ca4>
100039fc:	dc000e15 	stw	r16,56(sp)
10003a00:	07000404 	movi	fp,16
10003a04:	3821883a 	mov	r16,r7
10003a08:	00000406 	br	10003a1c <___vfprintf_internal_r+0x15bc>
10003a0c:	b5800204 	addi	r22,r22,8
10003a10:	ad7ffc04 	addi	r21,r21,-16
10003a14:	a9000448 	cmpgei	r4,r21,17
10003a18:	2001b826 	beq	r4,zero,100040fc <___vfprintf_internal_r+0x1c9c>
10003a1c:	10800044 	addi	r2,r2,1
10003a20:	18c00404 	addi	r3,r3,16
10003a24:	b4000015 	stw	r16,0(r22)
10003a28:	b7000115 	stw	fp,4(r22)
10003a2c:	d8c01c15 	stw	r3,112(sp)
10003a30:	d8801b15 	stw	r2,108(sp)
10003a34:	11000208 	cmpgei	r4,r2,8
10003a38:	203ff426 	beq	r4,zero,10003a0c <___vfprintf_internal_r+0x15ac>
10003a3c:	d9801a04 	addi	r6,sp,104
10003a40:	900b883a 	mov	r5,r18
10003a44:	9809883a 	mov	r4,r19
10003a48:	00099f80 	call	100099f8 <__sprint_r>
10003a4c:	103b931e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003a50:	d8c01c17 	ldw	r3,112(sp)
10003a54:	d8801b17 	ldw	r2,108(sp)
10003a58:	dd802704 	addi	r22,sp,156
10003a5c:	003fec06 	br	10003a10 <___vfprintf_internal_r+0x15b0>
10003a60:	dc402704 	addi	r17,sp,156
10003a64:	a805883a 	mov	r2,r21
10003a68:	dc000715 	stw	r16,28(sp)
10003a6c:	902b883a 	mov	r21,r18
10003a70:	8821883a 	mov	r16,r17
10003a74:	db000415 	stw	r12,16(sp)
10003a78:	a023883a 	mov	r17,r20
10003a7c:	da000e15 	stw	r8,56(sp)
10003a80:	9829883a 	mov	r20,r19
10003a84:	1025883a 	mov	r18,r2
10003a88:	6827883a 	mov	r19,r13
10003a8c:	8809883a 	mov	r4,r17
10003a90:	900b883a 	mov	r5,r18
10003a94:	01800284 	movi	r6,10
10003a98:	000f883a 	mov	r7,zero
10003a9c:	000c5b80 	call	1000c5b8 <__umoddi3>
10003aa0:	10800c04 	addi	r2,r2,48
10003aa4:	8809883a 	mov	r4,r17
10003aa8:	900b883a 	mov	r5,r18
10003aac:	01800284 	movi	r6,10
10003ab0:	000f883a 	mov	r7,zero
10003ab4:	80bfffc5 	stb	r2,-1(r16)
10003ab8:	000bf980 	call	1000bf98 <__udivdi3>
10003abc:	900d883a 	mov	r6,r18
10003ac0:	880f883a 	mov	r7,r17
10003ac4:	843fffc4 	addi	r16,r16,-1
10003ac8:	1023883a 	mov	r17,r2
10003acc:	1825883a 	mov	r18,r3
10003ad0:	303fee1e 	bne	r6,zero,10003a8c <___vfprintf_internal_r+0x162c>
10003ad4:	39c002a8 	cmpgeui	r7,r7,10
10003ad8:	383fec1e 	bne	r7,zero,10003a8c <___vfprintf_internal_r+0x162c>
10003adc:	8023883a 	mov	r17,r16
10003ae0:	d8802704 	addi	r2,sp,156
10003ae4:	981b883a 	mov	r13,r19
10003ae8:	a825883a 	mov	r18,r21
10003aec:	dc000717 	ldw	r16,28(sp)
10003af0:	da000e17 	ldw	r8,56(sp)
10003af4:	a027883a 	mov	r19,r20
10003af8:	146bc83a 	sub	r21,r2,r17
10003afc:	003c6f06 	br	10002cbc <___vfprintf_internal_r+0x85c>
10003b00:	d8800517 	ldw	r2,20(sp)
10003b04:	18800015 	stw	r2,0(r3)
10003b08:	003a8906 	br	10002530 <___vfprintf_internal_r+0xd0>
10003b0c:	d9801a04 	addi	r6,sp,104
10003b10:	900b883a 	mov	r5,r18
10003b14:	9809883a 	mov	r4,r19
10003b18:	00099f80 	call	100099f8 <__sprint_r>
10003b1c:	103b5f1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003b20:	d8c01c17 	ldw	r3,112(sp)
10003b24:	dd401b17 	ldw	r21,108(sp)
10003b28:	df002704 	addi	fp,sp,156
10003b2c:	003e2b06 	br	100033dc <___vfprintf_internal_r+0xf7c>
10003b30:	d9801a04 	addi	r6,sp,104
10003b34:	900b883a 	mov	r5,r18
10003b38:	9809883a 	mov	r4,r19
10003b3c:	00099f80 	call	100099f8 <__sprint_r>
10003b40:	103b561e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003b44:	d8c01c17 	ldw	r3,112(sp)
10003b48:	dd401b17 	ldw	r21,108(sp)
10003b4c:	df002704 	addi	fp,sp,156
10003b50:	003e2d06 	br	10003408 <___vfprintf_internal_r+0xfa8>
10003b54:	d9801a04 	addi	r6,sp,104
10003b58:	900b883a 	mov	r5,r18
10003b5c:	9809883a 	mov	r4,r19
10003b60:	da001115 	stw	r8,68(sp)
10003b64:	db400f15 	stw	r13,60(sp)
10003b68:	db800e15 	stw	r14,56(sp)
10003b6c:	00099f80 	call	100099f8 <__sprint_r>
10003b70:	103b4a1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003b74:	d8c01c17 	ldw	r3,112(sp)
10003b78:	da001117 	ldw	r8,68(sp)
10003b7c:	db400f17 	ldw	r13,60(sp)
10003b80:	db800e17 	ldw	r14,56(sp)
10003b84:	dd802704 	addi	r22,sp,156
10003b88:	003b0706 	br	100027a8 <___vfprintf_internal_r+0x348>
10003b8c:	d8801b17 	ldw	r2,108(sp)
10003b90:	01040074 	movhi	r4,4097
10003b94:	21094504 	addi	r4,r4,9492
10003b98:	10800044 	addi	r2,r2,1
10003b9c:	18c00044 	addi	r3,r3,1
10003ba0:	b1000015 	stw	r4,0(r22)
10003ba4:	01000044 	movi	r4,1
10003ba8:	d8801b15 	stw	r2,108(sp)
10003bac:	b1000115 	stw	r4,4(r22)
10003bb0:	d8c01c15 	stw	r3,112(sp)
10003bb4:	10800208 	cmpgei	r2,r2,8
10003bb8:	1001641e 	bne	r2,zero,1000414c <___vfprintf_internal_r+0x1cec>
10003bbc:	b5800204 	addi	r22,r22,8
10003bc0:	2800bd1e 	bne	r5,zero,10003eb8 <___vfprintf_internal_r+0x1a58>
10003bc4:	d8800417 	ldw	r2,16(sp)
10003bc8:	d9000817 	ldw	r4,32(sp)
10003bcc:	1080004c 	andi	r2,r2,1
10003bd0:	1104b03a 	or	r2,r2,r4
10003bd4:	103b2026 	beq	r2,zero,10002858 <___vfprintf_internal_r+0x3f8>
10003bd8:	d8800d17 	ldw	r2,52(sp)
10003bdc:	d9000b17 	ldw	r4,44(sp)
10003be0:	b0800015 	stw	r2,0(r22)
10003be4:	d8801b17 	ldw	r2,108(sp)
10003be8:	20c7883a 	add	r3,r4,r3
10003bec:	b1000115 	stw	r4,4(r22)
10003bf0:	10800044 	addi	r2,r2,1
10003bf4:	d8c01c15 	stw	r3,112(sp)
10003bf8:	d8801b15 	stw	r2,108(sp)
10003bfc:	11000208 	cmpgei	r4,r2,8
10003c00:	2001771e 	bne	r4,zero,100041e0 <___vfprintf_internal_r+0x1d80>
10003c04:	b5800204 	addi	r22,r22,8
10003c08:	d9000817 	ldw	r4,32(sp)
10003c0c:	10800044 	addi	r2,r2,1
10003c10:	d8801b15 	stw	r2,108(sp)
10003c14:	20c7883a 	add	r3,r4,r3
10003c18:	b4400015 	stw	r17,0(r22)
10003c1c:	b1000115 	stw	r4,4(r22)
10003c20:	d8c01c15 	stw	r3,112(sp)
10003c24:	10800208 	cmpgei	r2,r2,8
10003c28:	103b0a26 	beq	r2,zero,10002854 <___vfprintf_internal_r+0x3f4>
10003c2c:	003e1906 	br	10003494 <___vfprintf_internal_r+0x1034>
10003c30:	8825883a 	mov	r18,r17
10003c34:	003b1906 	br	1000289c <___vfprintf_internal_r+0x43c>
10003c38:	d9000917 	ldw	r4,36(sp)
10003c3c:	d9400a17 	ldw	r5,40(sp)
10003c40:	da000615 	stw	r8,24(sp)
10003c44:	200d883a 	mov	r6,r4
10003c48:	280f883a 	mov	r7,r5
10003c4c:	db000415 	stw	r12,16(sp)
10003c50:	000f2280 	call	1000f228 <__unorddf2>
10003c54:	db000417 	ldw	r12,16(sp)
10003c58:	da000617 	ldw	r8,24(sp)
10003c5c:	1002061e 	bne	r2,zero,10004478 <___vfprintf_internal_r+0x2018>
10003c60:	057ff7c4 	movi	r21,-33
10003c64:	40bfffe0 	cmpeqi	r2,r8,-1
10003c68:	e56a703a 	and	r21,fp,r21
10003c6c:	1001b41e 	bne	r2,zero,10004340 <___vfprintf_internal_r+0x1ee0>
10003c70:	a88011d8 	cmpnei	r2,r21,71
10003c74:	10015726 	beq	r2,zero,100041d4 <___vfprintf_internal_r+0x1d74>
10003c78:	60804014 	ori	r2,r12,256
10003c7c:	d8800415 	stw	r2,16(sp)
10003c80:	d8800a17 	ldw	r2,40(sp)
10003c84:	10012d16 	blt	r2,zero,1000413c <___vfprintf_internal_r+0x1cdc>
10003c88:	dd000a17 	ldw	r20,40(sp)
10003c8c:	d8000605 	stb	zero,24(sp)
10003c90:	e08019a0 	cmpeqi	r2,fp,102
10003c94:	d8800f15 	stw	r2,60(sp)
10003c98:	1000d21e 	bne	r2,zero,10003fe4 <___vfprintf_internal_r+0x1b84>
10003c9c:	e08011a0 	cmpeqi	r2,fp,70
10003ca0:	1000d01e 	bne	r2,zero,10003fe4 <___vfprintf_internal_r+0x1b84>
10003ca4:	a8801158 	cmpnei	r2,r21,69
10003ca8:	10016226 	beq	r2,zero,10004234 <___vfprintf_internal_r+0x1dd4>
10003cac:	d8801804 	addi	r2,sp,96
10003cb0:	d8800315 	stw	r2,12(sp)
10003cb4:	d9400917 	ldw	r5,36(sp)
10003cb8:	d8801504 	addi	r2,sp,84
10003cbc:	d8800215 	stw	r2,8(sp)
10003cc0:	d8801404 	addi	r2,sp,80
10003cc4:	da000015 	stw	r8,0(sp)
10003cc8:	9809883a 	mov	r4,r19
10003ccc:	d8800115 	stw	r2,4(sp)
10003cd0:	01c00084 	movi	r7,2
10003cd4:	a00d883a 	mov	r6,r20
10003cd8:	db000815 	stw	r12,32(sp)
10003cdc:	da000715 	stw	r8,28(sp)
10003ce0:	00049c40 	call	100049c4 <_dtoa_r>
10003ce4:	da000717 	ldw	r8,28(sp)
10003ce8:	e10019d8 	cmpnei	r4,fp,103
10003cec:	db000817 	ldw	r12,32(sp)
10003cf0:	1023883a 	mov	r17,r2
10003cf4:	4007883a 	mov	r3,r8
10003cf8:	2001621e 	bne	r4,zero,10004284 <___vfprintf_internal_r+0x1e24>
10003cfc:	6080004c 	andi	r2,r12,1
10003d00:	1001621e 	bne	r2,zero,1000428c <___vfprintf_internal_r+0x1e2c>
10003d04:	d8801417 	ldw	r2,80(sp)
10003d08:	ad4011e0 	cmpeqi	r21,r21,71
10003d0c:	d8800715 	stw	r2,28(sp)
10003d10:	d8801817 	ldw	r2,96(sp)
10003d14:	1445c83a 	sub	r2,r2,r17
10003d18:	d8800815 	stw	r2,32(sp)
10003d1c:	a8000526 	beq	r21,zero,10003d34 <___vfprintf_internal_r+0x18d4>
10003d20:	d8c00717 	ldw	r3,28(sp)
10003d24:	18bfff50 	cmplti	r2,r3,-3
10003d28:	1000011e 	bne	r2,zero,10003d30 <___vfprintf_internal_r+0x18d0>
10003d2c:	40c1670e 	bge	r8,r3,100042cc <___vfprintf_internal_r+0x1e6c>
10003d30:	e73fff84 	addi	fp,fp,-2
10003d34:	d8800717 	ldw	r2,28(sp)
10003d38:	df001645 	stb	fp,89(sp)
10003d3c:	157fffc4 	addi	r21,r2,-1
10003d40:	dd401415 	stw	r21,80(sp)
10003d44:	a801d416 	blt	r21,zero,10004498 <___vfprintf_internal_r+0x2038>
10003d48:	00800ac4 	movi	r2,43
10003d4c:	d8801685 	stb	r2,90(sp)
10003d50:	a8800290 	cmplti	r2,r21,10
10003d54:	1001c11e 	bne	r2,zero,1000445c <___vfprintf_internal_r+0x1ffc>
10003d58:	d98019c4 	addi	r6,sp,103
10003d5c:	9029883a 	mov	r20,r18
10003d60:	dc400715 	stw	r17,28(sp)
10003d64:	8025883a 	mov	r18,r16
10003d68:	db000f15 	stw	r12,60(sp)
10003d6c:	3021883a 	mov	r16,r6
10003d70:	a809883a 	mov	r4,r21
10003d74:	01400284 	movi	r5,10
10003d78:	000cbfc0 	call	1000cbfc <__modsi3>
10003d7c:	10800c04 	addi	r2,r2,48
10003d80:	a809883a 	mov	r4,r21
10003d84:	80bfffc5 	stb	r2,-1(r16)
10003d88:	01400284 	movi	r5,10
10003d8c:	000cb7c0 	call	1000cb7c <__divsi3>
10003d90:	a9001908 	cmpgei	r4,r21,100
10003d94:	8023883a 	mov	r17,r16
10003d98:	102b883a 	mov	r21,r2
10003d9c:	843fffc4 	addi	r16,r16,-1
10003da0:	203ff31e 	bne	r4,zero,10003d70 <___vfprintf_internal_r+0x1910>
10003da4:	800d883a 	mov	r6,r16
10003da8:	11000c04 	addi	r4,r2,48
10003dac:	9021883a 	mov	r16,r18
10003db0:	a025883a 	mov	r18,r20
10003db4:	8829883a 	mov	r20,r17
10003db8:	a0bfff84 	addi	r2,r20,-2
10003dbc:	313fffc5 	stb	r4,-1(r6)
10003dc0:	d8c019c4 	addi	r3,sp,103
10003dc4:	db000f17 	ldw	r12,60(sp)
10003dc8:	dc400717 	ldw	r17,28(sp)
10003dcc:	10c1d62e 	bgeu	r2,r3,10004528 <___vfprintf_internal_r+0x20c8>
10003dd0:	d8c016c4 	addi	r3,sp,91
10003dd4:	00000106 	br	10003ddc <___vfprintf_internal_r+0x197c>
10003dd8:	11000003 	ldbu	r4,0(r2)
10003ddc:	19000005 	stb	r4,0(r3)
10003de0:	10800044 	addi	r2,r2,1
10003de4:	d90019c4 	addi	r4,sp,103
10003de8:	18c00044 	addi	r3,r3,1
10003dec:	113ffa1e 	bne	r2,r4,10003dd8 <___vfprintf_internal_r+0x1978>
10003df0:	d8801a44 	addi	r2,sp,105
10003df4:	d8c016c4 	addi	r3,sp,91
10003df8:	1505c83a 	sub	r2,r2,r20
10003dfc:	1885883a 	add	r2,r3,r2
10003e00:	d8c01644 	addi	r3,sp,89
10003e04:	10c5c83a 	sub	r2,r2,r3
10003e08:	d8801015 	stw	r2,64(sp)
10003e0c:	d8c00817 	ldw	r3,32(sp)
10003e10:	d9001017 	ldw	r4,64(sp)
10003e14:	18800088 	cmpgei	r2,r3,2
10003e18:	192b883a 	add	r21,r3,r4
10003e1c:	1001aa26 	beq	r2,zero,100044c8 <___vfprintf_internal_r+0x2068>
10003e20:	d8800b17 	ldw	r2,44(sp)
10003e24:	a8ab883a 	add	r21,r21,r2
10003e28:	a829883a 	mov	r20,r21
10003e2c:	a800010e 	bge	r21,zero,10003e34 <___vfprintf_internal_r+0x19d4>
10003e30:	0029883a 	mov	r20,zero
10003e34:	d8000715 	stw	zero,28(sp)
10003e38:	00009d06 	br	100040b0 <___vfprintf_internal_r+0x1c50>
10003e3c:	880f883a 	mov	r7,r17
10003e40:	10800044 	addi	r2,r2,1
10003e44:	1d47883a 	add	r3,r3,r21
10003e48:	b1c00015 	stw	r7,0(r22)
10003e4c:	003a7c06 	br	10002840 <___vfprintf_internal_r+0x3e0>
10003e50:	d9801a04 	addi	r6,sp,104
10003e54:	900b883a 	mov	r5,r18
10003e58:	9809883a 	mov	r4,r19
10003e5c:	00099f80 	call	100099f8 <__sprint_r>
10003e60:	103a8e1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003e64:	d8c01c17 	ldw	r3,112(sp)
10003e68:	dd802704 	addi	r22,sp,156
10003e6c:	003c9706 	br	100030cc <___vfprintf_internal_r+0xc6c>
10003e70:	d9801a04 	addi	r6,sp,104
10003e74:	900b883a 	mov	r5,r18
10003e78:	9809883a 	mov	r4,r19
10003e7c:	da000e15 	stw	r8,56(sp)
10003e80:	00099f80 	call	100099f8 <__sprint_r>
10003e84:	103a851e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10003e88:	d8c01c17 	ldw	r3,112(sp)
10003e8c:	da000e17 	ldw	r8,56(sp)
10003e90:	dd802704 	addi	r22,sp,156
10003e94:	003a6106 	br	1000281c <___vfprintf_internal_r+0x3bc>
10003e98:	8809883a 	mov	r4,r17
10003e9c:	db000415 	stw	r12,16(sp)
10003ea0:	d8c00615 	stw	r3,24(sp)
10003ea4:	00023c80 	call	100023c8 <strlen>
10003ea8:	db000417 	ldw	r12,16(sp)
10003eac:	102b883a 	mov	r21,r2
10003eb0:	1029883a 	mov	r20,r2
10003eb4:	003a2f06 	br	10002774 <___vfprintf_internal_r+0x314>
10003eb8:	d8800d17 	ldw	r2,52(sp)
10003ebc:	d9000b17 	ldw	r4,44(sp)
10003ec0:	b0800015 	stw	r2,0(r22)
10003ec4:	d8801b17 	ldw	r2,108(sp)
10003ec8:	20c7883a 	add	r3,r4,r3
10003ecc:	b1000115 	stw	r4,4(r22)
10003ed0:	10800044 	addi	r2,r2,1
10003ed4:	d8c01c15 	stw	r3,112(sp)
10003ed8:	d8801b15 	stw	r2,108(sp)
10003edc:	11000208 	cmpgei	r4,r2,8
10003ee0:	2000bf1e 	bne	r4,zero,100041e0 <___vfprintf_internal_r+0x1d80>
10003ee4:	b5800204 	addi	r22,r22,8
10003ee8:	283f470e 	bge	r5,zero,10003c08 <___vfprintf_internal_r+0x17a8>
10003eec:	01c40074 	movhi	r7,4097
10003ef0:	293ffc08 	cmpgei	r4,r5,-16
10003ef4:	39c94604 	addi	r7,r7,9496
10003ef8:	0179c83a 	sub	fp,zero,r5
10003efc:	20013f1e 	bne	r4,zero,100043fc <___vfprintf_internal_r+0x1f9c>
10003f00:	dc000715 	stw	r16,28(sp)
10003f04:	05400404 	movi	r21,16
10003f08:	9021883a 	mov	r16,r18
10003f0c:	3825883a 	mov	r18,r7
10003f10:	00000406 	br	10003f24 <___vfprintf_internal_r+0x1ac4>
10003f14:	b5800204 	addi	r22,r22,8
10003f18:	e73ffc04 	addi	fp,fp,-16
10003f1c:	e1800448 	cmpgei	r6,fp,17
10003f20:	30013326 	beq	r6,zero,100043f0 <___vfprintf_internal_r+0x1f90>
10003f24:	10800044 	addi	r2,r2,1
10003f28:	18c00404 	addi	r3,r3,16
10003f2c:	b4800015 	stw	r18,0(r22)
10003f30:	b5400115 	stw	r21,4(r22)
10003f34:	d8c01c15 	stw	r3,112(sp)
10003f38:	d8801b15 	stw	r2,108(sp)
10003f3c:	11800208 	cmpgei	r6,r2,8
10003f40:	303ff426 	beq	r6,zero,10003f14 <___vfprintf_internal_r+0x1ab4>
10003f44:	d9801a04 	addi	r6,sp,104
10003f48:	800b883a 	mov	r5,r16
10003f4c:	9809883a 	mov	r4,r19
10003f50:	00099f80 	call	100099f8 <__sprint_r>
10003f54:	1001721e 	bne	r2,zero,10004520 <___vfprintf_internal_r+0x20c0>
10003f58:	d8c01c17 	ldw	r3,112(sp)
10003f5c:	d8801b17 	ldw	r2,108(sp)
10003f60:	dd802704 	addi	r22,sp,156
10003f64:	003fec06 	br	10003f18 <___vfprintf_internal_r+0x1ab8>
10003f68:	800f883a 	mov	r7,r16
10003f6c:	dc000717 	ldw	r16,28(sp)
10003f70:	8817883a 	mov	r11,r17
10003f74:	aa000044 	addi	r8,r21,1
10003f78:	e0800204 	addi	r2,fp,8
10003f7c:	1ac7883a 	add	r3,r3,r11
10003f80:	e1c00015 	stw	r7,0(fp)
10003f84:	e2c00115 	stw	r11,4(fp)
10003f88:	d8c01c15 	stw	r3,112(sp)
10003f8c:	da001b15 	stw	r8,108(sp)
10003f90:	41000208 	cmpgei	r4,r8,8
10003f94:	203e701e 	bne	r4,zero,10003958 <___vfprintf_internal_r+0x14f8>
10003f98:	42000044 	addi	r8,r8,1
10003f9c:	15800204 	addi	r22,r2,8
10003fa0:	1039883a 	mov	fp,r2
10003fa4:	003d3206 	br	10003470 <___vfprintf_internal_r+0x1010>
10003fa8:	d8800617 	ldw	r2,24(sp)
10003fac:	d8c00615 	stw	r3,24(sp)
10003fb0:	15000017 	ldw	r20,0(r2)
10003fb4:	a02bd7fa 	srai	r21,r20,31
10003fb8:	a805883a 	mov	r2,r21
10003fbc:	003b2d06 	br	10002c74 <___vfprintf_internal_r+0x814>
10003fc0:	d8800617 	ldw	r2,24(sp)
10003fc4:	002b883a 	mov	r21,zero
10003fc8:	d8c00615 	stw	r3,24(sp)
10003fcc:	15000017 	ldw	r20,0(r2)
10003fd0:	0005883a 	mov	r2,zero
10003fd4:	003a6e06 	br	10002990 <___vfprintf_internal_r+0x530>
10003fd8:	04440074 	movhi	r17,4097
10003fdc:	8c493504 	addi	r17,r17,9428
10003fe0:	003ac606 	br	10002afc <___vfprintf_internal_r+0x69c>
10003fe4:	d8801804 	addi	r2,sp,96
10003fe8:	d8800315 	stw	r2,12(sp)
10003fec:	d9400917 	ldw	r5,36(sp)
10003ff0:	d8801504 	addi	r2,sp,84
10003ff4:	d8800215 	stw	r2,8(sp)
10003ff8:	d8801404 	addi	r2,sp,80
10003ffc:	da000015 	stw	r8,0(sp)
10004000:	d8800115 	stw	r2,4(sp)
10004004:	01c000c4 	movi	r7,3
10004008:	a00d883a 	mov	r6,r20
1000400c:	9809883a 	mov	r4,r19
10004010:	db000815 	stw	r12,32(sp)
10004014:	da000715 	stw	r8,28(sp)
10004018:	00049c40 	call	100049c4 <_dtoa_r>
1000401c:	da000717 	ldw	r8,28(sp)
10004020:	1023883a 	mov	r17,r2
10004024:	db000817 	ldw	r12,32(sp)
10004028:	1207883a 	add	r3,r2,r8
1000402c:	88800007 	ldb	r2,0(r17)
10004030:	10800c20 	cmpeqi	r2,r2,48
10004034:	1000571e 	bne	r2,zero,10004194 <___vfprintf_internal_r+0x1d34>
10004038:	d8801417 	ldw	r2,80(sp)
1000403c:	1893883a 	add	r9,r3,r2
10004040:	d9000917 	ldw	r4,36(sp)
10004044:	000d883a 	mov	r6,zero
10004048:	000f883a 	mov	r7,zero
1000404c:	a00b883a 	mov	r5,r20
10004050:	da401115 	stw	r9,68(sp)
10004054:	da000815 	stw	r8,32(sp)
10004058:	db000715 	stw	r12,28(sp)
1000405c:	000df780 	call	1000df78 <__eqdf2>
10004060:	db000717 	ldw	r12,28(sp)
10004064:	da000817 	ldw	r8,32(sp)
10004068:	da401117 	ldw	r9,68(sp)
1000406c:	1000891e 	bne	r2,zero,10004294 <___vfprintf_internal_r+0x1e34>
10004070:	4805883a 	mov	r2,r9
10004074:	d8c01417 	ldw	r3,80(sp)
10004078:	1445c83a 	sub	r2,r2,r17
1000407c:	ad4011d8 	cmpnei	r21,r21,71
10004080:	d8c00715 	stw	r3,28(sp)
10004084:	d8800815 	stw	r2,32(sp)
10004088:	a83f2526 	beq	r21,zero,10003d20 <___vfprintf_internal_r+0x18c0>
1000408c:	d8800f17 	ldw	r2,60(sp)
10004090:	103f2826 	beq	r2,zero,10003d34 <___vfprintf_internal_r+0x18d4>
10004094:	d8c00717 	ldw	r3,28(sp)
10004098:	6080004c 	andi	r2,r12,1
1000409c:	1204b03a 	or	r2,r2,r8
100040a0:	00c1140e 	bge	zero,r3,100044f4 <___vfprintf_internal_r+0x2094>
100040a4:	1001011e 	bne	r2,zero,100044ac <___vfprintf_internal_r+0x204c>
100040a8:	dd400717 	ldw	r21,28(sp)
100040ac:	a829883a 	mov	r20,r21
100040b0:	d8800607 	ldb	r2,24(sp)
100040b4:	10008026 	beq	r2,zero,100042b8 <___vfprintf_internal_r+0x1e58>
100040b8:	00800b44 	movi	r2,45
100040bc:	d8801345 	stb	r2,77(sp)
100040c0:	d8800e17 	ldw	r2,56(sp)
100040c4:	0011883a 	mov	r8,zero
100040c8:	d8800615 	stw	r2,24(sp)
100040cc:	003b0306 	br	10002cdc <___vfprintf_internal_r+0x87c>
100040d0:	d8800617 	ldw	r2,24(sp)
100040d4:	002b883a 	mov	r21,zero
100040d8:	d8c00615 	stw	r3,24(sp)
100040dc:	15000017 	ldw	r20,0(r2)
100040e0:	00800044 	movi	r2,1
100040e4:	003a2a06 	br	10002990 <___vfprintf_internal_r+0x530>
100040e8:	d8800617 	ldw	r2,24(sp)
100040ec:	002b883a 	mov	r21,zero
100040f0:	d8c00615 	stw	r3,24(sp)
100040f4:	15000017 	ldw	r20,0(r2)
100040f8:	003b1306 	br	10002d48 <___vfprintf_internal_r+0x8e8>
100040fc:	800f883a 	mov	r7,r16
10004100:	dc000e17 	ldw	r16,56(sp)
10004104:	10800044 	addi	r2,r2,1
10004108:	1d47883a 	add	r3,r3,r21
1000410c:	d8801b15 	stw	r2,108(sp)
10004110:	b1c00015 	stw	r7,0(r22)
10004114:	b5400115 	stw	r21,4(r22)
10004118:	d8c01c15 	stw	r3,112(sp)
1000411c:	10800208 	cmpgei	r2,r2,8
10004120:	10003a1e 	bne	r2,zero,1000420c <___vfprintf_internal_r+0x1dac>
10004124:	b5800204 	addi	r22,r22,8
10004128:	003d5406 	br	1000367c <___vfprintf_internal_r+0x121c>
1000412c:	00800b44 	movi	r2,45
10004130:	d8801345 	stb	r2,77(sp)
10004134:	03400b44 	movi	r13,45
10004138:	003a6c06 	br	10002aec <___vfprintf_internal_r+0x68c>
1000413c:	1520003c 	xorhi	r20,r2,32768
10004140:	00800b44 	movi	r2,45
10004144:	d8800605 	stb	r2,24(sp)
10004148:	003ed106 	br	10003c90 <___vfprintf_internal_r+0x1830>
1000414c:	d9801a04 	addi	r6,sp,104
10004150:	900b883a 	mov	r5,r18
10004154:	9809883a 	mov	r4,r19
10004158:	00099f80 	call	100099f8 <__sprint_r>
1000415c:	1039cf1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10004160:	d9401417 	ldw	r5,80(sp)
10004164:	d8c01c17 	ldw	r3,112(sp)
10004168:	dd802704 	addi	r22,sp,156
1000416c:	003e9406 	br	10003bc0 <___vfprintf_internal_r+0x1760>
10004170:	05400184 	movi	r21,6
10004174:	003e1706 	br	100039d4 <___vfprintf_internal_r+0x1574>
10004178:	d9401345 	stb	r5,77(sp)
1000417c:	00397706 	br	1000275c <___vfprintf_internal_r+0x2fc>
10004180:	d9801a04 	addi	r6,sp,104
10004184:	900b883a 	mov	r5,r18
10004188:	9809883a 	mov	r4,r19
1000418c:	00099f80 	call	100099f8 <__sprint_r>
10004190:	0039c206 	br	1000289c <___vfprintf_internal_r+0x43c>
10004194:	d9000917 	ldw	r4,36(sp)
10004198:	000d883a 	mov	r6,zero
1000419c:	000f883a 	mov	r7,zero
100041a0:	a00b883a 	mov	r5,r20
100041a4:	d8c01115 	stw	r3,68(sp)
100041a8:	da000815 	stw	r8,32(sp)
100041ac:	db000715 	stw	r12,28(sp)
100041b0:	000df780 	call	1000df78 <__eqdf2>
100041b4:	db000717 	ldw	r12,28(sp)
100041b8:	da000817 	ldw	r8,32(sp)
100041bc:	d8c01117 	ldw	r3,68(sp)
100041c0:	103f9d26 	beq	r2,zero,10004038 <___vfprintf_internal_r+0x1bd8>
100041c4:	00800044 	movi	r2,1
100041c8:	1205c83a 	sub	r2,r2,r8
100041cc:	d8801415 	stw	r2,80(sp)
100041d0:	003f9a06 	br	1000403c <___vfprintf_internal_r+0x1bdc>
100041d4:	403ea81e 	bne	r8,zero,10003c78 <___vfprintf_internal_r+0x1818>
100041d8:	02000044 	movi	r8,1
100041dc:	003ea606 	br	10003c78 <___vfprintf_internal_r+0x1818>
100041e0:	d9801a04 	addi	r6,sp,104
100041e4:	900b883a 	mov	r5,r18
100041e8:	9809883a 	mov	r4,r19
100041ec:	00099f80 	call	100099f8 <__sprint_r>
100041f0:	1039aa1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
100041f4:	d9401417 	ldw	r5,80(sp)
100041f8:	d8c01c17 	ldw	r3,112(sp)
100041fc:	d8801b17 	ldw	r2,108(sp)
10004200:	dd802704 	addi	r22,sp,156
10004204:	283e800e 	bge	r5,zero,10003c08 <___vfprintf_internal_r+0x17a8>
10004208:	003f3806 	br	10003eec <___vfprintf_internal_r+0x1a8c>
1000420c:	d9801a04 	addi	r6,sp,104
10004210:	900b883a 	mov	r5,r18
10004214:	9809883a 	mov	r4,r19
10004218:	00099f80 	call	100099f8 <__sprint_r>
1000421c:	10399f1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10004220:	d8c01c17 	ldw	r3,112(sp)
10004224:	dd802704 	addi	r22,sp,156
10004228:	003d1406 	br	1000367c <___vfprintf_internal_r+0x121c>
1000422c:	db000417 	ldw	r12,16(sp)
10004230:	003a9d06 	br	10002ca8 <___vfprintf_internal_r+0x848>
10004234:	d8801804 	addi	r2,sp,96
10004238:	d8800315 	stw	r2,12(sp)
1000423c:	d9400917 	ldw	r5,36(sp)
10004240:	d8801504 	addi	r2,sp,84
10004244:	40c00044 	addi	r3,r8,1
10004248:	d8800215 	stw	r2,8(sp)
1000424c:	d8801404 	addi	r2,sp,80
10004250:	d8c00015 	stw	r3,0(sp)
10004254:	d8800115 	stw	r2,4(sp)
10004258:	01c00084 	movi	r7,2
1000425c:	a00d883a 	mov	r6,r20
10004260:	9809883a 	mov	r4,r19
10004264:	db001115 	stw	r12,68(sp)
10004268:	da000815 	stw	r8,32(sp)
1000426c:	d8c00715 	stw	r3,28(sp)
10004270:	00049c40 	call	100049c4 <_dtoa_r>
10004274:	d8c00717 	ldw	r3,28(sp)
10004278:	da000817 	ldw	r8,32(sp)
1000427c:	db001117 	ldw	r12,68(sp)
10004280:	1023883a 	mov	r17,r2
10004284:	e08011d8 	cmpnei	r2,fp,71
10004288:	103e9c26 	beq	r2,zero,10003cfc <___vfprintf_internal_r+0x189c>
1000428c:	88d3883a 	add	r9,r17,r3
10004290:	003f6b06 	br	10004040 <___vfprintf_internal_r+0x1be0>
10004294:	d8801817 	ldw	r2,96(sp)
10004298:	127f762e 	bgeu	r2,r9,10004074 <___vfprintf_internal_r+0x1c14>
1000429c:	01000c04 	movi	r4,48
100042a0:	10c00044 	addi	r3,r2,1
100042a4:	d8c01815 	stw	r3,96(sp)
100042a8:	11000005 	stb	r4,0(r2)
100042ac:	d8801817 	ldw	r2,96(sp)
100042b0:	127ffb36 	bltu	r2,r9,100042a0 <___vfprintf_internal_r+0x1e40>
100042b4:	003f6f06 	br	10004074 <___vfprintf_internal_r+0x1c14>
100042b8:	d8800e17 	ldw	r2,56(sp)
100042bc:	db401343 	ldbu	r13,77(sp)
100042c0:	0011883a 	mov	r8,zero
100042c4:	d8800615 	stw	r2,24(sp)
100042c8:	003a8006 	br	10002ccc <___vfprintf_internal_r+0x86c>
100042cc:	d8800717 	ldw	r2,28(sp)
100042d0:	d8c00817 	ldw	r3,32(sp)
100042d4:	10c02b16 	blt	r2,r3,10004384 <___vfprintf_internal_r+0x1f24>
100042d8:	6300004c 	andi	r12,r12,1
100042dc:	6000581e 	bne	r12,zero,10004440 <___vfprintf_internal_r+0x1fe0>
100042e0:	1029883a 	mov	r20,r2
100042e4:	1000010e 	bge	r2,zero,100042ec <___vfprintf_internal_r+0x1e8c>
100042e8:	0029883a 	mov	r20,zero
100042ec:	dd400717 	ldw	r21,28(sp)
100042f0:	070019c4 	movi	fp,103
100042f4:	003f6e06 	br	100040b0 <___vfprintf_internal_r+0x1c50>
100042f8:	d9801a04 	addi	r6,sp,104
100042fc:	900b883a 	mov	r5,r18
10004300:	9809883a 	mov	r4,r19
10004304:	00099f80 	call	100099f8 <__sprint_r>
10004308:	1039641e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
1000430c:	dd401417 	ldw	r21,80(sp)
10004310:	d8c01c17 	ldw	r3,112(sp)
10004314:	dd802704 	addi	r22,sp,156
10004318:	003ce706 	br	100036b8 <___vfprintf_internal_r+0x1258>
1000431c:	d9801a04 	addi	r6,sp,104
10004320:	900b883a 	mov	r5,r18
10004324:	9809883a 	mov	r4,r19
10004328:	00099f80 	call	100099f8 <__sprint_r>
1000432c:	10395b1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10004330:	d8c01c17 	ldw	r3,112(sp)
10004334:	dd802704 	addi	r22,sp,156
10004338:	a83ccd0e 	bge	r21,zero,10003670 <___vfprintf_internal_r+0x1210>
1000433c:	003d9106 	br	10003984 <___vfprintf_internal_r+0x1524>
10004340:	02000184 	movi	r8,6
10004344:	003e4c06 	br	10003c78 <___vfprintf_internal_r+0x1818>
10004348:	d9801a04 	addi	r6,sp,104
1000434c:	900b883a 	mov	r5,r18
10004350:	9809883a 	mov	r4,r19
10004354:	00099f80 	call	100099f8 <__sprint_r>
10004358:	1039501e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
1000435c:	d8801417 	ldw	r2,80(sp)
10004360:	d9000817 	ldw	r4,32(sp)
10004364:	d8c01c17 	ldw	r3,112(sp)
10004368:	dd802704 	addi	r22,sp,156
1000436c:	2085c83a 	sub	r2,r4,r2
10004370:	003ce506 	br	10003708 <___vfprintf_internal_r+0x12a8>
10004374:	4029883a 	mov	r20,r8
10004378:	d8c00615 	stw	r3,24(sp)
1000437c:	402b883a 	mov	r21,r8
10004380:	0038fc06 	br	10002774 <___vfprintf_internal_r+0x314>
10004384:	d8800817 	ldw	r2,32(sp)
10004388:	d8c00b17 	ldw	r3,44(sp)
1000438c:	10eb883a 	add	r21,r2,r3
10004390:	d8800717 	ldw	r2,28(sp)
10004394:	00800316 	blt	zero,r2,100043a4 <___vfprintf_internal_r+0x1f44>
10004398:	d8800717 	ldw	r2,28(sp)
1000439c:	a8abc83a 	sub	r21,r21,r2
100043a0:	ad400044 	addi	r21,r21,1
100043a4:	a829883a 	mov	r20,r21
100043a8:	a8002a16 	blt	r21,zero,10004454 <___vfprintf_internal_r+0x1ff4>
100043ac:	070019c4 	movi	fp,103
100043b0:	003f3f06 	br	100040b0 <___vfprintf_internal_r+0x1c50>
100043b4:	d9401345 	stb	r5,77(sp)
100043b8:	003ae006 	br	10002f3c <___vfprintf_internal_r+0xadc>
100043bc:	d9401345 	stb	r5,77(sp)
100043c0:	003a5706 	br	10002d20 <___vfprintf_internal_r+0x8c0>
100043c4:	d9401345 	stb	r5,77(sp)
100043c8:	003b1706 	br	10003028 <___vfprintf_internal_r+0xbc8>
100043cc:	d9401345 	stb	r5,77(sp)
100043d0:	003a2006 	br	10002c54 <___vfprintf_internal_r+0x7f4>
100043d4:	d9401345 	stb	r5,77(sp)
100043d8:	003a6606 	br	10002d74 <___vfprintf_internal_r+0x914>
100043dc:	d9401345 	stb	r5,77(sp)
100043e0:	00399706 	br	10002a40 <___vfprintf_internal_r+0x5e0>
100043e4:	00bfffc4 	movi	r2,-1
100043e8:	d8800515 	stw	r2,20(sp)
100043ec:	00392e06 	br	100028a8 <___vfprintf_internal_r+0x448>
100043f0:	900f883a 	mov	r7,r18
100043f4:	8025883a 	mov	r18,r16
100043f8:	dc000717 	ldw	r16,28(sp)
100043fc:	10800044 	addi	r2,r2,1
10004400:	1f07883a 	add	r3,r3,fp
10004404:	b1c00015 	stw	r7,0(r22)
10004408:	b7000115 	stw	fp,4(r22)
1000440c:	d8c01c15 	stw	r3,112(sp)
10004410:	d8801b15 	stw	r2,108(sp)
10004414:	11000208 	cmpgei	r4,r2,8
10004418:	203dfa26 	beq	r4,zero,10003c04 <___vfprintf_internal_r+0x17a4>
1000441c:	d9801a04 	addi	r6,sp,104
10004420:	900b883a 	mov	r5,r18
10004424:	9809883a 	mov	r4,r19
10004428:	00099f80 	call	100099f8 <__sprint_r>
1000442c:	10391b1e 	bne	r2,zero,1000289c <___vfprintf_internal_r+0x43c>
10004430:	d8c01c17 	ldw	r3,112(sp)
10004434:	d8801b17 	ldw	r2,108(sp)
10004438:	dd802704 	addi	r22,sp,156
1000443c:	003df206 	br	10003c08 <___vfprintf_internal_r+0x17a8>
10004440:	d8800717 	ldw	r2,28(sp)
10004444:	d8c00b17 	ldw	r3,44(sp)
10004448:	10eb883a 	add	r21,r2,r3
1000444c:	a829883a 	mov	r20,r21
10004450:	a83fd60e 	bge	r21,zero,100043ac <___vfprintf_internal_r+0x1f4c>
10004454:	0029883a 	mov	r20,zero
10004458:	003fd406 	br	100043ac <___vfprintf_internal_r+0x1f4c>
1000445c:	00800c04 	movi	r2,48
10004460:	ad400c04 	addi	r21,r21,48
10004464:	d88016c5 	stb	r2,91(sp)
10004468:	00800104 	movi	r2,4
1000446c:	dd401705 	stb	r21,92(sp)
10004470:	d8801015 	stw	r2,64(sp)
10004474:	003e6506 	br	10003e0c <___vfprintf_internal_r+0x19ac>
10004478:	d8800a17 	ldw	r2,40(sp)
1000447c:	10001916 	blt	r2,zero,100044e4 <___vfprintf_internal_r+0x2084>
10004480:	db401343 	ldbu	r13,77(sp)
10004484:	e0801210 	cmplti	r2,fp,72
10004488:	1000131e 	bne	r2,zero,100044d8 <___vfprintf_internal_r+0x2078>
1000448c:	04440074 	movhi	r17,4097
10004490:	8c493804 	addi	r17,r17,9440
10004494:	00399906 	br	10002afc <___vfprintf_internal_r+0x69c>
10004498:	05400044 	movi	r21,1
1000449c:	a8abc83a 	sub	r21,r21,r2
100044a0:	00800b44 	movi	r2,45
100044a4:	d8801685 	stb	r2,90(sp)
100044a8:	003e2906 	br	10003d50 <___vfprintf_internal_r+0x18f0>
100044ac:	d8800b17 	ldw	r2,44(sp)
100044b0:	18ab883a 	add	r21,r3,r2
100044b4:	aa2b883a 	add	r21,r21,r8
100044b8:	a829883a 	mov	r20,r21
100044bc:	a83efc0e 	bge	r21,zero,100040b0 <___vfprintf_internal_r+0x1c50>
100044c0:	0029883a 	mov	r20,zero
100044c4:	003efa06 	br	100040b0 <___vfprintf_internal_r+0x1c50>
100044c8:	6080004c 	andi	r2,r12,1
100044cc:	d8800715 	stw	r2,28(sp)
100044d0:	103e531e 	bne	r2,zero,10003e20 <___vfprintf_internal_r+0x19c0>
100044d4:	003ff806 	br	100044b8 <___vfprintf_internal_r+0x2058>
100044d8:	04440074 	movhi	r17,4097
100044dc:	8c493704 	addi	r17,r17,9436
100044e0:	00398606 	br	10002afc <___vfprintf_internal_r+0x69c>
100044e4:	00800b44 	movi	r2,45
100044e8:	d8801345 	stb	r2,77(sp)
100044ec:	03400b44 	movi	r13,45
100044f0:	003fe406 	br	10004484 <___vfprintf_internal_r+0x2024>
100044f4:	1000031e 	bne	r2,zero,10004504 <___vfprintf_internal_r+0x20a4>
100044f8:	05000044 	movi	r20,1
100044fc:	05400044 	movi	r21,1
10004500:	003eeb06 	br	100040b0 <___vfprintf_internal_r+0x1c50>
10004504:	d8800b17 	ldw	r2,44(sp)
10004508:	15400044 	addi	r21,r2,1
1000450c:	aa2b883a 	add	r21,r21,r8
10004510:	003fe906 	br	100044b8 <___vfprintf_internal_r+0x2058>
10004514:	b005883a 	mov	r2,r22
10004518:	39c94604 	addi	r7,r7,9496
1000451c:	003e9706 	br	10003f7c <___vfprintf_internal_r+0x1b1c>
10004520:	8025883a 	mov	r18,r16
10004524:	0038dd06 	br	1000289c <___vfprintf_internal_r+0x43c>
10004528:	00800084 	movi	r2,2
1000452c:	d8801015 	stw	r2,64(sp)
10004530:	003e3606 	br	10003e0c <___vfprintf_internal_r+0x19ac>
10004534:	d8c00617 	ldw	r3,24(sp)
10004538:	1a000017 	ldw	r8,0(r3)
1000453c:	18c00104 	addi	r3,r3,4
10004540:	4000010e 	bge	r8,zero,10004548 <___vfprintf_internal_r+0x20e8>
10004544:	023fffc4 	movi	r8,-1
10004548:	bf000043 	ldbu	fp,1(r23)
1000454c:	d8c00615 	stw	r3,24(sp)
10004550:	102f883a 	mov	r23,r2
10004554:	e2c03fcc 	andi	r11,fp,255
10004558:	5ac0201c 	xori	r11,r11,128
1000455c:	5affe004 	addi	r11,r11,-128
10004560:	00380b06 	br	10002590 <___vfprintf_internal_r+0x130>

10004564 <__vfprintf_internal>:
10004564:	00c40074 	movhi	r3,4097
10004568:	2005883a 	mov	r2,r4
1000456c:	1911b317 	ldw	r4,18124(r3)
10004570:	300f883a 	mov	r7,r6
10004574:	280d883a 	mov	r6,r5
10004578:	100b883a 	mov	r5,r2
1000457c:	00024601 	jmpi	10002460 <___vfprintf_internal_r>

10004580 <__sbprintf>:
10004580:	2880030b 	ldhu	r2,12(r5)
10004584:	2b001917 	ldw	r12,100(r5)
10004588:	2ac0038b 	ldhu	r11,14(r5)
1000458c:	2a800717 	ldw	r10,28(r5)
10004590:	2a400917 	ldw	r9,36(r5)
10004594:	defee204 	addi	sp,sp,-1144
10004598:	da001a04 	addi	r8,sp,104
1000459c:	00c10004 	movi	r3,1024
100045a0:	dc011a15 	stw	r16,1128(sp)
100045a4:	10bfff4c 	andi	r2,r2,65533
100045a8:	2821883a 	mov	r16,r5
100045ac:	d80b883a 	mov	r5,sp
100045b0:	dc811c15 	stw	r18,1136(sp)
100045b4:	dc411b15 	stw	r17,1132(sp)
100045b8:	dfc11d15 	stw	ra,1140(sp)
100045bc:	2025883a 	mov	r18,r4
100045c0:	d880030d 	sth	r2,12(sp)
100045c4:	db001915 	stw	r12,100(sp)
100045c8:	dac0038d 	sth	r11,14(sp)
100045cc:	da800715 	stw	r10,28(sp)
100045d0:	da400915 	stw	r9,36(sp)
100045d4:	da000015 	stw	r8,0(sp)
100045d8:	da000415 	stw	r8,16(sp)
100045dc:	d8c00215 	stw	r3,8(sp)
100045e0:	d8c00515 	stw	r3,20(sp)
100045e4:	d8000615 	stw	zero,24(sp)
100045e8:	00024600 	call	10002460 <___vfprintf_internal_r>
100045ec:	1023883a 	mov	r17,r2
100045f0:	10000d0e 	bge	r2,zero,10004628 <__sbprintf+0xa8>
100045f4:	d880030b 	ldhu	r2,12(sp)
100045f8:	1080100c 	andi	r2,r2,64
100045fc:	10000326 	beq	r2,zero,1000460c <__sbprintf+0x8c>
10004600:	8080030b 	ldhu	r2,12(r16)
10004604:	10801014 	ori	r2,r2,64
10004608:	8080030d 	sth	r2,12(r16)
1000460c:	8805883a 	mov	r2,r17
10004610:	dfc11d17 	ldw	ra,1140(sp)
10004614:	dc811c17 	ldw	r18,1136(sp)
10004618:	dc411b17 	ldw	r17,1132(sp)
1000461c:	dc011a17 	ldw	r16,1128(sp)
10004620:	dec11e04 	addi	sp,sp,1144
10004624:	f800283a 	ret
10004628:	d80b883a 	mov	r5,sp
1000462c:	9009883a 	mov	r4,r18
10004630:	00063340 	call	10006334 <_fflush_r>
10004634:	103fef26 	beq	r2,zero,100045f4 <__sbprintf+0x74>
10004638:	047fffc4 	movi	r17,-1
1000463c:	003fed06 	br	100045f4 <__sbprintf+0x74>

10004640 <__swsetup_r>:
10004640:	00840074 	movhi	r2,4097
10004644:	1091b317 	ldw	r2,18124(r2)
10004648:	defffd04 	addi	sp,sp,-12
1000464c:	dc400115 	stw	r17,4(sp)
10004650:	dc000015 	stw	r16,0(sp)
10004654:	dfc00215 	stw	ra,8(sp)
10004658:	2023883a 	mov	r17,r4
1000465c:	2821883a 	mov	r16,r5
10004660:	10000226 	beq	r2,zero,1000466c <__swsetup_r+0x2c>
10004664:	10c00e17 	ldw	r3,56(r2)
10004668:	18001f26 	beq	r3,zero,100046e8 <__swsetup_r+0xa8>
1000466c:	8180030b 	ldhu	r6,12(r16)
10004670:	30c0020c 	andi	r3,r6,8
10004674:	3005883a 	mov	r2,r6
10004678:	18002126 	beq	r3,zero,10004700 <__swsetup_r+0xc0>
1000467c:	80c00417 	ldw	r3,16(r16)
10004680:	18002826 	beq	r3,zero,10004724 <__swsetup_r+0xe4>
10004684:	1100004c 	andi	r4,r2,1
10004688:	20000b1e 	bne	r4,zero,100046b8 <__swsetup_r+0x78>
1000468c:	1100008c 	andi	r4,r2,2
10004690:	20002e1e 	bne	r4,zero,1000474c <__swsetup_r+0x10c>
10004694:	81000517 	ldw	r4,20(r16)
10004698:	81000215 	stw	r4,8(r16)
1000469c:	18000b26 	beq	r3,zero,100046cc <__swsetup_r+0x8c>
100046a0:	0005883a 	mov	r2,zero
100046a4:	dfc00217 	ldw	ra,8(sp)
100046a8:	dc400117 	ldw	r17,4(sp)
100046ac:	dc000017 	ldw	r16,0(sp)
100046b0:	dec00304 	addi	sp,sp,12
100046b4:	f800283a 	ret
100046b8:	81000517 	ldw	r4,20(r16)
100046bc:	80000215 	stw	zero,8(r16)
100046c0:	0109c83a 	sub	r4,zero,r4
100046c4:	81000615 	stw	r4,24(r16)
100046c8:	183ff51e 	bne	r3,zero,100046a0 <__swsetup_r+0x60>
100046cc:	10c0200c 	andi	r3,r2,128
100046d0:	0005883a 	mov	r2,zero
100046d4:	183ff326 	beq	r3,zero,100046a4 <__swsetup_r+0x64>
100046d8:	31801014 	ori	r6,r6,64
100046dc:	8180030d 	sth	r6,12(r16)
100046e0:	00bfffc4 	movi	r2,-1
100046e4:	003fef06 	br	100046a4 <__swsetup_r+0x64>
100046e8:	1009883a 	mov	r4,r2
100046ec:	000677c0 	call	1000677c <__sinit>
100046f0:	8180030b 	ldhu	r6,12(r16)
100046f4:	30c0020c 	andi	r3,r6,8
100046f8:	3005883a 	mov	r2,r6
100046fc:	183fdf1e 	bne	r3,zero,1000467c <__swsetup_r+0x3c>
10004700:	3080040c 	andi	r2,r6,16
10004704:	10002126 	beq	r2,zero,1000478c <__swsetup_r+0x14c>
10004708:	3080010c 	andi	r2,r6,4
1000470c:	1000111e 	bne	r2,zero,10004754 <__swsetup_r+0x114>
10004710:	80c00417 	ldw	r3,16(r16)
10004714:	30800214 	ori	r2,r6,8
10004718:	8080030d 	sth	r2,12(r16)
1000471c:	100d883a 	mov	r6,r2
10004720:	183fd81e 	bne	r3,zero,10004684 <__swsetup_r+0x44>
10004724:	1100a00c 	andi	r4,r2,640
10004728:	21008020 	cmpeqi	r4,r4,512
1000472c:	203fd51e 	bne	r4,zero,10004684 <__swsetup_r+0x44>
10004730:	800b883a 	mov	r5,r16
10004734:	8809883a 	mov	r4,r17
10004738:	00072040 	call	10007204 <__smakebuf_r>
1000473c:	8180030b 	ldhu	r6,12(r16)
10004740:	80c00417 	ldw	r3,16(r16)
10004744:	3005883a 	mov	r2,r6
10004748:	003fce06 	br	10004684 <__swsetup_r+0x44>
1000474c:	0009883a 	mov	r4,zero
10004750:	003fd106 	br	10004698 <__swsetup_r+0x58>
10004754:	81400c17 	ldw	r5,48(r16)
10004758:	28000626 	beq	r5,zero,10004774 <__swsetup_r+0x134>
1000475c:	80801004 	addi	r2,r16,64
10004760:	28800326 	beq	r5,r2,10004770 <__swsetup_r+0x130>
10004764:	8809883a 	mov	r4,r17
10004768:	00068e00 	call	100068e0 <_free_r>
1000476c:	8180030b 	ldhu	r6,12(r16)
10004770:	80000c15 	stw	zero,48(r16)
10004774:	80c00417 	ldw	r3,16(r16)
10004778:	00bff6c4 	movi	r2,-37
1000477c:	118c703a 	and	r6,r2,r6
10004780:	80000115 	stw	zero,4(r16)
10004784:	80c00015 	stw	r3,0(r16)
10004788:	003fe206 	br	10004714 <__swsetup_r+0xd4>
1000478c:	00800244 	movi	r2,9
10004790:	88800015 	stw	r2,0(r17)
10004794:	31801014 	ori	r6,r6,64
10004798:	8180030d 	sth	r6,12(r16)
1000479c:	00bfffc4 	movi	r2,-1
100047a0:	003fc006 	br	100046a4 <__swsetup_r+0x64>

100047a4 <quorem>:
100047a4:	defff204 	addi	sp,sp,-56
100047a8:	dc400515 	stw	r17,20(sp)
100047ac:	20800417 	ldw	r2,16(r4)
100047b0:	2c400417 	ldw	r17,16(r5)
100047b4:	dfc00d15 	stw	ra,52(sp)
100047b8:	df000c15 	stw	fp,48(sp)
100047bc:	ddc00b15 	stw	r23,44(sp)
100047c0:	dd800a15 	stw	r22,40(sp)
100047c4:	dd400915 	stw	r21,36(sp)
100047c8:	dd000815 	stw	r20,32(sp)
100047cc:	dcc00715 	stw	r19,28(sp)
100047d0:	dc800615 	stw	r18,24(sp)
100047d4:	dc000415 	stw	r16,16(sp)
100047d8:	d9000115 	stw	r4,4(sp)
100047dc:	d9400215 	stw	r5,8(sp)
100047e0:	14407616 	blt	r2,r17,100049bc <quorem+0x218>
100047e4:	8c7fffc4 	addi	r17,r17,-1
100047e8:	882a90ba 	slli	r21,r17,2
100047ec:	2f000504 	addi	fp,r5,20
100047f0:	25800504 	addi	r22,r4,20
100047f4:	e565883a 	add	r18,fp,r21
100047f8:	b545883a 	add	r2,r22,r21
100047fc:	95c00017 	ldw	r23,0(r18)
10004800:	15000017 	ldw	r20,0(r2)
10004804:	dd800015 	stw	r22,0(sp)
10004808:	bdc00044 	addi	r23,r23,1
1000480c:	b80b883a 	mov	r5,r23
10004810:	a009883a 	mov	r4,r20
10004814:	d8800315 	stw	r2,12(sp)
10004818:	000cc700 	call	1000cc70 <__udivsi3>
1000481c:	1021883a 	mov	r16,r2
10004820:	a5c02f36 	bltu	r20,r23,100048e0 <quorem+0x13c>
10004824:	e029883a 	mov	r20,fp
10004828:	002b883a 	mov	r21,zero
1000482c:	002f883a 	mov	r23,zero
10004830:	a4c00017 	ldw	r19,0(r20)
10004834:	800b883a 	mov	r5,r16
10004838:	b5800104 	addi	r22,r22,4
1000483c:	993fffcc 	andi	r4,r19,65535
10004840:	000cd300 	call	1000cd30 <__mulsi3>
10004844:	9808d43a 	srli	r4,r19,16
10004848:	800b883a 	mov	r5,r16
1000484c:	156b883a 	add	r21,r2,r21
10004850:	000cd300 	call	1000cd30 <__mulsi3>
10004854:	b0ffff17 	ldw	r3,-4(r22)
10004858:	a80ad43a 	srli	r5,r21,16
1000485c:	a93fffcc 	andi	r4,r21,65535
10004860:	19bfffcc 	andi	r6,r3,65535
10004864:	b909c83a 	sub	r4,r23,r4
10004868:	2189883a 	add	r4,r4,r6
1000486c:	1806d43a 	srli	r3,r3,16
10004870:	1145883a 	add	r2,r2,r5
10004874:	200bd43a 	srai	r5,r4,16
10004878:	11bfffcc 	andi	r6,r2,65535
1000487c:	1987c83a 	sub	r3,r3,r6
10004880:	1947883a 	add	r3,r3,r5
10004884:	180a943a 	slli	r5,r3,16
10004888:	213fffcc 	andi	r4,r4,65535
1000488c:	a5000104 	addi	r20,r20,4
10004890:	2908b03a 	or	r4,r5,r4
10004894:	b13fff15 	stw	r4,-4(r22)
10004898:	102ad43a 	srli	r21,r2,16
1000489c:	182fd43a 	srai	r23,r3,16
100048a0:	953fe32e 	bgeu	r18,r20,10004830 <quorem+0x8c>
100048a4:	d8c00317 	ldw	r3,12(sp)
100048a8:	18800017 	ldw	r2,0(r3)
100048ac:	10000c1e 	bne	r2,zero,100048e0 <quorem+0x13c>
100048b0:	d8800017 	ldw	r2,0(sp)
100048b4:	1d7fff04 	addi	r21,r3,-4
100048b8:	15400436 	bltu	r2,r21,100048cc <quorem+0x128>
100048bc:	00000606 	br	100048d8 <quorem+0x134>
100048c0:	d8800017 	ldw	r2,0(sp)
100048c4:	8c7fffc4 	addi	r17,r17,-1
100048c8:	1540032e 	bgeu	r2,r21,100048d8 <quorem+0x134>
100048cc:	a8800017 	ldw	r2,0(r21)
100048d0:	ad7fff04 	addi	r21,r21,-4
100048d4:	103ffa26 	beq	r2,zero,100048c0 <quorem+0x11c>
100048d8:	d8800117 	ldw	r2,4(sp)
100048dc:	14400415 	stw	r17,16(r2)
100048e0:	d9400217 	ldw	r5,8(sp)
100048e4:	d9000117 	ldw	r4,4(sp)
100048e8:	0008acc0 	call	10008acc <__mcmp>
100048ec:	10002616 	blt	r2,zero,10004988 <quorem+0x1e4>
100048f0:	d9400017 	ldw	r5,0(sp)
100048f4:	84000044 	addi	r16,r16,1
100048f8:	0007883a 	mov	r3,zero
100048fc:	e1000017 	ldw	r4,0(fp)
10004900:	29800017 	ldw	r6,0(r5)
10004904:	29400104 	addi	r5,r5,4
10004908:	20bfffcc 	andi	r2,r4,65535
1000490c:	1887c83a 	sub	r3,r3,r2
10004910:	30bfffcc 	andi	r2,r6,65535
10004914:	1885883a 	add	r2,r3,r2
10004918:	2008d43a 	srli	r4,r4,16
1000491c:	3006d43a 	srli	r3,r6,16
10004920:	100fd43a 	srai	r7,r2,16
10004924:	11bfffcc 	andi	r6,r2,65535
10004928:	1907c83a 	sub	r3,r3,r4
1000492c:	19c7883a 	add	r3,r3,r7
10004930:	1804943a 	slli	r2,r3,16
10004934:	e7000104 	addi	fp,fp,4
10004938:	1807d43a 	srai	r3,r3,16
1000493c:	1184b03a 	or	r2,r2,r6
10004940:	28bfff15 	stw	r2,-4(r5)
10004944:	973fed2e 	bgeu	r18,fp,100048fc <quorem+0x158>
10004948:	880490ba 	slli	r2,r17,2
1000494c:	d9000017 	ldw	r4,0(sp)
10004950:	2085883a 	add	r2,r4,r2
10004954:	10c00017 	ldw	r3,0(r2)
10004958:	18000b1e 	bne	r3,zero,10004988 <quorem+0x1e4>
1000495c:	10bfff04 	addi	r2,r2,-4
10004960:	20800436 	bltu	r4,r2,10004974 <quorem+0x1d0>
10004964:	00000606 	br	10004980 <quorem+0x1dc>
10004968:	d8c00017 	ldw	r3,0(sp)
1000496c:	8c7fffc4 	addi	r17,r17,-1
10004970:	1880032e 	bgeu	r3,r2,10004980 <quorem+0x1dc>
10004974:	10c00017 	ldw	r3,0(r2)
10004978:	10bfff04 	addi	r2,r2,-4
1000497c:	183ffa26 	beq	r3,zero,10004968 <quorem+0x1c4>
10004980:	d8800117 	ldw	r2,4(sp)
10004984:	14400415 	stw	r17,16(r2)
10004988:	8005883a 	mov	r2,r16
1000498c:	dfc00d17 	ldw	ra,52(sp)
10004990:	df000c17 	ldw	fp,48(sp)
10004994:	ddc00b17 	ldw	r23,44(sp)
10004998:	dd800a17 	ldw	r22,40(sp)
1000499c:	dd400917 	ldw	r21,36(sp)
100049a0:	dd000817 	ldw	r20,32(sp)
100049a4:	dcc00717 	ldw	r19,28(sp)
100049a8:	dc800617 	ldw	r18,24(sp)
100049ac:	dc400517 	ldw	r17,20(sp)
100049b0:	dc000417 	ldw	r16,16(sp)
100049b4:	dec00e04 	addi	sp,sp,56
100049b8:	f800283a 	ret
100049bc:	0005883a 	mov	r2,zero
100049c0:	003ff206 	br	1000498c <quorem+0x1e8>

100049c4 <_dtoa_r>:
100049c4:	20801017 	ldw	r2,64(r4)
100049c8:	deffe204 	addi	sp,sp,-120
100049cc:	ddc01b15 	stw	r23,108(sp)
100049d0:	dcc01715 	stw	r19,92(sp)
100049d4:	dc801615 	stw	r18,88(sp)
100049d8:	dc401515 	stw	r17,84(sp)
100049dc:	dc001415 	stw	r16,80(sp)
100049e0:	dfc01d15 	stw	ra,116(sp)
100049e4:	df001c15 	stw	fp,112(sp)
100049e8:	dd801a15 	stw	r22,104(sp)
100049ec:	dd401915 	stw	r21,100(sp)
100049f0:	dd001815 	stw	r20,96(sp)
100049f4:	d9c00215 	stw	r7,8(sp)
100049f8:	dc002017 	ldw	r16,128(sp)
100049fc:	202f883a 	mov	r23,r4
10004a00:	3025883a 	mov	r18,r6
10004a04:	2827883a 	mov	r19,r5
10004a08:	3023883a 	mov	r17,r6
10004a0c:	10000826 	beq	r2,zero,10004a30 <_dtoa_r+0x6c>
10004a10:	21801117 	ldw	r6,68(r4)
10004a14:	00c00044 	movi	r3,1
10004a18:	100b883a 	mov	r5,r2
10004a1c:	1986983a 	sll	r3,r3,r6
10004a20:	11800115 	stw	r6,4(r2)
10004a24:	10c00215 	stw	r3,8(r2)
10004a28:	00080bc0 	call	100080bc <_Bfree>
10004a2c:	b8001015 	stw	zero,64(r23)
10004a30:	90018816 	blt	r18,zero,10005054 <_dtoa_r+0x690>
10004a34:	80000015 	stw	zero,0(r16)
10004a38:	909ffc2c 	andhi	r2,r18,32752
10004a3c:	00dffc34 	movhi	r3,32752
10004a40:	10c18d26 	beq	r2,r3,10005078 <_dtoa_r+0x6b4>
10004a44:	000d883a 	mov	r6,zero
10004a48:	000f883a 	mov	r7,zero
10004a4c:	9809883a 	mov	r4,r19
10004a50:	880b883a 	mov	r5,r17
10004a54:	000df780 	call	1000df78 <__eqdf2>
10004a58:	1000191e 	bne	r2,zero,10004ac0 <_dtoa_r+0xfc>
10004a5c:	d8c01f17 	ldw	r3,124(sp)
10004a60:	00800044 	movi	r2,1
10004a64:	18800015 	stw	r2,0(r3)
10004a68:	d8802117 	ldw	r2,132(sp)
10004a6c:	1002f926 	beq	r2,zero,10005654 <_dtoa_r+0xc90>
10004a70:	d9002117 	ldw	r4,132(sp)
10004a74:	00840074 	movhi	r2,4097
10004a78:	10894544 	addi	r2,r2,9493
10004a7c:	00c40074 	movhi	r3,4097
10004a80:	20800015 	stw	r2,0(r4)
10004a84:	18894504 	addi	r2,r3,9492
10004a88:	d8800115 	stw	r2,4(sp)
10004a8c:	d8800117 	ldw	r2,4(sp)
10004a90:	dfc01d17 	ldw	ra,116(sp)
10004a94:	df001c17 	ldw	fp,112(sp)
10004a98:	ddc01b17 	ldw	r23,108(sp)
10004a9c:	dd801a17 	ldw	r22,104(sp)
10004aa0:	dd401917 	ldw	r21,100(sp)
10004aa4:	dd001817 	ldw	r20,96(sp)
10004aa8:	dcc01717 	ldw	r19,92(sp)
10004aac:	dc801617 	ldw	r18,88(sp)
10004ab0:	dc401517 	ldw	r17,84(sp)
10004ab4:	dc001417 	ldw	r16,80(sp)
10004ab8:	dec01e04 	addi	sp,sp,120
10004abc:	f800283a 	ret
10004ac0:	d8801204 	addi	r2,sp,72
10004ac4:	9020d53a 	srli	r16,r18,20
10004ac8:	d8800015 	stw	r2,0(sp)
10004acc:	d9c01304 	addi	r7,sp,76
10004ad0:	980b883a 	mov	r5,r19
10004ad4:	880d883a 	mov	r6,r17
10004ad8:	b809883a 	mov	r4,r23
10004adc:	0008eb40 	call	10008eb4 <__d2b>
10004ae0:	1039883a 	mov	fp,r2
10004ae4:	8001771e 	bne	r16,zero,100050c4 <_dtoa_r+0x700>
10004ae8:	dd001217 	ldw	r20,72(sp)
10004aec:	dc001317 	ldw	r16,76(sp)
10004af0:	a421883a 	add	r16,r20,r16
10004af4:	80810c84 	addi	r2,r16,1074
10004af8:	10c00850 	cmplti	r3,r2,33
10004afc:	1802e51e 	bne	r3,zero,10005694 <_dtoa_r+0xcd0>
10004b00:	01001004 	movi	r4,64
10004b04:	2085c83a 	sub	r2,r4,r2
10004b08:	81010484 	addi	r4,r16,1042
10004b0c:	90a4983a 	sll	r18,r18,r2
10004b10:	9908d83a 	srl	r4,r19,r4
10004b14:	9108b03a 	or	r4,r18,r4
10004b18:	000f3b40 	call	1000f3b4 <__floatunsidf>
10004b1c:	1009883a 	mov	r4,r2
10004b20:	017f8434 	movhi	r5,65040
10004b24:	00800044 	movi	r2,1
10004b28:	194b883a 	add	r5,r3,r5
10004b2c:	843fffc4 	addi	r16,r16,-1
10004b30:	d8800a15 	stw	r2,40(sp)
10004b34:	000d883a 	mov	r6,zero
10004b38:	01cffe34 	movhi	r7,16376
10004b3c:	000e9740 	call	1000e974 <__subdf3>
10004b40:	0198dbf4 	movhi	r6,25455
10004b44:	01cff4f4 	movhi	r7,16339
10004b48:	3190d844 	addi	r6,r6,17249
10004b4c:	39e1e9c4 	addi	r7,r7,-30809
10004b50:	1009883a 	mov	r4,r2
10004b54:	180b883a 	mov	r5,r3
10004b58:	000e1c80 	call	1000e1c8 <__muldf3>
10004b5c:	01a2d874 	movhi	r6,35681
10004b60:	01cff1f4 	movhi	r7,16327
10004b64:	31b22cc4 	addi	r6,r6,-14157
10004b68:	39e28a04 	addi	r7,r7,-30168
10004b6c:	180b883a 	mov	r5,r3
10004b70:	1009883a 	mov	r4,r2
10004b74:	000cd580 	call	1000cd58 <__adddf3>
10004b78:	8009883a 	mov	r4,r16
10004b7c:	102b883a 	mov	r21,r2
10004b80:	1825883a 	mov	r18,r3
10004b84:	000f2fc0 	call	1000f2fc <__floatsidf>
10004b88:	019427f4 	movhi	r6,20639
10004b8c:	01cff4f4 	movhi	r7,16339
10004b90:	319e7ec4 	addi	r6,r6,31227
10004b94:	39d104c4 	addi	r7,r7,17427
10004b98:	1009883a 	mov	r4,r2
10004b9c:	180b883a 	mov	r5,r3
10004ba0:	000e1c80 	call	1000e1c8 <__muldf3>
10004ba4:	100d883a 	mov	r6,r2
10004ba8:	180f883a 	mov	r7,r3
10004bac:	a809883a 	mov	r4,r21
10004bb0:	900b883a 	mov	r5,r18
10004bb4:	000cd580 	call	1000cd58 <__adddf3>
10004bb8:	1009883a 	mov	r4,r2
10004bbc:	180b883a 	mov	r5,r3
10004bc0:	1025883a 	mov	r18,r2
10004bc4:	182d883a 	mov	r22,r3
10004bc8:	000f27c0 	call	1000f27c <__fixdfsi>
10004bcc:	000d883a 	mov	r6,zero
10004bd0:	000f883a 	mov	r7,zero
10004bd4:	9009883a 	mov	r4,r18
10004bd8:	b00b883a 	mov	r5,r22
10004bdc:	102b883a 	mov	r21,r2
10004be0:	d8800315 	stw	r2,12(sp)
10004be4:	000e0e00 	call	1000e0e0 <__ledf2>
10004be8:	10028f16 	blt	r2,zero,10005628 <_dtoa_r+0xc64>
10004bec:	dc800317 	ldw	r18,12(sp)
10004bf0:	a421c83a 	sub	r16,r20,r16
10004bf4:	85bfffc4 	addi	r22,r16,-1
10004bf8:	908005e8 	cmpgeui	r2,r18,23
10004bfc:	1002821e 	bne	r2,zero,10005608 <_dtoa_r+0xc44>
10004c00:	900690fa 	slli	r3,r18,3
10004c04:	00840074 	movhi	r2,4097
10004c08:	10898e04 	addi	r2,r2,9784
10004c0c:	10c5883a 	add	r2,r2,r3
10004c10:	11800017 	ldw	r6,0(r2)
10004c14:	11c00117 	ldw	r7,4(r2)
10004c18:	9809883a 	mov	r4,r19
10004c1c:	880b883a 	mov	r5,r17
10004c20:	000e0e00 	call	1000e0e0 <__ledf2>
10004c24:	1002550e 	bge	r2,zero,1000557c <_dtoa_r+0xbb8>
10004c28:	90bfffc4 	addi	r2,r18,-1
10004c2c:	d8800315 	stw	r2,12(sp)
10004c30:	d8000915 	stw	zero,36(sp)
10004c34:	b0027716 	blt	r22,zero,10005614 <_dtoa_r+0xc50>
10004c38:	d8000615 	stw	zero,24(sp)
10004c3c:	d8800317 	ldw	r2,12(sp)
10004c40:	1002510e 	bge	r2,zero,10005588 <_dtoa_r+0xbc4>
10004c44:	d8800317 	ldw	r2,12(sp)
10004c48:	d8c00617 	ldw	r3,24(sp)
10004c4c:	d8000315 	stw	zero,12(sp)
10004c50:	d8800415 	stw	r2,16(sp)
10004c54:	1887c83a 	sub	r3,r3,r2
10004c58:	d8c00615 	stw	r3,24(sp)
10004c5c:	0087c83a 	sub	r3,zero,r2
10004c60:	d8c00815 	stw	r3,32(sp)
10004c64:	d8c00217 	ldw	r3,8(sp)
10004c68:	188002a8 	cmpgeui	r2,r3,10
10004c6c:	10024d1e 	bne	r2,zero,100055a4 <_dtoa_r+0xbe0>
10004c70:	18800190 	cmplti	r2,r3,6
10004c74:	10028b1e 	bne	r2,zero,100056a4 <_dtoa_r+0xce0>
10004c78:	18bfff04 	addi	r2,r3,-4
10004c7c:	d8800215 	stw	r2,8(sp)
10004c80:	0021883a 	mov	r16,zero
10004c84:	d8c00217 	ldw	r3,8(sp)
10004c88:	18800120 	cmpeqi	r2,r3,4
10004c8c:	10035d1e 	bne	r2,zero,10005a04 <_dtoa_r+0x1040>
10004c90:	18800160 	cmpeqi	r2,r3,5
10004c94:	10031b1e 	bne	r2,zero,10005904 <_dtoa_r+0xf40>
10004c98:	188000a0 	cmpeqi	r2,r3,2
10004c9c:	10024d26 	beq	r2,zero,100055d4 <_dtoa_r+0xc10>
10004ca0:	d8000715 	stw	zero,28(sp)
10004ca4:	d8801e17 	ldw	r2,120(sp)
10004ca8:	0083260e 	bge	zero,r2,10005944 <_dtoa_r+0xf80>
10004cac:	d8800b15 	stw	r2,44(sp)
10004cb0:	d8800515 	stw	r2,20(sp)
10004cb4:	100d883a 	mov	r6,r2
10004cb8:	b8001115 	stw	zero,68(r23)
10004cbc:	30800610 	cmplti	r2,r6,24
10004cc0:	1004f11e 	bne	r2,zero,10006088 <_dtoa_r+0x16c4>
10004cc4:	00c00044 	movi	r3,1
10004cc8:	00800104 	movi	r2,4
10004ccc:	1085883a 	add	r2,r2,r2
10004cd0:	11000504 	addi	r4,r2,20
10004cd4:	180b883a 	mov	r5,r3
10004cd8:	18c00044 	addi	r3,r3,1
10004cdc:	313ffb2e 	bgeu	r6,r4,10004ccc <_dtoa_r+0x308>
10004ce0:	b9401115 	stw	r5,68(r23)
10004ce4:	b809883a 	mov	r4,r23
10004ce8:	00080180 	call	10008018 <_Balloc>
10004cec:	d8800115 	stw	r2,4(sp)
10004cf0:	1004de26 	beq	r2,zero,1000606c <_dtoa_r+0x16a8>
10004cf4:	d8800117 	ldw	r2,4(sp)
10004cf8:	b8801015 	stw	r2,64(r23)
10004cfc:	d8800517 	ldw	r2,20(sp)
10004d00:	108003e8 	cmpgeui	r2,r2,15
10004d04:	1001021e 	bne	r2,zero,10005110 <_dtoa_r+0x74c>
10004d08:	80010126 	beq	r16,zero,10005110 <_dtoa_r+0x74c>
10004d0c:	d9000417 	ldw	r4,16(sp)
10004d10:	01038b0e 	bge	zero,r4,10005b40 <_dtoa_r+0x117c>
10004d14:	208003cc 	andi	r2,r4,15
10004d18:	100690fa 	slli	r3,r2,3
10004d1c:	2029d13a 	srai	r20,r4,4
10004d20:	00840074 	movhi	r2,4097
10004d24:	10898e04 	addi	r2,r2,9784
10004d28:	10c5883a 	add	r2,r2,r3
10004d2c:	a0c0040c 	andi	r3,r20,16
10004d30:	12800017 	ldw	r10,0(r2)
10004d34:	12400117 	ldw	r9,4(r2)
10004d38:	18032c26 	beq	r3,zero,100059ec <_dtoa_r+0x1028>
10004d3c:	00840074 	movhi	r2,4097
10004d40:	10898404 	addi	r2,r2,9744
10004d44:	11800817 	ldw	r6,32(r2)
10004d48:	11c00917 	ldw	r7,36(r2)
10004d4c:	9809883a 	mov	r4,r19
10004d50:	880b883a 	mov	r5,r17
10004d54:	da400e15 	stw	r9,56(sp)
10004d58:	da800d15 	stw	r10,52(sp)
10004d5c:	000d6480 	call	1000d648 <__divdf3>
10004d60:	da800d17 	ldw	r10,52(sp)
10004d64:	da400e17 	ldw	r9,56(sp)
10004d68:	a50003cc 	andi	r20,r20,15
10004d6c:	d8800c15 	stw	r2,48(sp)
10004d70:	1825883a 	mov	r18,r3
10004d74:	054000c4 	movi	r21,3
10004d78:	a0001126 	beq	r20,zero,10004dc0 <_dtoa_r+0x3fc>
10004d7c:	04040074 	movhi	r16,4097
10004d80:	84098404 	addi	r16,r16,9744
10004d84:	5009883a 	mov	r4,r10
10004d88:	480b883a 	mov	r5,r9
10004d8c:	a180004c 	andi	r6,r20,1
10004d90:	30000626 	beq	r6,zero,10004dac <_dtoa_r+0x3e8>
10004d94:	81800017 	ldw	r6,0(r16)
10004d98:	81c00117 	ldw	r7,4(r16)
10004d9c:	ad400044 	addi	r21,r21,1
10004da0:	000e1c80 	call	1000e1c8 <__muldf3>
10004da4:	1009883a 	mov	r4,r2
10004da8:	180b883a 	mov	r5,r3
10004dac:	a029d07a 	srai	r20,r20,1
10004db0:	84000204 	addi	r16,r16,8
10004db4:	a03ff51e 	bne	r20,zero,10004d8c <_dtoa_r+0x3c8>
10004db8:	2015883a 	mov	r10,r4
10004dbc:	2813883a 	mov	r9,r5
10004dc0:	d9000c17 	ldw	r4,48(sp)
10004dc4:	900b883a 	mov	r5,r18
10004dc8:	500d883a 	mov	r6,r10
10004dcc:	480f883a 	mov	r7,r9
10004dd0:	000d6480 	call	1000d648 <__divdf3>
10004dd4:	1021883a 	mov	r16,r2
10004dd8:	1825883a 	mov	r18,r3
10004ddc:	d8800917 	ldw	r2,36(sp)
10004de0:	10000626 	beq	r2,zero,10004dfc <_dtoa_r+0x438>
10004de4:	000d883a 	mov	r6,zero
10004de8:	01cffc34 	movhi	r7,16368
10004dec:	8009883a 	mov	r4,r16
10004df0:	900b883a 	mov	r5,r18
10004df4:	000e0e00 	call	1000e0e0 <__ledf2>
10004df8:	10044416 	blt	r2,zero,10005f0c <_dtoa_r+0x1548>
10004dfc:	a809883a 	mov	r4,r21
10004e00:	000f2fc0 	call	1000f2fc <__floatsidf>
10004e04:	800d883a 	mov	r6,r16
10004e08:	900f883a 	mov	r7,r18
10004e0c:	1009883a 	mov	r4,r2
10004e10:	180b883a 	mov	r5,r3
10004e14:	000e1c80 	call	1000e1c8 <__muldf3>
10004e18:	000d883a 	mov	r6,zero
10004e1c:	01d00734 	movhi	r7,16412
10004e20:	1009883a 	mov	r4,r2
10004e24:	180b883a 	mov	r5,r3
10004e28:	000cd580 	call	1000cd58 <__adddf3>
10004e2c:	1029883a 	mov	r20,r2
10004e30:	00bf3034 	movhi	r2,64704
10004e34:	1885883a 	add	r2,r3,r2
10004e38:	d8800c15 	stw	r2,48(sp)
10004e3c:	d8800517 	ldw	r2,20(sp)
10004e40:	10032226 	beq	r2,zero,10005acc <_dtoa_r+0x1108>
10004e44:	d8800417 	ldw	r2,16(sp)
10004e48:	d8801115 	stw	r2,68(sp)
10004e4c:	d8800517 	ldw	r2,20(sp)
10004e50:	d8800d15 	stw	r2,52(sp)
10004e54:	d8800d17 	ldw	r2,52(sp)
10004e58:	900b883a 	mov	r5,r18
10004e5c:	8009883a 	mov	r4,r16
10004e60:	10bfffc4 	addi	r2,r2,-1
10004e64:	100690fa 	slli	r3,r2,3
10004e68:	00840074 	movhi	r2,4097
10004e6c:	10898e04 	addi	r2,r2,9784
10004e70:	10c5883a 	add	r2,r2,r3
10004e74:	12800017 	ldw	r10,0(r2)
10004e78:	12c00117 	ldw	r11,4(r2)
10004e7c:	da800f15 	stw	r10,60(sp)
10004e80:	dac00e15 	stw	r11,56(sp)
10004e84:	000f27c0 	call	1000f27c <__fixdfsi>
10004e88:	1009883a 	mov	r4,r2
10004e8c:	10800c04 	addi	r2,r2,48
10004e90:	d8801015 	stw	r2,64(sp)
10004e94:	000f2fc0 	call	1000f2fc <__floatsidf>
10004e98:	8009883a 	mov	r4,r16
10004e9c:	100d883a 	mov	r6,r2
10004ea0:	180f883a 	mov	r7,r3
10004ea4:	900b883a 	mov	r5,r18
10004ea8:	000e9740 	call	1000e974 <__subdf3>
10004eac:	d9000117 	ldw	r4,4(sp)
10004eb0:	dac00e17 	ldw	r11,56(sp)
10004eb4:	da800f17 	ldw	r10,60(sp)
10004eb8:	1825883a 	mov	r18,r3
10004ebc:	d8c00717 	ldw	r3,28(sp)
10004ec0:	25400044 	addi	r21,r4,1
10004ec4:	1021883a 	mov	r16,r2
10004ec8:	500d883a 	mov	r6,r10
10004ecc:	580f883a 	mov	r7,r11
10004ed0:	1803b626 	beq	r3,zero,10005dac <_dtoa_r+0x13e8>
10004ed4:	0009883a 	mov	r4,zero
10004ed8:	014ff834 	movhi	r5,16352
10004edc:	000d6480 	call	1000d648 <__divdf3>
10004ee0:	d9c00c17 	ldw	r7,48(sp)
10004ee4:	a00d883a 	mov	r6,r20
10004ee8:	1009883a 	mov	r4,r2
10004eec:	180b883a 	mov	r5,r3
10004ef0:	000e9740 	call	1000e974 <__subdf3>
10004ef4:	d9000117 	ldw	r4,4(sp)
10004ef8:	1029883a 	mov	r20,r2
10004efc:	d8801017 	ldw	r2,64(sp)
10004f00:	800d883a 	mov	r6,r16
10004f04:	900f883a 	mov	r7,r18
10004f08:	20800005 	stb	r2,0(r4)
10004f0c:	180b883a 	mov	r5,r3
10004f10:	a009883a 	mov	r4,r20
10004f14:	d8c00c15 	stw	r3,48(sp)
10004f18:	000dff80 	call	1000dff8 <__gedf2>
10004f1c:	0083e716 	blt	zero,r2,10005ebc <_dtoa_r+0x14f8>
10004f20:	0005883a 	mov	r2,zero
10004f24:	dd800e15 	stw	r22,56(sp)
10004f28:	dc400f15 	stw	r17,60(sp)
10004f2c:	dd800d17 	ldw	r22,52(sp)
10004f30:	dc400c17 	ldw	r17,48(sp)
10004f34:	ddc00d15 	stw	r23,52(sp)
10004f38:	dcc00c15 	stw	r19,48(sp)
10004f3c:	1027883a 	mov	r19,r2
10004f40:	00002606 	br	10004fdc <_dtoa_r+0x618>
10004f44:	9cc00044 	addi	r19,r19,1
10004f48:	9d806d0e 	bge	r19,r22,10005100 <_dtoa_r+0x73c>
10004f4c:	a009883a 	mov	r4,r20
10004f50:	880b883a 	mov	r5,r17
10004f54:	000d883a 	mov	r6,zero
10004f58:	01d00934 	movhi	r7,16420
10004f5c:	000e1c80 	call	1000e1c8 <__muldf3>
10004f60:	000d883a 	mov	r6,zero
10004f64:	01d00934 	movhi	r7,16420
10004f68:	8009883a 	mov	r4,r16
10004f6c:	900b883a 	mov	r5,r18
10004f70:	1029883a 	mov	r20,r2
10004f74:	1823883a 	mov	r17,r3
10004f78:	000e1c80 	call	1000e1c8 <__muldf3>
10004f7c:	180b883a 	mov	r5,r3
10004f80:	1009883a 	mov	r4,r2
10004f84:	1821883a 	mov	r16,r3
10004f88:	1025883a 	mov	r18,r2
10004f8c:	000f27c0 	call	1000f27c <__fixdfsi>
10004f90:	1009883a 	mov	r4,r2
10004f94:	102f883a 	mov	r23,r2
10004f98:	000f2fc0 	call	1000f2fc <__floatsidf>
10004f9c:	9009883a 	mov	r4,r18
10004fa0:	800b883a 	mov	r5,r16
10004fa4:	100d883a 	mov	r6,r2
10004fa8:	180f883a 	mov	r7,r3
10004fac:	000e9740 	call	1000e974 <__subdf3>
10004fb0:	ad400044 	addi	r21,r21,1
10004fb4:	ba000c04 	addi	r8,r23,48
10004fb8:	aa3fffc5 	stb	r8,-1(r21)
10004fbc:	a00d883a 	mov	r6,r20
10004fc0:	880f883a 	mov	r7,r17
10004fc4:	1009883a 	mov	r4,r2
10004fc8:	180b883a 	mov	r5,r3
10004fcc:	1021883a 	mov	r16,r2
10004fd0:	1825883a 	mov	r18,r3
10004fd4:	000e0e00 	call	1000e0e0 <__ledf2>
10004fd8:	10040516 	blt	r2,zero,10005ff0 <_dtoa_r+0x162c>
10004fdc:	800d883a 	mov	r6,r16
10004fe0:	900f883a 	mov	r7,r18
10004fe4:	0009883a 	mov	r4,zero
10004fe8:	014ffc34 	movhi	r5,16368
10004fec:	000e9740 	call	1000e974 <__subdf3>
10004ff0:	a00d883a 	mov	r6,r20
10004ff4:	880f883a 	mov	r7,r17
10004ff8:	1009883a 	mov	r4,r2
10004ffc:	180b883a 	mov	r5,r3
10005000:	000e0e00 	call	1000e0e0 <__ledf2>
10005004:	103fcf0e 	bge	r2,zero,10004f44 <_dtoa_r+0x580>
10005008:	d8801117 	ldw	r2,68(sp)
1000500c:	ddc00d17 	ldw	r23,52(sp)
10005010:	d9000117 	ldw	r4,4(sp)
10005014:	10800044 	addi	r2,r2,1
10005018:	d8800415 	stw	r2,16(sp)
1000501c:	a829883a 	mov	r20,r21
10005020:	00000106 	br	10005028 <_dtoa_r+0x664>
10005024:	a103da26 	beq	r20,r4,10005f90 <_dtoa_r+0x15cc>
10005028:	a0ffffc3 	ldbu	r3,-1(r20)
1000502c:	a02b883a 	mov	r21,r20
10005030:	a53fffc4 	addi	r20,r20,-1
10005034:	18803fcc 	andi	r2,r3,255
10005038:	1080201c 	xori	r2,r2,128
1000503c:	10bfe004 	addi	r2,r2,-128
10005040:	10800e60 	cmpeqi	r2,r2,57
10005044:	103ff71e 	bne	r2,zero,10005024 <_dtoa_r+0x660>
10005048:	18c00044 	addi	r3,r3,1
1000504c:	a0c00005 	stb	r3,0(r20)
10005050:	00013f06 	br	10005550 <_dtoa_r+0xb8c>
10005054:	04600034 	movhi	r17,32768
10005058:	8c7fffc4 	addi	r17,r17,-1
1000505c:	9462703a 	and	r17,r18,r17
10005060:	00800044 	movi	r2,1
10005064:	8825883a 	mov	r18,r17
10005068:	80800015 	stw	r2,0(r16)
1000506c:	00dffc34 	movhi	r3,32752
10005070:	909ffc2c 	andhi	r2,r18,32752
10005074:	10fe731e 	bne	r2,r3,10004a44 <_dtoa_r+0x80>
10005078:	d9001f17 	ldw	r4,124(sp)
1000507c:	00800434 	movhi	r2,16
10005080:	10bfffc4 	addi	r2,r2,-1
10005084:	9084703a 	and	r2,r18,r2
10005088:	00c9c3c4 	movi	r3,9999
1000508c:	20c00015 	stw	r3,0(r4)
10005090:	14e6b03a 	or	r19,r2,r19
10005094:	9800141e 	bne	r19,zero,100050e8 <_dtoa_r+0x724>
10005098:	d8802117 	ldw	r2,132(sp)
1000509c:	10041226 	beq	r2,zero,100060e8 <_dtoa_r+0x1724>
100050a0:	00840074 	movhi	r2,4097
100050a4:	1007883a 	mov	r3,r2
100050a8:	18c94f04 	addi	r3,r3,9532
100050ac:	00840074 	movhi	r2,4097
100050b0:	d8c00115 	stw	r3,4(sp)
100050b4:	10895104 	addi	r2,r2,9540
100050b8:	d8c02117 	ldw	r3,132(sp)
100050bc:	18800015 	stw	r2,0(r3)
100050c0:	003e7206 	br	10004a8c <_dtoa_r+0xc8>
100050c4:	01400434 	movhi	r5,16
100050c8:	297fffc4 	addi	r5,r5,-1
100050cc:	894a703a 	and	r5,r17,r5
100050d0:	dd001217 	ldw	r20,72(sp)
100050d4:	9809883a 	mov	r4,r19
100050d8:	294ffc34 	orhi	r5,r5,16368
100050dc:	843f0044 	addi	r16,r16,-1023
100050e0:	d8000a15 	stw	zero,40(sp)
100050e4:	003e9306 	br	10004b34 <_dtoa_r+0x170>
100050e8:	d8802117 	ldw	r2,132(sp)
100050ec:	1001fe1e 	bne	r2,zero,100058e8 <_dtoa_r+0xf24>
100050f0:	00840074 	movhi	r2,4097
100050f4:	10894e04 	addi	r2,r2,9528
100050f8:	d8800115 	stw	r2,4(sp)
100050fc:	003e6306 	br	10004a8c <_dtoa_r+0xc8>
10005100:	dd800e17 	ldw	r22,56(sp)
10005104:	ddc00d17 	ldw	r23,52(sp)
10005108:	dc400f17 	ldw	r17,60(sp)
1000510c:	dcc00c17 	ldw	r19,48(sp)
10005110:	d8801317 	ldw	r2,76(sp)
10005114:	10006e16 	blt	r2,zero,100052d0 <_dtoa_r+0x90c>
10005118:	d9000417 	ldw	r4,16(sp)
1000511c:	20c003c8 	cmpgei	r3,r4,15
10005120:	18006b1e 	bne	r3,zero,100052d0 <_dtoa_r+0x90c>
10005124:	200690fa 	slli	r3,r4,3
10005128:	00840074 	movhi	r2,4097
1000512c:	10898e04 	addi	r2,r2,9784
10005130:	10c5883a 	add	r2,r2,r3
10005134:	14000017 	ldw	r16,0(r2)
10005138:	14800117 	ldw	r18,4(r2)
1000513c:	d8801e17 	ldw	r2,120(sp)
10005140:	1000150e 	bge	r2,zero,10005198 <_dtoa_r+0x7d4>
10005144:	d8800517 	ldw	r2,20(sp)
10005148:	00801316 	blt	zero,r2,10005198 <_dtoa_r+0x7d4>
1000514c:	d8800517 	ldw	r2,20(sp)
10005150:	1002721e 	bne	r2,zero,10005b1c <_dtoa_r+0x1158>
10005154:	8009883a 	mov	r4,r16
10005158:	000d883a 	mov	r6,zero
1000515c:	01d00534 	movhi	r7,16404
10005160:	900b883a 	mov	r5,r18
10005164:	000e1c80 	call	1000e1c8 <__muldf3>
10005168:	100d883a 	mov	r6,r2
1000516c:	180f883a 	mov	r7,r3
10005170:	9809883a 	mov	r4,r19
10005174:	880b883a 	mov	r5,r17
10005178:	000e0e00 	call	1000e0e0 <__ledf2>
1000517c:	0029883a 	mov	r20,zero
10005180:	0021883a 	mov	r16,zero
10005184:	00820216 	blt	zero,r2,10005990 <_dtoa_r+0xfcc>
10005188:	d8801e17 	ldw	r2,120(sp)
1000518c:	dd400117 	ldw	r21,4(sp)
10005190:	00a2303a 	nor	r17,zero,r2
10005194:	00020406 	br	100059a8 <_dtoa_r+0xfe4>
10005198:	800d883a 	mov	r6,r16
1000519c:	900f883a 	mov	r7,r18
100051a0:	9809883a 	mov	r4,r19
100051a4:	880b883a 	mov	r5,r17
100051a8:	000d6480 	call	1000d648 <__divdf3>
100051ac:	180b883a 	mov	r5,r3
100051b0:	1009883a 	mov	r4,r2
100051b4:	000f27c0 	call	1000f27c <__fixdfsi>
100051b8:	1009883a 	mov	r4,r2
100051bc:	102b883a 	mov	r21,r2
100051c0:	000f2fc0 	call	1000f2fc <__floatsidf>
100051c4:	800d883a 	mov	r6,r16
100051c8:	900f883a 	mov	r7,r18
100051cc:	1009883a 	mov	r4,r2
100051d0:	180b883a 	mov	r5,r3
100051d4:	000e1c80 	call	1000e1c8 <__muldf3>
100051d8:	100d883a 	mov	r6,r2
100051dc:	9809883a 	mov	r4,r19
100051e0:	880b883a 	mov	r5,r17
100051e4:	180f883a 	mov	r7,r3
100051e8:	000e9740 	call	1000e974 <__subdf3>
100051ec:	d9800117 	ldw	r6,4(sp)
100051f0:	dd800517 	ldw	r22,20(sp)
100051f4:	1009883a 	mov	r4,r2
100051f8:	a8800c04 	addi	r2,r21,48
100051fc:	30800005 	stb	r2,0(r6)
10005200:	b0800060 	cmpeqi	r2,r22,1
10005204:	180b883a 	mov	r5,r3
10005208:	35000044 	addi	r20,r6,1
1000520c:	10029f1e 	bne	r2,zero,10005c8c <_dtoa_r+0x12c8>
10005210:	04400044 	movi	r17,1
10005214:	ddc00215 	stw	r23,8(sp)
10005218:	00001c06 	br	1000528c <_dtoa_r+0x8c8>
1000521c:	800d883a 	mov	r6,r16
10005220:	900f883a 	mov	r7,r18
10005224:	a809883a 	mov	r4,r21
10005228:	980b883a 	mov	r5,r19
1000522c:	000d6480 	call	1000d648 <__divdf3>
10005230:	180b883a 	mov	r5,r3
10005234:	1009883a 	mov	r4,r2
10005238:	000f27c0 	call	1000f27c <__fixdfsi>
1000523c:	1009883a 	mov	r4,r2
10005240:	102f883a 	mov	r23,r2
10005244:	000f2fc0 	call	1000f2fc <__floatsidf>
10005248:	800d883a 	mov	r6,r16
1000524c:	900f883a 	mov	r7,r18
10005250:	1009883a 	mov	r4,r2
10005254:	180b883a 	mov	r5,r3
10005258:	000e1c80 	call	1000e1c8 <__muldf3>
1000525c:	a809883a 	mov	r4,r21
10005260:	980b883a 	mov	r5,r19
10005264:	100d883a 	mov	r6,r2
10005268:	180f883a 	mov	r7,r3
1000526c:	000e9740 	call	1000e974 <__subdf3>
10005270:	b9000c04 	addi	r4,r23,48
10005274:	a1000005 	stb	r4,0(r20)
10005278:	8c400044 	addi	r17,r17,1
1000527c:	a5000044 	addi	r20,r20,1
10005280:	1009883a 	mov	r4,r2
10005284:	180b883a 	mov	r5,r3
10005288:	8d827e26 	beq	r17,r22,10005c84 <_dtoa_r+0x12c0>
1000528c:	000d883a 	mov	r6,zero
10005290:	01d00934 	movhi	r7,16420
10005294:	000e1c80 	call	1000e1c8 <__muldf3>
10005298:	000d883a 	mov	r6,zero
1000529c:	000f883a 	mov	r7,zero
100052a0:	1009883a 	mov	r4,r2
100052a4:	180b883a 	mov	r5,r3
100052a8:	102b883a 	mov	r21,r2
100052ac:	1827883a 	mov	r19,r3
100052b0:	000df780 	call	1000df78 <__eqdf2>
100052b4:	103fd91e 	bne	r2,zero,1000521c <_dtoa_r+0x858>
100052b8:	d8800417 	ldw	r2,16(sp)
100052bc:	ddc00217 	ldw	r23,8(sp)
100052c0:	a02b883a 	mov	r21,r20
100052c4:	10800044 	addi	r2,r2,1
100052c8:	d8800415 	stw	r2,16(sp)
100052cc:	0000a006 	br	10005550 <_dtoa_r+0xb8c>
100052d0:	d8c00717 	ldw	r3,28(sp)
100052d4:	1800e326 	beq	r3,zero,10005664 <_dtoa_r+0xca0>
100052d8:	d8c00217 	ldw	r3,8(sp)
100052dc:	18c00088 	cmpgei	r3,r3,2
100052e0:	1801e026 	beq	r3,zero,10005a64 <_dtoa_r+0x10a0>
100052e4:	d8800517 	ldw	r2,20(sp)
100052e8:	153fffc4 	addi	r20,r2,-1
100052ec:	d8800817 	ldw	r2,32(sp)
100052f0:	1501bc0e 	bge	r2,r20,100059e4 <_dtoa_r+0x1020>
100052f4:	d8800817 	ldw	r2,32(sp)
100052f8:	d8c00317 	ldw	r3,12(sp)
100052fc:	dd000815 	stw	r20,32(sp)
10005300:	a085c83a 	sub	r2,r20,r2
10005304:	1885883a 	add	r2,r3,r2
10005308:	d8800315 	stw	r2,12(sp)
1000530c:	0029883a 	mov	r20,zero
10005310:	d8800517 	ldw	r2,20(sp)
10005314:	10028b16 	blt	r2,zero,10005d44 <_dtoa_r+0x1380>
10005318:	d8c00617 	ldw	r3,24(sp)
1000531c:	b0ad883a 	add	r22,r22,r2
10005320:	1885883a 	add	r2,r3,r2
10005324:	1825883a 	mov	r18,r3
10005328:	d8800615 	stw	r2,24(sp)
1000532c:	01400044 	movi	r5,1
10005330:	b809883a 	mov	r4,r23
10005334:	00084880 	call	10008488 <__i2b>
10005338:	1021883a 	mov	r16,r2
1000533c:	0480080e 	bge	zero,r18,10005360 <_dtoa_r+0x99c>
10005340:	0580070e 	bge	zero,r22,10005360 <_dtoa_r+0x99c>
10005344:	9005883a 	mov	r2,r18
10005348:	b4819e16 	blt	r22,r18,100059c4 <_dtoa_r+0x1000>
1000534c:	d8c00617 	ldw	r3,24(sp)
10005350:	90a5c83a 	sub	r18,r18,r2
10005354:	b0adc83a 	sub	r22,r22,r2
10005358:	1887c83a 	sub	r3,r3,r2
1000535c:	d8c00615 	stw	r3,24(sp)
10005360:	d8800817 	ldw	r2,32(sp)
10005364:	10001426 	beq	r2,zero,100053b8 <_dtoa_r+0x9f4>
10005368:	d8800717 	ldw	r2,28(sp)
1000536c:	1001ee26 	beq	r2,zero,10005b28 <_dtoa_r+0x1164>
10005370:	05000e0e 	bge	zero,r20,100053ac <_dtoa_r+0x9e8>
10005374:	800b883a 	mov	r5,r16
10005378:	a00d883a 	mov	r6,r20
1000537c:	b809883a 	mov	r4,r23
10005380:	00087fc0 	call	100087fc <__pow5mult>
10005384:	e00d883a 	mov	r6,fp
10005388:	100b883a 	mov	r5,r2
1000538c:	b809883a 	mov	r4,r23
10005390:	1021883a 	mov	r16,r2
10005394:	00085380 	call	10008538 <__multiply>
10005398:	102b883a 	mov	r21,r2
1000539c:	e00b883a 	mov	r5,fp
100053a0:	b809883a 	mov	r4,r23
100053a4:	00080bc0 	call	100080bc <_Bfree>
100053a8:	a839883a 	mov	fp,r21
100053ac:	d8800817 	ldw	r2,32(sp)
100053b0:	150dc83a 	sub	r6,r2,r20
100053b4:	15025e1e 	bne	r2,r20,10005d30 <_dtoa_r+0x136c>
100053b8:	01400044 	movi	r5,1
100053bc:	b809883a 	mov	r4,r23
100053c0:	00084880 	call	10008488 <__i2b>
100053c4:	d9800317 	ldw	r6,12(sp)
100053c8:	1029883a 	mov	r20,r2
100053cc:	0180b716 	blt	zero,r6,100056ac <_dtoa_r+0xce8>
100053d0:	d8800217 	ldw	r2,8(sp)
100053d4:	10800088 	cmpgei	r2,r2,2
100053d8:	10014d26 	beq	r2,zero,10005910 <_dtoa_r+0xf4c>
100053dc:	0023883a 	mov	r17,zero
100053e0:	d8c00317 	ldw	r3,12(sp)
100053e4:	00800044 	movi	r2,1
100053e8:	1800b81e 	bne	r3,zero,100056cc <_dtoa_r+0xd08>
100053ec:	1585883a 	add	r2,r2,r22
100053f0:	108007cc 	andi	r2,r2,31
100053f4:	1000a526 	beq	r2,zero,1000568c <_dtoa_r+0xcc8>
100053f8:	00c00804 	movi	r3,32
100053fc:	1887c83a 	sub	r3,r3,r2
10005400:	19000150 	cmplti	r4,r3,5
10005404:	20033c1e 	bne	r4,zero,100060f8 <_dtoa_r+0x1734>
10005408:	00c00704 	movi	r3,28
1000540c:	1885c83a 	sub	r2,r3,r2
10005410:	d8c00617 	ldw	r3,24(sp)
10005414:	90a5883a 	add	r18,r18,r2
10005418:	b0ad883a 	add	r22,r22,r2
1000541c:	1887883a 	add	r3,r3,r2
10005420:	d8c00615 	stw	r3,24(sp)
10005424:	d8800617 	ldw	r2,24(sp)
10005428:	00809216 	blt	zero,r2,10005674 <_dtoa_r+0xcb0>
1000542c:	0580050e 	bge	zero,r22,10005444 <_dtoa_r+0xa80>
10005430:	a00b883a 	mov	r5,r20
10005434:	b00d883a 	mov	r6,r22
10005438:	b809883a 	mov	r4,r23
1000543c:	00089440 	call	10008944 <__lshift>
10005440:	1029883a 	mov	r20,r2
10005444:	d8800917 	ldw	r2,36(sp)
10005448:	1001151e 	bne	r2,zero,100058a0 <_dtoa_r+0xedc>
1000544c:	d8800517 	ldw	r2,20(sp)
10005450:	0081020e 	bge	zero,r2,1000585c <_dtoa_r+0xe98>
10005454:	d8800717 	ldw	r2,28(sp)
10005458:	1000af1e 	bne	r2,zero,10005718 <_dtoa_r+0xd54>
1000545c:	d8800417 	ldw	r2,16(sp)
10005460:	10800044 	addi	r2,r2,1
10005464:	d8800415 	stw	r2,16(sp)
10005468:	dc800517 	ldw	r18,20(sp)
1000546c:	dd400117 	ldw	r21,4(sp)
10005470:	04400044 	movi	r17,1
10005474:	00000706 	br	10005494 <_dtoa_r+0xad0>
10005478:	e00b883a 	mov	r5,fp
1000547c:	000f883a 	mov	r7,zero
10005480:	01800284 	movi	r6,10
10005484:	b809883a 	mov	r4,r23
10005488:	00080e00 	call	100080e0 <__multadd>
1000548c:	1039883a 	mov	fp,r2
10005490:	8c400044 	addi	r17,r17,1
10005494:	a00b883a 	mov	r5,r20
10005498:	e009883a 	mov	r4,fp
1000549c:	00047a40 	call	100047a4 <quorem>
100054a0:	14c00c04 	addi	r19,r2,48
100054a4:	ac45883a 	add	r2,r21,r17
100054a8:	14ffffc5 	stb	r19,-1(r2)
100054ac:	8cbff216 	blt	r17,r18,10005478 <_dtoa_r+0xab4>
100054b0:	d8800517 	ldw	r2,20(sp)
100054b4:	0081510e 	bge	zero,r2,100059fc <_dtoa_r+0x1038>
100054b8:	d8c00117 	ldw	r3,4(sp)
100054bc:	0023883a 	mov	r17,zero
100054c0:	18ab883a 	add	r21,r3,r2
100054c4:	e00b883a 	mov	r5,fp
100054c8:	01800044 	movi	r6,1
100054cc:	b809883a 	mov	r4,r23
100054d0:	00089440 	call	10008944 <__lshift>
100054d4:	1009883a 	mov	r4,r2
100054d8:	a00b883a 	mov	r5,r20
100054dc:	1039883a 	mov	fp,r2
100054e0:	0008acc0 	call	10008acc <__mcmp>
100054e4:	a93fffc3 	ldbu	r4,-1(r21)
100054e8:	0081490e 	bge	zero,r2,10005a10 <_dtoa_r+0x104c>
100054ec:	d9400117 	ldw	r5,4(sp)
100054f0:	00000306 	br	10005500 <_dtoa_r+0xb3c>
100054f4:	19415426 	beq	r3,r5,10005a48 <_dtoa_r+0x1084>
100054f8:	193fffc3 	ldbu	r4,-1(r3)
100054fc:	182b883a 	mov	r21,r3
10005500:	20803fcc 	andi	r2,r4,255
10005504:	1080201c 	xori	r2,r2,128
10005508:	10bfe004 	addi	r2,r2,-128
1000550c:	10800e60 	cmpeqi	r2,r2,57
10005510:	a8ffffc4 	addi	r3,r21,-1
10005514:	103ff71e 	bne	r2,zero,100054f4 <_dtoa_r+0xb30>
10005518:	21000044 	addi	r4,r4,1
1000551c:	19000005 	stb	r4,0(r3)
10005520:	a00b883a 	mov	r5,r20
10005524:	b809883a 	mov	r4,r23
10005528:	00080bc0 	call	100080bc <_Bfree>
1000552c:	80000826 	beq	r16,zero,10005550 <_dtoa_r+0xb8c>
10005530:	88000426 	beq	r17,zero,10005544 <_dtoa_r+0xb80>
10005534:	8c000326 	beq	r17,r16,10005544 <_dtoa_r+0xb80>
10005538:	880b883a 	mov	r5,r17
1000553c:	b809883a 	mov	r4,r23
10005540:	00080bc0 	call	100080bc <_Bfree>
10005544:	800b883a 	mov	r5,r16
10005548:	b809883a 	mov	r4,r23
1000554c:	00080bc0 	call	100080bc <_Bfree>
10005550:	e00b883a 	mov	r5,fp
10005554:	b809883a 	mov	r4,r23
10005558:	00080bc0 	call	100080bc <_Bfree>
1000555c:	d8801f17 	ldw	r2,124(sp)
10005560:	d8c00417 	ldw	r3,16(sp)
10005564:	a8000005 	stb	zero,0(r21)
10005568:	10c00015 	stw	r3,0(r2)
1000556c:	d8802117 	ldw	r2,132(sp)
10005570:	103d4626 	beq	r2,zero,10004a8c <_dtoa_r+0xc8>
10005574:	15400015 	stw	r21,0(r2)
10005578:	003d4406 	br	10004a8c <_dtoa_r+0xc8>
1000557c:	d8000915 	stw	zero,36(sp)
10005580:	b0002416 	blt	r22,zero,10005614 <_dtoa_r+0xc50>
10005584:	d8000615 	stw	zero,24(sp)
10005588:	d8800317 	ldw	r2,12(sp)
1000558c:	d8c00217 	ldw	r3,8(sp)
10005590:	d8000815 	stw	zero,32(sp)
10005594:	b0ad883a 	add	r22,r22,r2
10005598:	d8800415 	stw	r2,16(sp)
1000559c:	188002a8 	cmpgeui	r2,r3,10
100055a0:	103db326 	beq	r2,zero,10004c70 <_dtoa_r+0x2ac>
100055a4:	00800044 	movi	r2,1
100055a8:	d8800715 	stw	r2,28(sp)
100055ac:	00bfffc4 	movi	r2,-1
100055b0:	04000044 	movi	r16,1
100055b4:	d8000215 	stw	zero,8(sp)
100055b8:	d8800515 	stw	r2,20(sp)
100055bc:	d8001e15 	stw	zero,120(sp)
100055c0:	d8800517 	ldw	r2,20(sp)
100055c4:	b8001115 	stw	zero,68(r23)
100055c8:	000b883a 	mov	r5,zero
100055cc:	d8800b15 	stw	r2,44(sp)
100055d0:	003dc406 	br	10004ce4 <_dtoa_r+0x320>
100055d4:	188000e0 	cmpeqi	r2,r3,3
100055d8:	d8000715 	stw	zero,28(sp)
100055dc:	1002ac26 	beq	r2,zero,10006090 <_dtoa_r+0x16cc>
100055e0:	d8801e17 	ldw	r2,120(sp)
100055e4:	d8c00417 	ldw	r3,16(sp)
100055e8:	10c5883a 	add	r2,r2,r3
100055ec:	d8800b15 	stw	r2,44(sp)
100055f0:	10800044 	addi	r2,r2,1
100055f4:	d8800515 	stw	r2,20(sp)
100055f8:	100d883a 	mov	r6,r2
100055fc:	00bdae16 	blt	zero,r2,10004cb8 <_dtoa_r+0x2f4>
10005600:	01800044 	movi	r6,1
10005604:	003dac06 	br	10004cb8 <_dtoa_r+0x2f4>
10005608:	00800044 	movi	r2,1
1000560c:	d8800915 	stw	r2,36(sp)
10005610:	b03d890e 	bge	r22,zero,10004c38 <_dtoa_r+0x274>
10005614:	00800044 	movi	r2,1
10005618:	1405c83a 	sub	r2,r2,r16
1000561c:	d8800615 	stw	r2,24(sp)
10005620:	002d883a 	mov	r22,zero
10005624:	003d8506 	br	10004c3c <_dtoa_r+0x278>
10005628:	a809883a 	mov	r4,r21
1000562c:	000f2fc0 	call	1000f2fc <__floatsidf>
10005630:	900d883a 	mov	r6,r18
10005634:	b00f883a 	mov	r7,r22
10005638:	1009883a 	mov	r4,r2
1000563c:	180b883a 	mov	r5,r3
10005640:	000df780 	call	1000df78 <__eqdf2>
10005644:	103d6926 	beq	r2,zero,10004bec <_dtoa_r+0x228>
10005648:	a8bfffc4 	addi	r2,r21,-1
1000564c:	d8800315 	stw	r2,12(sp)
10005650:	003d6606 	br	10004bec <_dtoa_r+0x228>
10005654:	00840074 	movhi	r2,4097
10005658:	10894504 	addi	r2,r2,9492
1000565c:	d8800115 	stw	r2,4(sp)
10005660:	003d0a06 	br	10004a8c <_dtoa_r+0xc8>
10005664:	dd000817 	ldw	r20,32(sp)
10005668:	dc800617 	ldw	r18,24(sp)
1000566c:	0021883a 	mov	r16,zero
10005670:	003f3206 	br	1000533c <_dtoa_r+0x978>
10005674:	e00b883a 	mov	r5,fp
10005678:	100d883a 	mov	r6,r2
1000567c:	b809883a 	mov	r4,r23
10005680:	00089440 	call	10008944 <__lshift>
10005684:	1039883a 	mov	fp,r2
10005688:	003f6806 	br	1000542c <_dtoa_r+0xa68>
1000568c:	00800704 	movi	r2,28
10005690:	003f5f06 	br	10005410 <_dtoa_r+0xa4c>
10005694:	01000804 	movi	r4,32
10005698:	2089c83a 	sub	r4,r4,r2
1000569c:	9908983a 	sll	r4,r19,r4
100056a0:	003d1d06 	br	10004b18 <_dtoa_r+0x154>
100056a4:	04000044 	movi	r16,1
100056a8:	003d7606 	br	10004c84 <_dtoa_r+0x2c0>
100056ac:	100b883a 	mov	r5,r2
100056b0:	b809883a 	mov	r4,r23
100056b4:	00087fc0 	call	100087fc <__pow5mult>
100056b8:	d8c00217 	ldw	r3,8(sp)
100056bc:	1029883a 	mov	r20,r2
100056c0:	18c00090 	cmplti	r3,r3,2
100056c4:	1801511e 	bne	r3,zero,10005c0c <_dtoa_r+0x1248>
100056c8:	0023883a 	mov	r17,zero
100056cc:	a0800417 	ldw	r2,16(r20)
100056d0:	10800104 	addi	r2,r2,4
100056d4:	100490ba 	slli	r2,r2,2
100056d8:	a085883a 	add	r2,r20,r2
100056dc:	11000017 	ldw	r4,0(r2)
100056e0:	00083740 	call	10008374 <__hi0bits>
100056e4:	00c00804 	movi	r3,32
100056e8:	1885c83a 	sub	r2,r3,r2
100056ec:	003f3f06 	br	100053ec <_dtoa_r+0xa28>
100056f0:	800b883a 	mov	r5,r16
100056f4:	000f883a 	mov	r7,zero
100056f8:	01800284 	movi	r6,10
100056fc:	b809883a 	mov	r4,r23
10005700:	00080e00 	call	100080e0 <__multadd>
10005704:	1021883a 	mov	r16,r2
10005708:	d8800b17 	ldw	r2,44(sp)
1000570c:	00824b0e 	bge	zero,r2,1000603c <_dtoa_r+0x1678>
10005710:	dd400415 	stw	r21,16(sp)
10005714:	d8800515 	stw	r2,20(sp)
10005718:	0480ac16 	blt	zero,r18,100059cc <_dtoa_r+0x1008>
1000571c:	8801731e 	bne	r17,zero,10005cec <_dtoa_r+0x1328>
10005720:	8025883a 	mov	r18,r16
10005724:	dd800117 	ldw	r22,4(sp)
10005728:	d9000517 	ldw	r4,20(sp)
1000572c:	98c0004c 	andi	r3,r19,1
10005730:	b0bfffc4 	addi	r2,r22,-1
10005734:	1105883a 	add	r2,r2,r4
10005738:	d8800515 	stw	r2,20(sp)
1000573c:	d8800217 	ldw	r2,8(sp)
10005740:	d8c00815 	stw	r3,32(sp)
10005744:	1884b03a 	or	r2,r3,r2
10005748:	d8800715 	stw	r2,28(sp)
1000574c:	00002906 	br	100057f4 <_dtoa_r+0xe30>
10005750:	e009883a 	mov	r4,fp
10005754:	0008acc0 	call	10008acc <__mcmp>
10005758:	980b883a 	mov	r5,r19
1000575c:	b809883a 	mov	r4,r23
10005760:	d8800315 	stw	r2,12(sp)
10005764:	00080bc0 	call	100080bc <_Bfree>
10005768:	d8800317 	ldw	r2,12(sp)
1000576c:	1000021e 	bne	r2,zero,10005778 <_dtoa_r+0xdb4>
10005770:	d8c00717 	ldw	r3,28(sp)
10005774:	18022326 	beq	r3,zero,10006004 <_dtoa_r+0x1640>
10005778:	b4c00044 	addi	r19,r22,1
1000577c:	88012916 	blt	r17,zero,10005c24 <_dtoa_r+0x1260>
10005780:	d8c00217 	ldw	r3,8(sp)
10005784:	88e2b03a 	or	r17,r17,r3
10005788:	d8c00817 	ldw	r3,32(sp)
1000578c:	1c62b03a 	or	r17,r3,r17
10005790:	88012426 	beq	r17,zero,10005c24 <_dtoa_r+0x1260>
10005794:	00816f16 	blt	zero,r2,10005d54 <_dtoa_r+0x1390>
10005798:	d8800517 	ldw	r2,20(sp)
1000579c:	b5400005 	stb	r21,0(r22)
100057a0:	15817926 	beq	r2,r22,10005d88 <_dtoa_r+0x13c4>
100057a4:	e00b883a 	mov	r5,fp
100057a8:	000f883a 	mov	r7,zero
100057ac:	01800284 	movi	r6,10
100057b0:	b809883a 	mov	r4,r23
100057b4:	00080e00 	call	100080e0 <__multadd>
100057b8:	1039883a 	mov	fp,r2
100057bc:	800b883a 	mov	r5,r16
100057c0:	000f883a 	mov	r7,zero
100057c4:	01800284 	movi	r6,10
100057c8:	b809883a 	mov	r4,r23
100057cc:	84801f26 	beq	r16,r18,1000584c <_dtoa_r+0xe88>
100057d0:	00080e00 	call	100080e0 <__multadd>
100057d4:	900b883a 	mov	r5,r18
100057d8:	000f883a 	mov	r7,zero
100057dc:	01800284 	movi	r6,10
100057e0:	b809883a 	mov	r4,r23
100057e4:	1021883a 	mov	r16,r2
100057e8:	00080e00 	call	100080e0 <__multadd>
100057ec:	1025883a 	mov	r18,r2
100057f0:	982d883a 	mov	r22,r19
100057f4:	a00b883a 	mov	r5,r20
100057f8:	e009883a 	mov	r4,fp
100057fc:	00047a40 	call	100047a4 <quorem>
10005800:	800b883a 	mov	r5,r16
10005804:	e009883a 	mov	r4,fp
10005808:	102b883a 	mov	r21,r2
1000580c:	d8800615 	stw	r2,24(sp)
10005810:	0008acc0 	call	10008acc <__mcmp>
10005814:	a00b883a 	mov	r5,r20
10005818:	900d883a 	mov	r6,r18
1000581c:	b809883a 	mov	r4,r23
10005820:	1023883a 	mov	r17,r2
10005824:	0008b240 	call	10008b24 <__mdiff>
10005828:	1027883a 	mov	r19,r2
1000582c:	10800317 	ldw	r2,12(r2)
10005830:	ad400c04 	addi	r21,r21,48
10005834:	980b883a 	mov	r5,r19
10005838:	103fc526 	beq	r2,zero,10005750 <_dtoa_r+0xd8c>
1000583c:	b809883a 	mov	r4,r23
10005840:	00080bc0 	call	100080bc <_Bfree>
10005844:	00800044 	movi	r2,1
10005848:	003fcb06 	br	10005778 <_dtoa_r+0xdb4>
1000584c:	00080e00 	call	100080e0 <__multadd>
10005850:	1021883a 	mov	r16,r2
10005854:	1025883a 	mov	r18,r2
10005858:	003fe506 	br	100057f0 <_dtoa_r+0xe2c>
1000585c:	d8800217 	ldw	r2,8(sp)
10005860:	108000d0 	cmplti	r2,r2,3
10005864:	10003e26 	beq	r2,zero,10005960 <_dtoa_r+0xf9c>
10005868:	d8800717 	ldw	r2,28(sp)
1000586c:	103faa1e 	bne	r2,zero,10005718 <_dtoa_r+0xd54>
10005870:	a00b883a 	mov	r5,r20
10005874:	e009883a 	mov	r4,fp
10005878:	00047a40 	call	100047a4 <quorem>
1000587c:	14c00c04 	addi	r19,r2,48
10005880:	d8800117 	ldw	r2,4(sp)
10005884:	0023883a 	mov	r17,zero
10005888:	15400044 	addi	r21,r2,1
1000588c:	14c00005 	stb	r19,0(r2)
10005890:	d8800417 	ldw	r2,16(sp)
10005894:	10800044 	addi	r2,r2,1
10005898:	d8800415 	stw	r2,16(sp)
1000589c:	003f0906 	br	100054c4 <_dtoa_r+0xb00>
100058a0:	a00b883a 	mov	r5,r20
100058a4:	e009883a 	mov	r4,fp
100058a8:	0008acc0 	call	10008acc <__mcmp>
100058ac:	103ee70e 	bge	r2,zero,1000544c <_dtoa_r+0xa88>
100058b0:	e00b883a 	mov	r5,fp
100058b4:	000f883a 	mov	r7,zero
100058b8:	01800284 	movi	r6,10
100058bc:	b809883a 	mov	r4,r23
100058c0:	00080e00 	call	100080e0 <__multadd>
100058c4:	d8c00417 	ldw	r3,16(sp)
100058c8:	1039883a 	mov	fp,r2
100058cc:	d8800717 	ldw	r2,28(sp)
100058d0:	1d7fffc4 	addi	r21,r3,-1
100058d4:	103f861e 	bne	r2,zero,100056f0 <_dtoa_r+0xd2c>
100058d8:	d8800b17 	ldw	r2,44(sp)
100058dc:	0081d20e 	bge	zero,r2,10006028 <_dtoa_r+0x1664>
100058e0:	d8800515 	stw	r2,20(sp)
100058e4:	003ee006 	br	10005468 <_dtoa_r+0xaa4>
100058e8:	00840074 	movhi	r2,4097
100058ec:	1007883a 	mov	r3,r2
100058f0:	18c94e04 	addi	r3,r3,9528
100058f4:	00840074 	movhi	r2,4097
100058f8:	d8c00115 	stw	r3,4(sp)
100058fc:	10894ec4 	addi	r2,r2,9531
10005900:	003ded06 	br	100050b8 <_dtoa_r+0x6f4>
10005904:	00800044 	movi	r2,1
10005908:	d8800715 	stw	r2,28(sp)
1000590c:	003f3406 	br	100055e0 <_dtoa_r+0xc1c>
10005910:	983eb21e 	bne	r19,zero,100053dc <_dtoa_r+0xa18>
10005914:	00800434 	movhi	r2,16
10005918:	10bfffc4 	addi	r2,r2,-1
1000591c:	8884703a 	and	r2,r17,r2
10005920:	103eae1e 	bne	r2,zero,100053dc <_dtoa_r+0xa18>
10005924:	8c5ffc2c 	andhi	r17,r17,32752
10005928:	883eac26 	beq	r17,zero,100053dc <_dtoa_r+0xa18>
1000592c:	d8800617 	ldw	r2,24(sp)
10005930:	b5800044 	addi	r22,r22,1
10005934:	04400044 	movi	r17,1
10005938:	10800044 	addi	r2,r2,1
1000593c:	d8800615 	stw	r2,24(sp)
10005940:	003ea706 	br	100053e0 <_dtoa_r+0xa1c>
10005944:	00800044 	movi	r2,1
10005948:	d8800515 	stw	r2,20(sp)
1000594c:	d8801e15 	stw	r2,120(sp)
10005950:	003f1b06 	br	100055c0 <_dtoa_r+0xbfc>
10005954:	d8800b17 	ldw	r2,44(sp)
10005958:	dd400415 	stw	r21,16(sp)
1000595c:	d8800515 	stw	r2,20(sp)
10005960:	d8800517 	ldw	r2,20(sp)
10005964:	103e081e 	bne	r2,zero,10005188 <_dtoa_r+0x7c4>
10005968:	a00b883a 	mov	r5,r20
1000596c:	b809883a 	mov	r4,r23
10005970:	000f883a 	mov	r7,zero
10005974:	01800144 	movi	r6,5
10005978:	00080e00 	call	100080e0 <__multadd>
1000597c:	100b883a 	mov	r5,r2
10005980:	e009883a 	mov	r4,fp
10005984:	1029883a 	mov	r20,r2
10005988:	0008acc0 	call	10008acc <__mcmp>
1000598c:	00bdfe0e 	bge	zero,r2,10005188 <_dtoa_r+0x7c4>
10005990:	d8c00117 	ldw	r3,4(sp)
10005994:	00800c44 	movi	r2,49
10005998:	18800005 	stb	r2,0(r3)
1000599c:	d8800417 	ldw	r2,16(sp)
100059a0:	1d400044 	addi	r21,r3,1
100059a4:	14400044 	addi	r17,r2,1
100059a8:	a00b883a 	mov	r5,r20
100059ac:	b809883a 	mov	r4,r23
100059b0:	00080bc0 	call	100080bc <_Bfree>
100059b4:	88800044 	addi	r2,r17,1
100059b8:	d8800415 	stw	r2,16(sp)
100059bc:	803ee11e 	bne	r16,zero,10005544 <_dtoa_r+0xb80>
100059c0:	003ee306 	br	10005550 <_dtoa_r+0xb8c>
100059c4:	b005883a 	mov	r2,r22
100059c8:	003e6006 	br	1000534c <_dtoa_r+0x988>
100059cc:	800b883a 	mov	r5,r16
100059d0:	900d883a 	mov	r6,r18
100059d4:	b809883a 	mov	r4,r23
100059d8:	00089440 	call	10008944 <__lshift>
100059dc:	1021883a 	mov	r16,r2
100059e0:	003f4e06 	br	1000571c <_dtoa_r+0xd58>
100059e4:	1529c83a 	sub	r20,r2,r20
100059e8:	003e4906 	br	10005310 <_dtoa_r+0x94c>
100059ec:	dcc00c15 	stw	r19,48(sp)
100059f0:	8825883a 	mov	r18,r17
100059f4:	05400084 	movi	r21,2
100059f8:	003cdf06 	br	10004d78 <_dtoa_r+0x3b4>
100059fc:	00800044 	movi	r2,1
10005a00:	003ead06 	br	100054b8 <_dtoa_r+0xaf4>
10005a04:	00800044 	movi	r2,1
10005a08:	d8800715 	stw	r2,28(sp)
10005a0c:	003ca506 	br	10004ca4 <_dtoa_r+0x2e0>
10005a10:	1000021e 	bne	r2,zero,10005a1c <_dtoa_r+0x1058>
10005a14:	98c0004c 	andi	r3,r19,1
10005a18:	183eb41e 	bne	r3,zero,100054ec <_dtoa_r+0xb28>
10005a1c:	2005883a 	mov	r2,r4
10005a20:	00000206 	br	10005a2c <_dtoa_r+0x1068>
10005a24:	a8bfff83 	ldbu	r2,-2(r21)
10005a28:	182b883a 	mov	r21,r3
10005a2c:	10803fcc 	andi	r2,r2,255
10005a30:	1080201c 	xori	r2,r2,128
10005a34:	10bfe004 	addi	r2,r2,-128
10005a38:	10800c18 	cmpnei	r2,r2,48
10005a3c:	a8ffffc4 	addi	r3,r21,-1
10005a40:	103ff826 	beq	r2,zero,10005a24 <_dtoa_r+0x1060>
10005a44:	003eb606 	br	10005520 <_dtoa_r+0xb5c>
10005a48:	d8c00117 	ldw	r3,4(sp)
10005a4c:	00800c44 	movi	r2,49
10005a50:	18800005 	stb	r2,0(r3)
10005a54:	d8800417 	ldw	r2,16(sp)
10005a58:	10800044 	addi	r2,r2,1
10005a5c:	d8800415 	stw	r2,16(sp)
10005a60:	003eaf06 	br	10005520 <_dtoa_r+0xb5c>
10005a64:	d8c00a17 	ldw	r3,40(sp)
10005a68:	18011826 	beq	r3,zero,10005ecc <_dtoa_r+0x1508>
10005a6c:	d8c00617 	ldw	r3,24(sp)
10005a70:	10810cc4 	addi	r2,r2,1075
10005a74:	b0ad883a 	add	r22,r22,r2
10005a78:	1885883a 	add	r2,r3,r2
10005a7c:	dd000817 	ldw	r20,32(sp)
10005a80:	1825883a 	mov	r18,r3
10005a84:	d8800615 	stw	r2,24(sp)
10005a88:	003e2806 	br	1000532c <_dtoa_r+0x968>
10005a8c:	a809883a 	mov	r4,r21
10005a90:	000f2fc0 	call	1000f2fc <__floatsidf>
10005a94:	800d883a 	mov	r6,r16
10005a98:	900f883a 	mov	r7,r18
10005a9c:	1009883a 	mov	r4,r2
10005aa0:	180b883a 	mov	r5,r3
10005aa4:	000e1c80 	call	1000e1c8 <__muldf3>
10005aa8:	000d883a 	mov	r6,zero
10005aac:	01d00734 	movhi	r7,16412
10005ab0:	1009883a 	mov	r4,r2
10005ab4:	180b883a 	mov	r5,r3
10005ab8:	000cd580 	call	1000cd58 <__adddf3>
10005abc:	1029883a 	mov	r20,r2
10005ac0:	00bf3034 	movhi	r2,64704
10005ac4:	1885883a 	add	r2,r3,r2
10005ac8:	d8800c15 	stw	r2,48(sp)
10005acc:	8009883a 	mov	r4,r16
10005ad0:	900b883a 	mov	r5,r18
10005ad4:	000d883a 	mov	r6,zero
10005ad8:	01d00534 	movhi	r7,16404
10005adc:	000e9740 	call	1000e974 <__subdf3>
10005ae0:	dd400c17 	ldw	r21,48(sp)
10005ae4:	a00d883a 	mov	r6,r20
10005ae8:	1009883a 	mov	r4,r2
10005aec:	a80f883a 	mov	r7,r21
10005af0:	180b883a 	mov	r5,r3
10005af4:	1025883a 	mov	r18,r2
10005af8:	1821883a 	mov	r16,r3
10005afc:	000dff80 	call	1000dff8 <__gedf2>
10005b00:	00812f16 	blt	zero,r2,10005fc0 <_dtoa_r+0x15fc>
10005b04:	a9e0003c 	xorhi	r7,r21,32768
10005b08:	a00d883a 	mov	r6,r20
10005b0c:	9009883a 	mov	r4,r18
10005b10:	800b883a 	mov	r5,r16
10005b14:	000e0e00 	call	1000e0e0 <__ledf2>
10005b18:	103d7d0e 	bge	r2,zero,10005110 <_dtoa_r+0x74c>
10005b1c:	0029883a 	mov	r20,zero
10005b20:	0021883a 	mov	r16,zero
10005b24:	003d9806 	br	10005188 <_dtoa_r+0x7c4>
10005b28:	d9800817 	ldw	r6,32(sp)
10005b2c:	e00b883a 	mov	r5,fp
10005b30:	b809883a 	mov	r4,r23
10005b34:	00087fc0 	call	100087fc <__pow5mult>
10005b38:	1039883a 	mov	fp,r2
10005b3c:	003e1e06 	br	100053b8 <_dtoa_r+0x9f4>
10005b40:	d8800417 	ldw	r2,16(sp)
10005b44:	1000ed26 	beq	r2,zero,10005efc <_dtoa_r+0x1538>
10005b48:	00a9c83a 	sub	r20,zero,r2
10005b4c:	a08003cc 	andi	r2,r20,15
10005b50:	100690fa 	slli	r3,r2,3
10005b54:	00840074 	movhi	r2,4097
10005b58:	10898e04 	addi	r2,r2,9784
10005b5c:	10c5883a 	add	r2,r2,r3
10005b60:	11800017 	ldw	r6,0(r2)
10005b64:	11c00117 	ldw	r7,4(r2)
10005b68:	a029d13a 	srai	r20,r20,4
10005b6c:	9809883a 	mov	r4,r19
10005b70:	880b883a 	mov	r5,r17
10005b74:	000e1c80 	call	1000e1c8 <__muldf3>
10005b78:	1021883a 	mov	r16,r2
10005b7c:	1825883a 	mov	r18,r3
10005b80:	a0013826 	beq	r20,zero,10006064 <_dtoa_r+0x16a0>
10005b84:	02040074 	movhi	r8,4097
10005b88:	05400084 	movi	r21,2
10005b8c:	42098404 	addi	r8,r8,9744
10005b90:	1009883a 	mov	r4,r2
10005b94:	9805883a 	mov	r2,r19
10005b98:	180b883a 	mov	r5,r3
10005b9c:	dc000c15 	stw	r16,48(sp)
10005ba0:	8827883a 	mov	r19,r17
10005ba4:	0007883a 	mov	r3,zero
10005ba8:	a823883a 	mov	r17,r21
10005bac:	4021883a 	mov	r16,r8
10005bb0:	102b883a 	mov	r21,r2
10005bb4:	a180004c 	andi	r6,r20,1
10005bb8:	30000726 	beq	r6,zero,10005bd8 <_dtoa_r+0x1214>
10005bbc:	81800017 	ldw	r6,0(r16)
10005bc0:	81c00117 	ldw	r7,4(r16)
10005bc4:	8c400044 	addi	r17,r17,1
10005bc8:	000e1c80 	call	1000e1c8 <__muldf3>
10005bcc:	180b883a 	mov	r5,r3
10005bd0:	1009883a 	mov	r4,r2
10005bd4:	00c00044 	movi	r3,1
10005bd8:	a029d07a 	srai	r20,r20,1
10005bdc:	84000204 	addi	r16,r16,8
10005be0:	a03ff41e 	bne	r20,zero,10005bb4 <_dtoa_r+0x11f0>
10005be4:	a805883a 	mov	r2,r21
10005be8:	18c03fcc 	andi	r3,r3,255
10005bec:	882b883a 	mov	r21,r17
10005bf0:	dc000c17 	ldw	r16,48(sp)
10005bf4:	9823883a 	mov	r17,r19
10005bf8:	1027883a 	mov	r19,r2
10005bfc:	183c7726 	beq	r3,zero,10004ddc <_dtoa_r+0x418>
10005c00:	2021883a 	mov	r16,r4
10005c04:	2825883a 	mov	r18,r5
10005c08:	003c7406 	br	10004ddc <_dtoa_r+0x418>
10005c0c:	983eae1e 	bne	r19,zero,100056c8 <_dtoa_r+0xd04>
10005c10:	00800434 	movhi	r2,16
10005c14:	10bfffc4 	addi	r2,r2,-1
10005c18:	8884703a 	and	r2,r17,r2
10005c1c:	103f4126 	beq	r2,zero,10005924 <_dtoa_r+0xf60>
10005c20:	003ea906 	br	100056c8 <_dtoa_r+0xd04>
10005c24:	9807883a 	mov	r3,r19
10005c28:	a827883a 	mov	r19,r21
10005c2c:	182b883a 	mov	r21,r3
10005c30:	d8c00417 	ldw	r3,16(sp)
10005c34:	18c00044 	addi	r3,r3,1
10005c38:	d8c00415 	stw	r3,16(sp)
10005c3c:	00800d0e 	bge	zero,r2,10005c74 <_dtoa_r+0x12b0>
10005c40:	e00b883a 	mov	r5,fp
10005c44:	b809883a 	mov	r4,r23
10005c48:	01800044 	movi	r6,1
10005c4c:	00089440 	call	10008944 <__lshift>
10005c50:	a00b883a 	mov	r5,r20
10005c54:	1009883a 	mov	r4,r2
10005c58:	1039883a 	mov	fp,r2
10005c5c:	0008acc0 	call	10008acc <__mcmp>
10005c60:	0080df0e 	bge	zero,r2,10005fe0 <_dtoa_r+0x161c>
10005c64:	98c00e60 	cmpeqi	r3,r19,57
10005c68:	1800ce1e 	bne	r3,zero,10005fa4 <_dtoa_r+0x15e0>
10005c6c:	d8800617 	ldw	r2,24(sp)
10005c70:	14c00c44 	addi	r19,r2,49
10005c74:	8023883a 	mov	r17,r16
10005c78:	b4c00005 	stb	r19,0(r22)
10005c7c:	9021883a 	mov	r16,r18
10005c80:	003e2706 	br	10005520 <_dtoa_r+0xb5c>
10005c84:	b82b883a 	mov	r21,r23
10005c88:	ddc00217 	ldw	r23,8(sp)
10005c8c:	200d883a 	mov	r6,r4
10005c90:	280f883a 	mov	r7,r5
10005c94:	000cd580 	call	1000cd58 <__adddf3>
10005c98:	180b883a 	mov	r5,r3
10005c9c:	800d883a 	mov	r6,r16
10005ca0:	900f883a 	mov	r7,r18
10005ca4:	1009883a 	mov	r4,r2
10005ca8:	1823883a 	mov	r17,r3
10005cac:	1027883a 	mov	r19,r2
10005cb0:	000dff80 	call	1000dff8 <__gedf2>
10005cb4:	d8c00417 	ldw	r3,16(sp)
10005cb8:	18c00044 	addi	r3,r3,1
10005cbc:	d8c00415 	stw	r3,16(sp)
10005cc0:	00808c16 	blt	zero,r2,10005ef4 <_dtoa_r+0x1530>
10005cc4:	800d883a 	mov	r6,r16
10005cc8:	900f883a 	mov	r7,r18
10005ccc:	9809883a 	mov	r4,r19
10005cd0:	880b883a 	mov	r5,r17
10005cd4:	000df780 	call	1000df78 <__eqdf2>
10005cd8:	1000021e 	bne	r2,zero,10005ce4 <_dtoa_r+0x1320>
10005cdc:	ad40004c 	andi	r21,r21,1
10005ce0:	a800841e 	bne	r21,zero,10005ef4 <_dtoa_r+0x1530>
10005ce4:	a02b883a 	mov	r21,r20
10005ce8:	003e1906 	br	10005550 <_dtoa_r+0xb8c>
10005cec:	81400117 	ldw	r5,4(r16)
10005cf0:	b809883a 	mov	r4,r23
10005cf4:	00080180 	call	10008018 <_Balloc>
10005cf8:	1023883a 	mov	r17,r2
10005cfc:	1000f326 	beq	r2,zero,100060cc <_dtoa_r+0x1708>
10005d00:	81800417 	ldw	r6,16(r16)
10005d04:	81400304 	addi	r5,r16,12
10005d08:	11000304 	addi	r4,r2,12
10005d0c:	31800084 	addi	r6,r6,2
10005d10:	300c90ba 	slli	r6,r6,2
10005d14:	0007cfc0 	call	10007cfc <memcpy>
10005d18:	01800044 	movi	r6,1
10005d1c:	880b883a 	mov	r5,r17
10005d20:	b809883a 	mov	r4,r23
10005d24:	00089440 	call	10008944 <__lshift>
10005d28:	1025883a 	mov	r18,r2
10005d2c:	003e7d06 	br	10005724 <_dtoa_r+0xd60>
10005d30:	e00b883a 	mov	r5,fp
10005d34:	b809883a 	mov	r4,r23
10005d38:	00087fc0 	call	100087fc <__pow5mult>
10005d3c:	1039883a 	mov	fp,r2
10005d40:	003d9d06 	br	100053b8 <_dtoa_r+0x9f4>
10005d44:	d8800617 	ldw	r2,24(sp)
10005d48:	d8c00517 	ldw	r3,20(sp)
10005d4c:	10e5c83a 	sub	r18,r2,r3
10005d50:	003d7606 	br	1000532c <_dtoa_r+0x968>
10005d54:	d8c00417 	ldw	r3,16(sp)
10005d58:	9805883a 	mov	r2,r19
10005d5c:	a827883a 	mov	r19,r21
10005d60:	18c00044 	addi	r3,r3,1
10005d64:	102b883a 	mov	r21,r2
10005d68:	d8c00415 	stw	r3,16(sp)
10005d6c:	98800e58 	cmpnei	r2,r19,57
10005d70:	10008c26 	beq	r2,zero,10005fa4 <_dtoa_r+0x15e0>
10005d74:	98c00044 	addi	r3,r19,1
10005d78:	8023883a 	mov	r17,r16
10005d7c:	b0c00005 	stb	r3,0(r22)
10005d80:	9021883a 	mov	r16,r18
10005d84:	003de606 	br	10005520 <_dtoa_r+0xb5c>
10005d88:	9805883a 	mov	r2,r19
10005d8c:	a827883a 	mov	r19,r21
10005d90:	102b883a 	mov	r21,r2
10005d94:	d8800417 	ldw	r2,16(sp)
10005d98:	8023883a 	mov	r17,r16
10005d9c:	9021883a 	mov	r16,r18
10005da0:	10800044 	addi	r2,r2,1
10005da4:	d8800415 	stw	r2,16(sp)
10005da8:	003dc606 	br	100054c4 <_dtoa_r+0xb00>
10005dac:	d9400c17 	ldw	r5,48(sp)
10005db0:	a009883a 	mov	r4,r20
10005db4:	000e1c80 	call	1000e1c8 <__muldf3>
10005db8:	d9800d17 	ldw	r6,52(sp)
10005dbc:	d9400117 	ldw	r5,4(sp)
10005dc0:	d9001017 	ldw	r4,64(sp)
10005dc4:	d8800c15 	stw	r2,48(sp)
10005dc8:	d8c00d15 	stw	r3,52(sp)
10005dcc:	29000005 	stb	r4,0(r5)
10005dd0:	31000058 	cmpnei	r4,r6,1
10005dd4:	29a9883a 	add	r20,r5,r6
10005dd8:	2000a026 	beq	r4,zero,1000605c <_dtoa_r+0x1698>
10005ddc:	dc400e15 	stw	r17,56(sp)
10005de0:	8009883a 	mov	r4,r16
10005de4:	900b883a 	mov	r5,r18
10005de8:	a823883a 	mov	r17,r21
10005dec:	000d883a 	mov	r6,zero
10005df0:	01d00934 	movhi	r7,16420
10005df4:	000e1c80 	call	1000e1c8 <__muldf3>
10005df8:	180b883a 	mov	r5,r3
10005dfc:	1009883a 	mov	r4,r2
10005e00:	1825883a 	mov	r18,r3
10005e04:	102b883a 	mov	r21,r2
10005e08:	000f27c0 	call	1000f27c <__fixdfsi>
10005e0c:	1009883a 	mov	r4,r2
10005e10:	1021883a 	mov	r16,r2
10005e14:	000f2fc0 	call	1000f2fc <__floatsidf>
10005e18:	a809883a 	mov	r4,r21
10005e1c:	900b883a 	mov	r5,r18
10005e20:	100d883a 	mov	r6,r2
10005e24:	180f883a 	mov	r7,r3
10005e28:	8c400044 	addi	r17,r17,1
10005e2c:	84000c04 	addi	r16,r16,48
10005e30:	000e9740 	call	1000e974 <__subdf3>
10005e34:	8c3fffc5 	stb	r16,-1(r17)
10005e38:	1009883a 	mov	r4,r2
10005e3c:	180b883a 	mov	r5,r3
10005e40:	a47fea1e 	bne	r20,r17,10005dec <_dtoa_r+0x1428>
10005e44:	dc400e17 	ldw	r17,56(sp)
10005e48:	1021883a 	mov	r16,r2
10005e4c:	1825883a 	mov	r18,r3
10005e50:	d9000c17 	ldw	r4,48(sp)
10005e54:	d9400d17 	ldw	r5,52(sp)
10005e58:	000d883a 	mov	r6,zero
10005e5c:	01cff834 	movhi	r7,16352
10005e60:	000cd580 	call	1000cd58 <__adddf3>
10005e64:	800d883a 	mov	r6,r16
10005e68:	900f883a 	mov	r7,r18
10005e6c:	1009883a 	mov	r4,r2
10005e70:	180b883a 	mov	r5,r3
10005e74:	000e0e00 	call	1000e0e0 <__ledf2>
10005e78:	10005416 	blt	r2,zero,10005fcc <_dtoa_r+0x1608>
10005e7c:	d9800c17 	ldw	r6,48(sp)
10005e80:	d9c00d17 	ldw	r7,52(sp)
10005e84:	0009883a 	mov	r4,zero
10005e88:	014ff834 	movhi	r5,16352
10005e8c:	000e9740 	call	1000e974 <__subdf3>
10005e90:	800d883a 	mov	r6,r16
10005e94:	900f883a 	mov	r7,r18
10005e98:	1009883a 	mov	r4,r2
10005e9c:	180b883a 	mov	r5,r3
10005ea0:	000dff80 	call	1000dff8 <__gedf2>
10005ea4:	00bc9a0e 	bge	zero,r2,10005110 <_dtoa_r+0x74c>
10005ea8:	a0bfffc7 	ldb	r2,-1(r20)
10005eac:	a02b883a 	mov	r21,r20
10005eb0:	a53fffc4 	addi	r20,r20,-1
10005eb4:	10800c20 	cmpeqi	r2,r2,48
10005eb8:	103ffb1e 	bne	r2,zero,10005ea8 <_dtoa_r+0x14e4>
10005ebc:	d8801117 	ldw	r2,68(sp)
10005ec0:	10800044 	addi	r2,r2,1
10005ec4:	d8800415 	stw	r2,16(sp)
10005ec8:	003da106 	br	10005550 <_dtoa_r+0xb8c>
10005ecc:	d8c01217 	ldw	r3,72(sp)
10005ed0:	d9000617 	ldw	r4,24(sp)
10005ed4:	00800d84 	movi	r2,54
10005ed8:	10c5c83a 	sub	r2,r2,r3
10005edc:	b0ad883a 	add	r22,r22,r2
10005ee0:	2085883a 	add	r2,r4,r2
10005ee4:	dd000817 	ldw	r20,32(sp)
10005ee8:	2025883a 	mov	r18,r4
10005eec:	d8800615 	stw	r2,24(sp)
10005ef0:	003d0e06 	br	1000532c <_dtoa_r+0x968>
10005ef4:	d9000117 	ldw	r4,4(sp)
10005ef8:	003c4b06 	br	10005028 <_dtoa_r+0x664>
10005efc:	9821883a 	mov	r16,r19
10005f00:	8825883a 	mov	r18,r17
10005f04:	05400084 	movi	r21,2
10005f08:	003bb406 	br	10004ddc <_dtoa_r+0x418>
10005f0c:	d8800517 	ldw	r2,20(sp)
10005f10:	103ede26 	beq	r2,zero,10005a8c <_dtoa_r+0x10c8>
10005f14:	d8800b17 	ldw	r2,44(sp)
10005f18:	00bc7d0e 	bge	zero,r2,10005110 <_dtoa_r+0x74c>
10005f1c:	900b883a 	mov	r5,r18
10005f20:	8009883a 	mov	r4,r16
10005f24:	000d883a 	mov	r6,zero
10005f28:	01d00934 	movhi	r7,16420
10005f2c:	000e1c80 	call	1000e1c8 <__muldf3>
10005f30:	a9000044 	addi	r4,r21,1
10005f34:	1021883a 	mov	r16,r2
10005f38:	1825883a 	mov	r18,r3
10005f3c:	000f2fc0 	call	1000f2fc <__floatsidf>
10005f40:	800d883a 	mov	r6,r16
10005f44:	900f883a 	mov	r7,r18
10005f48:	1009883a 	mov	r4,r2
10005f4c:	180b883a 	mov	r5,r3
10005f50:	000e1c80 	call	1000e1c8 <__muldf3>
10005f54:	1009883a 	mov	r4,r2
10005f58:	000d883a 	mov	r6,zero
10005f5c:	01d00734 	movhi	r7,16412
10005f60:	180b883a 	mov	r5,r3
10005f64:	000cd580 	call	1000cd58 <__adddf3>
10005f68:	d9000417 	ldw	r4,16(sp)
10005f6c:	1029883a 	mov	r20,r2
10005f70:	00bf3034 	movhi	r2,64704
10005f74:	1887883a 	add	r3,r3,r2
10005f78:	d8800b17 	ldw	r2,44(sp)
10005f7c:	213fffc4 	addi	r4,r4,-1
10005f80:	d9001115 	stw	r4,68(sp)
10005f84:	d8c00c15 	stw	r3,48(sp)
10005f88:	d8800d15 	stw	r2,52(sp)
10005f8c:	003bb106 	br	10004e54 <_dtoa_r+0x490>
10005f90:	d8800417 	ldw	r2,16(sp)
10005f94:	00c00c44 	movi	r3,49
10005f98:	10800044 	addi	r2,r2,1
10005f9c:	d8800415 	stw	r2,16(sp)
10005fa0:	003c2a06 	br	1000504c <_dtoa_r+0x688>
10005fa4:	00800e44 	movi	r2,57
10005fa8:	8023883a 	mov	r17,r16
10005fac:	d9400117 	ldw	r5,4(sp)
10005fb0:	b0800005 	stb	r2,0(r22)
10005fb4:	9021883a 	mov	r16,r18
10005fb8:	01000e44 	movi	r4,57
10005fbc:	003d5006 	br	10005500 <_dtoa_r+0xb3c>
10005fc0:	0029883a 	mov	r20,zero
10005fc4:	0021883a 	mov	r16,zero
10005fc8:	003e7106 	br	10005990 <_dtoa_r+0xfcc>
10005fcc:	d8801117 	ldw	r2,68(sp)
10005fd0:	d9000117 	ldw	r4,4(sp)
10005fd4:	10800044 	addi	r2,r2,1
10005fd8:	d8800415 	stw	r2,16(sp)
10005fdc:	003c1206 	br	10005028 <_dtoa_r+0x664>
10005fe0:	103f241e 	bne	r2,zero,10005c74 <_dtoa_r+0x12b0>
10005fe4:	9880004c 	andi	r2,r19,1
10005fe8:	103f1e1e 	bne	r2,zero,10005c64 <_dtoa_r+0x12a0>
10005fec:	003f2106 	br	10005c74 <_dtoa_r+0x12b0>
10005ff0:	d8801117 	ldw	r2,68(sp)
10005ff4:	ddc00d17 	ldw	r23,52(sp)
10005ff8:	10800044 	addi	r2,r2,1
10005ffc:	d8800415 	stw	r2,16(sp)
10006000:	003d5306 	br	10005550 <_dtoa_r+0xb8c>
10006004:	d8c00417 	ldw	r3,16(sp)
10006008:	a8800e60 	cmpeqi	r2,r21,57
1000600c:	a827883a 	mov	r19,r21
10006010:	18c00044 	addi	r3,r3,1
10006014:	d8c00415 	stw	r3,16(sp)
10006018:	b5400044 	addi	r21,r22,1
1000601c:	103fe11e 	bne	r2,zero,10005fa4 <_dtoa_r+0x15e0>
10006020:	047f1216 	blt	zero,r17,10005c6c <_dtoa_r+0x12a8>
10006024:	003f1306 	br	10005c74 <_dtoa_r+0x12b0>
10006028:	d8800217 	ldw	r2,8(sp)
1000602c:	108000c8 	cmpgei	r2,r2,3
10006030:	103e481e 	bne	r2,zero,10005954 <_dtoa_r+0xf90>
10006034:	dd400415 	stw	r21,16(sp)
10006038:	003e0d06 	br	10005870 <_dtoa_r+0xeac>
1000603c:	d8800217 	ldw	r2,8(sp)
10006040:	108000c8 	cmpgei	r2,r2,3
10006044:	103e431e 	bne	r2,zero,10005954 <_dtoa_r+0xf90>
10006048:	d8800b17 	ldw	r2,44(sp)
1000604c:	dd400415 	stw	r21,16(sp)
10006050:	d8800515 	stw	r2,20(sp)
10006054:	04bdb10e 	bge	zero,r18,1000571c <_dtoa_r+0xd58>
10006058:	003e5c06 	br	100059cc <_dtoa_r+0x1008>
1000605c:	a829883a 	mov	r20,r21
10006060:	003f7b06 	br	10005e50 <_dtoa_r+0x148c>
10006064:	05400084 	movi	r21,2
10006068:	003b5c06 	br	10004ddc <_dtoa_r+0x418>
1000606c:	01c40074 	movhi	r7,4097
10006070:	01040074 	movhi	r4,4097
10006074:	39c95204 	addi	r7,r7,9544
10006078:	000d883a 	mov	r6,zero
1000607c:	01406a84 	movi	r5,426
10006080:	21095704 	addi	r4,r4,9564
10006084:	000aeec0 	call	1000aeec <__assert_func>
10006088:	000b883a 	mov	r5,zero
1000608c:	003b1506 	br	10004ce4 <_dtoa_r+0x320>
10006090:	b8001115 	stw	zero,68(r23)
10006094:	000b883a 	mov	r5,zero
10006098:	b809883a 	mov	r4,r23
1000609c:	00080180 	call	10008018 <_Balloc>
100060a0:	d8800115 	stw	r2,4(sp)
100060a4:	103ff126 	beq	r2,zero,1000606c <_dtoa_r+0x16a8>
100060a8:	d8800117 	ldw	r2,4(sp)
100060ac:	d8001e15 	stw	zero,120(sp)
100060b0:	b8801015 	stw	r2,64(r23)
100060b4:	00bfffc4 	movi	r2,-1
100060b8:	d8800515 	stw	r2,20(sp)
100060bc:	d8800b15 	stw	r2,44(sp)
100060c0:	00800044 	movi	r2,1
100060c4:	d8800715 	stw	r2,28(sp)
100060c8:	003c1106 	br	10005110 <_dtoa_r+0x74c>
100060cc:	01c40074 	movhi	r7,4097
100060d0:	01040074 	movhi	r4,4097
100060d4:	39c95204 	addi	r7,r7,9544
100060d8:	000d883a 	mov	r6,zero
100060dc:	0140ba84 	movi	r5,746
100060e0:	21095704 	addi	r4,r4,9564
100060e4:	000aeec0 	call	1000aeec <__assert_func>
100060e8:	00840074 	movhi	r2,4097
100060ec:	10894f04 	addi	r2,r2,9532
100060f0:	d8800115 	stw	r2,4(sp)
100060f4:	003a6506 	br	10004a8c <_dtoa_r+0xc8>
100060f8:	18c00120 	cmpeqi	r3,r3,4
100060fc:	183cc91e 	bne	r3,zero,10005424 <_dtoa_r+0xa60>
10006100:	00c00f04 	movi	r3,60
10006104:	1885c83a 	sub	r2,r3,r2
10006108:	003cc106 	br	10005410 <_dtoa_r+0xa4c>

1000610c <__sflush_r>:
1000610c:	2880030b 	ldhu	r2,12(r5)
10006110:	defffb04 	addi	sp,sp,-20
10006114:	dcc00315 	stw	r19,12(sp)
10006118:	dc000015 	stw	r16,0(sp)
1000611c:	dfc00415 	stw	ra,16(sp)
10006120:	dc800215 	stw	r18,8(sp)
10006124:	dc400115 	stw	r17,4(sp)
10006128:	10c0020c 	andi	r3,r2,8
1000612c:	2821883a 	mov	r16,r5
10006130:	2027883a 	mov	r19,r4
10006134:	18003f1e 	bne	r3,zero,10006234 <__sflush_r+0x128>
10006138:	28c00117 	ldw	r3,4(r5)
1000613c:	10820014 	ori	r2,r2,2048
10006140:	2880030d 	sth	r2,12(r5)
10006144:	00c0550e 	bge	zero,r3,1000629c <__sflush_r+0x190>
10006148:	82000a17 	ldw	r8,40(r16)
1000614c:	40003126 	beq	r8,zero,10006214 <__sflush_r+0x108>
10006150:	9c400017 	ldw	r17,0(r19)
10006154:	1104000c 	andi	r4,r2,4096
10006158:	98000015 	stw	zero,0(r19)
1000615c:	81400717 	ldw	r5,28(r16)
10006160:	1007883a 	mov	r3,r2
10006164:	2000521e 	bne	r4,zero,100062b0 <__sflush_r+0x1a4>
10006168:	01c00044 	movi	r7,1
1000616c:	000d883a 	mov	r6,zero
10006170:	9809883a 	mov	r4,r19
10006174:	403ee83a 	callr	r8
10006178:	10ffffd8 	cmpnei	r3,r2,-1
1000617c:	18005826 	beq	r3,zero,100062e0 <__sflush_r+0x1d4>
10006180:	80c0030b 	ldhu	r3,12(r16)
10006184:	82000a17 	ldw	r8,40(r16)
10006188:	81400717 	ldw	r5,28(r16)
1000618c:	18c0010c 	andi	r3,r3,4
10006190:	18000626 	beq	r3,zero,100061ac <__sflush_r+0xa0>
10006194:	81000117 	ldw	r4,4(r16)
10006198:	80c00c17 	ldw	r3,48(r16)
1000619c:	1105c83a 	sub	r2,r2,r4
100061a0:	18000226 	beq	r3,zero,100061ac <__sflush_r+0xa0>
100061a4:	80c00f17 	ldw	r3,60(r16)
100061a8:	10c5c83a 	sub	r2,r2,r3
100061ac:	100d883a 	mov	r6,r2
100061b0:	000f883a 	mov	r7,zero
100061b4:	9809883a 	mov	r4,r19
100061b8:	403ee83a 	callr	r8
100061bc:	10ffffd8 	cmpnei	r3,r2,-1
100061c0:	18003d1e 	bne	r3,zero,100062b8 <__sflush_r+0x1ac>
100061c4:	99000017 	ldw	r4,0(r19)
100061c8:	80c0030b 	ldhu	r3,12(r16)
100061cc:	20004e26 	beq	r4,zero,10006308 <__sflush_r+0x1fc>
100061d0:	21400760 	cmpeqi	r5,r4,29
100061d4:	2800021e 	bne	r5,zero,100061e0 <__sflush_r+0xd4>
100061d8:	210005a0 	cmpeqi	r4,r4,22
100061dc:	20002c26 	beq	r4,zero,10006290 <__sflush_r+0x184>
100061e0:	80800417 	ldw	r2,16(r16)
100061e4:	18fdffcc 	andi	r3,r3,63487
100061e8:	80c0030d 	sth	r3,12(r16)
100061ec:	80000115 	stw	zero,4(r16)
100061f0:	80800015 	stw	r2,0(r16)
100061f4:	81400c17 	ldw	r5,48(r16)
100061f8:	9c400015 	stw	r17,0(r19)
100061fc:	28000526 	beq	r5,zero,10006214 <__sflush_r+0x108>
10006200:	80801004 	addi	r2,r16,64
10006204:	28800226 	beq	r5,r2,10006210 <__sflush_r+0x104>
10006208:	9809883a 	mov	r4,r19
1000620c:	00068e00 	call	100068e0 <_free_r>
10006210:	80000c15 	stw	zero,48(r16)
10006214:	0005883a 	mov	r2,zero
10006218:	dfc00417 	ldw	ra,16(sp)
1000621c:	dcc00317 	ldw	r19,12(sp)
10006220:	dc800217 	ldw	r18,8(sp)
10006224:	dc400117 	ldw	r17,4(sp)
10006228:	dc000017 	ldw	r16,0(sp)
1000622c:	dec00504 	addi	sp,sp,20
10006230:	f800283a 	ret
10006234:	2c800417 	ldw	r18,16(r5)
10006238:	903ff626 	beq	r18,zero,10006214 <__sflush_r+0x108>
1000623c:	2c400017 	ldw	r17,0(r5)
10006240:	108000cc 	andi	r2,r2,3
10006244:	2c800015 	stw	r18,0(r5)
10006248:	8ca3c83a 	sub	r17,r17,r18
1000624c:	1000161e 	bne	r2,zero,100062a8 <__sflush_r+0x19c>
10006250:	28800517 	ldw	r2,20(r5)
10006254:	80800215 	stw	r2,8(r16)
10006258:	04400316 	blt	zero,r17,10006268 <__sflush_r+0x15c>
1000625c:	003fed06 	br	10006214 <__sflush_r+0x108>
10006260:	90a5883a 	add	r18,r18,r2
10006264:	047feb0e 	bge	zero,r17,10006214 <__sflush_r+0x108>
10006268:	80800917 	ldw	r2,36(r16)
1000626c:	81400717 	ldw	r5,28(r16)
10006270:	880f883a 	mov	r7,r17
10006274:	900d883a 	mov	r6,r18
10006278:	9809883a 	mov	r4,r19
1000627c:	103ee83a 	callr	r2
10006280:	88a3c83a 	sub	r17,r17,r2
10006284:	00bff616 	blt	zero,r2,10006260 <__sflush_r+0x154>
10006288:	80c0030b 	ldhu	r3,12(r16)
1000628c:	00bfffc4 	movi	r2,-1
10006290:	18c01014 	ori	r3,r3,64
10006294:	80c0030d 	sth	r3,12(r16)
10006298:	003fdf06 	br	10006218 <__sflush_r+0x10c>
1000629c:	28c00f17 	ldw	r3,60(r5)
100062a0:	00ffa916 	blt	zero,r3,10006148 <__sflush_r+0x3c>
100062a4:	003fdb06 	br	10006214 <__sflush_r+0x108>
100062a8:	0005883a 	mov	r2,zero
100062ac:	003fe906 	br	10006254 <__sflush_r+0x148>
100062b0:	80801417 	ldw	r2,80(r16)
100062b4:	003fb506 	br	1000618c <__sflush_r+0x80>
100062b8:	80c0030b 	ldhu	r3,12(r16)
100062bc:	81000417 	ldw	r4,16(r16)
100062c0:	80000115 	stw	zero,4(r16)
100062c4:	197dffcc 	andi	r5,r3,63487
100062c8:	8140030d 	sth	r5,12(r16)
100062cc:	81000015 	stw	r4,0(r16)
100062d0:	18c4000c 	andi	r3,r3,4096
100062d4:	183fc726 	beq	r3,zero,100061f4 <__sflush_r+0xe8>
100062d8:	80801415 	stw	r2,80(r16)
100062dc:	003fc506 	br	100061f4 <__sflush_r+0xe8>
100062e0:	98c00017 	ldw	r3,0(r19)
100062e4:	183fa626 	beq	r3,zero,10006180 <__sflush_r+0x74>
100062e8:	19000760 	cmpeqi	r4,r3,29
100062ec:	20000e1e 	bne	r4,zero,10006328 <__sflush_r+0x21c>
100062f0:	18c00598 	cmpnei	r3,r3,22
100062f4:	18000c26 	beq	r3,zero,10006328 <__sflush_r+0x21c>
100062f8:	80c0030b 	ldhu	r3,12(r16)
100062fc:	18c01014 	ori	r3,r3,64
10006300:	80c0030d 	sth	r3,12(r16)
10006304:	003fc406 	br	10006218 <__sflush_r+0x10c>
10006308:	81000417 	ldw	r4,16(r16)
1000630c:	197dffcc 	andi	r5,r3,63487
10006310:	8140030d 	sth	r5,12(r16)
10006314:	80000115 	stw	zero,4(r16)
10006318:	81000015 	stw	r4,0(r16)
1000631c:	18c4000c 	andi	r3,r3,4096
10006320:	183fb426 	beq	r3,zero,100061f4 <__sflush_r+0xe8>
10006324:	003fec06 	br	100062d8 <__sflush_r+0x1cc>
10006328:	9c400015 	stw	r17,0(r19)
1000632c:	0005883a 	mov	r2,zero
10006330:	003fb906 	br	10006218 <__sflush_r+0x10c>

10006334 <_fflush_r>:
10006334:	defffd04 	addi	sp,sp,-12
10006338:	dc000115 	stw	r16,4(sp)
1000633c:	dfc00215 	stw	ra,8(sp)
10006340:	2021883a 	mov	r16,r4
10006344:	20000226 	beq	r4,zero,10006350 <_fflush_r+0x1c>
10006348:	20800e17 	ldw	r2,56(r4)
1000634c:	10000726 	beq	r2,zero,1000636c <_fflush_r+0x38>
10006350:	2880030f 	ldh	r2,12(r5)
10006354:	10000a1e 	bne	r2,zero,10006380 <_fflush_r+0x4c>
10006358:	0005883a 	mov	r2,zero
1000635c:	dfc00217 	ldw	ra,8(sp)
10006360:	dc000117 	ldw	r16,4(sp)
10006364:	dec00304 	addi	sp,sp,12
10006368:	f800283a 	ret
1000636c:	d9400015 	stw	r5,0(sp)
10006370:	000677c0 	call	1000677c <__sinit>
10006374:	d9400017 	ldw	r5,0(sp)
10006378:	2880030f 	ldh	r2,12(r5)
1000637c:	103ff626 	beq	r2,zero,10006358 <_fflush_r+0x24>
10006380:	8009883a 	mov	r4,r16
10006384:	dfc00217 	ldw	ra,8(sp)
10006388:	dc000117 	ldw	r16,4(sp)
1000638c:	dec00304 	addi	sp,sp,12
10006390:	000610c1 	jmpi	1000610c <__sflush_r>

10006394 <fflush>:
10006394:	20001726 	beq	r4,zero,100063f4 <fflush+0x60>
10006398:	00840074 	movhi	r2,4097
1000639c:	200b883a 	mov	r5,r4
100063a0:	1111b317 	ldw	r4,18124(r2)
100063a4:	20000226 	beq	r4,zero,100063b0 <fflush+0x1c>
100063a8:	20800e17 	ldw	r2,56(r4)
100063ac:	10000526 	beq	r2,zero,100063c4 <fflush+0x30>
100063b0:	2880030f 	ldh	r2,12(r5)
100063b4:	1000021e 	bne	r2,zero,100063c0 <fflush+0x2c>
100063b8:	0005883a 	mov	r2,zero
100063bc:	f800283a 	ret
100063c0:	000610c1 	jmpi	1000610c <__sflush_r>
100063c4:	defffd04 	addi	sp,sp,-12
100063c8:	d9400115 	stw	r5,4(sp)
100063cc:	d9000015 	stw	r4,0(sp)
100063d0:	dfc00215 	stw	ra,8(sp)
100063d4:	000677c0 	call	1000677c <__sinit>
100063d8:	d9400117 	ldw	r5,4(sp)
100063dc:	d9000017 	ldw	r4,0(sp)
100063e0:	2880030f 	ldh	r2,12(r5)
100063e4:	10000826 	beq	r2,zero,10006408 <fflush+0x74>
100063e8:	dfc00217 	ldw	ra,8(sp)
100063ec:	dec00304 	addi	sp,sp,12
100063f0:	000610c1 	jmpi	1000610c <__sflush_r>
100063f4:	00840074 	movhi	r2,4097
100063f8:	1111b217 	ldw	r4,18120(r2)
100063fc:	01440034 	movhi	r5,4096
10006400:	2958cd04 	addi	r5,r5,25396
10006404:	000713c1 	jmpi	1000713c <_fwalk_reent>
10006408:	0005883a 	mov	r2,zero
1000640c:	dfc00217 	ldw	ra,8(sp)
10006410:	dec00304 	addi	sp,sp,12
10006414:	f800283a 	ret

10006418 <__fp_lock>:
10006418:	0005883a 	mov	r2,zero
1000641c:	f800283a 	ret

10006420 <_cleanup_r>:
10006420:	01440074 	movhi	r5,4097
10006424:	296c3a04 	addi	r5,r5,-20248
10006428:	000713c1 	jmpi	1000713c <_fwalk_reent>

1000642c <__fp_unlock>:
1000642c:	0005883a 	mov	r2,zero
10006430:	f800283a 	ret

10006434 <__sinit.part.0>:
10006434:	00c40034 	movhi	r3,4096
10006438:	20800117 	ldw	r2,4(r4)
1000643c:	18d90804 	addi	r3,r3,25632
10006440:	20c00f15 	stw	r3,60(r4)
10006444:	2140bb04 	addi	r5,r4,748
10006448:	00c000c4 	movi	r3,3
1000644c:	20c0b915 	stw	r3,740(r4)
10006450:	2140ba15 	stw	r5,744(r4)
10006454:	2000b815 	stw	zero,736(r4)
10006458:	10001705 	stb	zero,92(r2)
1000645c:	10001745 	stb	zero,93(r2)
10006460:	10001785 	stb	zero,94(r2)
10006464:	100017c5 	stb	zero,95(r2)
10006468:	10001805 	stb	zero,96(r2)
1000646c:	10001845 	stb	zero,97(r2)
10006470:	10001885 	stb	zero,98(r2)
10006474:	100018c5 	stb	zero,99(r2)
10006478:	00c00104 	movi	r3,4
1000647c:	10c00315 	stw	r3,12(r2)
10006480:	02040074 	movhi	r8,4097
10006484:	20c00217 	ldw	r3,8(r4)
10006488:	01c40074 	movhi	r7,4097
1000648c:	01840074 	movhi	r6,4097
10006490:	01440074 	movhi	r5,4097
10006494:	4225f104 	addi	r8,r8,-26684
10006498:	39e60804 	addi	r7,r7,-26592
1000649c:	31a62804 	addi	r6,r6,-26464
100064a0:	29663f04 	addi	r5,r5,-26372
100064a4:	02400074 	movhi	r9,1
100064a8:	10001915 	stw	zero,100(r2)
100064ac:	10000015 	stw	zero,0(r2)
100064b0:	10000115 	stw	zero,4(r2)
100064b4:	10000215 	stw	zero,8(r2)
100064b8:	10000415 	stw	zero,16(r2)
100064bc:	10000515 	stw	zero,20(r2)
100064c0:	10000615 	stw	zero,24(r2)
100064c4:	10800715 	stw	r2,28(r2)
100064c8:	12000815 	stw	r8,32(r2)
100064cc:	11c00915 	stw	r7,36(r2)
100064d0:	11800a15 	stw	r6,40(r2)
100064d4:	11400b15 	stw	r5,44(r2)
100064d8:	4a400284 	addi	r9,r9,10
100064dc:	1a400315 	stw	r9,12(r3)
100064e0:	18001915 	stw	zero,100(r3)
100064e4:	18000015 	stw	zero,0(r3)
100064e8:	18000115 	stw	zero,4(r3)
100064ec:	18000215 	stw	zero,8(r3)
100064f0:	18000415 	stw	zero,16(r3)
100064f4:	18001705 	stb	zero,92(r3)
100064f8:	18001745 	stb	zero,93(r3)
100064fc:	18001785 	stb	zero,94(r3)
10006500:	180017c5 	stb	zero,95(r3)
10006504:	18001805 	stb	zero,96(r3)
10006508:	18001845 	stb	zero,97(r3)
1000650c:	18001885 	stb	zero,98(r3)
10006510:	180018c5 	stb	zero,99(r3)
10006514:	20800317 	ldw	r2,12(r4)
10006518:	024000b4 	movhi	r9,2
1000651c:	18000515 	stw	zero,20(r3)
10006520:	18000615 	stw	zero,24(r3)
10006524:	18c00715 	stw	r3,28(r3)
10006528:	1a000815 	stw	r8,32(r3)
1000652c:	19c00915 	stw	r7,36(r3)
10006530:	19800a15 	stw	r6,40(r3)
10006534:	19400b15 	stw	r5,44(r3)
10006538:	4a400484 	addi	r9,r9,18
1000653c:	10001915 	stw	zero,100(r2)
10006540:	10000015 	stw	zero,0(r2)
10006544:	10000115 	stw	zero,4(r2)
10006548:	10000215 	stw	zero,8(r2)
1000654c:	12400315 	stw	r9,12(r2)
10006550:	10000415 	stw	zero,16(r2)
10006554:	10000515 	stw	zero,20(r2)
10006558:	10000615 	stw	zero,24(r2)
1000655c:	10001705 	stb	zero,92(r2)
10006560:	10001745 	stb	zero,93(r2)
10006564:	10001785 	stb	zero,94(r2)
10006568:	100017c5 	stb	zero,95(r2)
1000656c:	10001805 	stb	zero,96(r2)
10006570:	10001845 	stb	zero,97(r2)
10006574:	10001885 	stb	zero,98(r2)
10006578:	100018c5 	stb	zero,99(r2)
1000657c:	10800715 	stw	r2,28(r2)
10006580:	12000815 	stw	r8,32(r2)
10006584:	11c00915 	stw	r7,36(r2)
10006588:	11800a15 	stw	r6,40(r2)
1000658c:	11400b15 	stw	r5,44(r2)
10006590:	00800044 	movi	r2,1
10006594:	20800e15 	stw	r2,56(r4)
10006598:	f800283a 	ret

1000659c <__sfmoreglue>:
1000659c:	defffc04 	addi	sp,sp,-16
100065a0:	dc800215 	stw	r18,8(sp)
100065a4:	2825883a 	mov	r18,r5
100065a8:	dc000015 	stw	r16,0(sp)
100065ac:	01401a04 	movi	r5,104
100065b0:	2021883a 	mov	r16,r4
100065b4:	913fffc4 	addi	r4,r18,-1
100065b8:	dfc00315 	stw	ra,12(sp)
100065bc:	dc400115 	stw	r17,4(sp)
100065c0:	000cd300 	call	1000cd30 <__mulsi3>
100065c4:	8009883a 	mov	r4,r16
100065c8:	11401d04 	addi	r5,r2,116
100065cc:	1023883a 	mov	r17,r2
100065d0:	000744c0 	call	1000744c <_malloc_r>
100065d4:	1021883a 	mov	r16,r2
100065d8:	10000726 	beq	r2,zero,100065f8 <__sfmoreglue+0x5c>
100065dc:	11000304 	addi	r4,r2,12
100065e0:	10000015 	stw	zero,0(r2)
100065e4:	14800115 	stw	r18,4(r2)
100065e8:	11000215 	stw	r4,8(r2)
100065ec:	89801a04 	addi	r6,r17,104
100065f0:	000b883a 	mov	r5,zero
100065f4:	0007f280 	call	10007f28 <memset>
100065f8:	8005883a 	mov	r2,r16
100065fc:	dfc00317 	ldw	ra,12(sp)
10006600:	dc800217 	ldw	r18,8(sp)
10006604:	dc400117 	ldw	r17,4(sp)
10006608:	dc000017 	ldw	r16,0(sp)
1000660c:	dec00404 	addi	sp,sp,16
10006610:	f800283a 	ret

10006614 <__sfp>:
10006614:	defffb04 	addi	sp,sp,-20
10006618:	00840074 	movhi	r2,4097
1000661c:	dc000015 	stw	r16,0(sp)
10006620:	1411b217 	ldw	r16,18120(r2)
10006624:	dc400115 	stw	r17,4(sp)
10006628:	dfc00415 	stw	ra,16(sp)
1000662c:	80800e17 	ldw	r2,56(r16)
10006630:	dcc00315 	stw	r19,12(sp)
10006634:	dc800215 	stw	r18,8(sp)
10006638:	2023883a 	mov	r17,r4
1000663c:	10003126 	beq	r2,zero,10006704 <__sfp+0xf0>
10006640:	8100ba17 	ldw	r4,744(r16)
10006644:	8140b917 	ldw	r5,740(r16)
10006648:	04c00104 	movi	r19,4
1000664c:	8400b804 	addi	r16,r16,736
10006650:	297fffc4 	addi	r5,r5,-1
10006654:	2800050e 	bge	r5,zero,1000666c <__sfp+0x58>
10006658:	00002406 	br	100066ec <__sfp+0xd8>
1000665c:	297fffc4 	addi	r5,r5,-1
10006660:	28bfffd8 	cmpnei	r2,r5,-1
10006664:	21001a04 	addi	r4,r4,104
10006668:	10002026 	beq	r2,zero,100066ec <__sfp+0xd8>
1000666c:	2080030f 	ldh	r2,12(r4)
10006670:	103ffa1e 	bne	r2,zero,1000665c <__sfp+0x48>
10006674:	00bffff4 	movhi	r2,65535
10006678:	10800044 	addi	r2,r2,1
1000667c:	20001915 	stw	zero,100(r4)
10006680:	20000015 	stw	zero,0(r4)
10006684:	20000115 	stw	zero,4(r4)
10006688:	20000215 	stw	zero,8(r4)
1000668c:	20800315 	stw	r2,12(r4)
10006690:	20000415 	stw	zero,16(r4)
10006694:	20000515 	stw	zero,20(r4)
10006698:	20000615 	stw	zero,24(r4)
1000669c:	20001705 	stb	zero,92(r4)
100066a0:	20001745 	stb	zero,93(r4)
100066a4:	20001785 	stb	zero,94(r4)
100066a8:	200017c5 	stb	zero,95(r4)
100066ac:	20001805 	stb	zero,96(r4)
100066b0:	20001845 	stb	zero,97(r4)
100066b4:	20001885 	stb	zero,98(r4)
100066b8:	200018c5 	stb	zero,99(r4)
100066bc:	20000c15 	stw	zero,48(r4)
100066c0:	20000d15 	stw	zero,52(r4)
100066c4:	20001115 	stw	zero,68(r4)
100066c8:	20001215 	stw	zero,72(r4)
100066cc:	2005883a 	mov	r2,r4
100066d0:	dfc00417 	ldw	ra,16(sp)
100066d4:	dcc00317 	ldw	r19,12(sp)
100066d8:	dc800217 	ldw	r18,8(sp)
100066dc:	dc400117 	ldw	r17,4(sp)
100066e0:	dc000017 	ldw	r16,0(sp)
100066e4:	dec00504 	addi	sp,sp,20
100066e8:	f800283a 	ret
100066ec:	80800017 	ldw	r2,0(r16)
100066f0:	10000726 	beq	r2,zero,10006710 <__sfp+0xfc>
100066f4:	11000217 	ldw	r4,8(r2)
100066f8:	11400117 	ldw	r5,4(r2)
100066fc:	1021883a 	mov	r16,r2
10006700:	003fd306 	br	10006650 <__sfp+0x3c>
10006704:	8009883a 	mov	r4,r16
10006708:	00064340 	call	10006434 <__sinit.part.0>
1000670c:	003fcc06 	br	10006640 <__sfp+0x2c>
10006710:	01406b04 	movi	r5,428
10006714:	8809883a 	mov	r4,r17
10006718:	000744c0 	call	1000744c <_malloc_r>
1000671c:	1025883a 	mov	r18,r2
10006720:	10000c26 	beq	r2,zero,10006754 <__sfp+0x140>
10006724:	11000304 	addi	r4,r2,12
10006728:	11000215 	stw	r4,8(r2)
1000672c:	000b883a 	mov	r5,zero
10006730:	10000015 	stw	zero,0(r2)
10006734:	14c00115 	stw	r19,4(r2)
10006738:	01806804 	movi	r6,416
1000673c:	0007f280 	call	10007f28 <memset>
10006740:	1009883a 	mov	r4,r2
10006744:	84800015 	stw	r18,0(r16)
10006748:	014000c4 	movi	r5,3
1000674c:	9021883a 	mov	r16,r18
10006750:	003fc606 	br	1000666c <__sfp+0x58>
10006754:	80000015 	stw	zero,0(r16)
10006758:	00800304 	movi	r2,12
1000675c:	88800015 	stw	r2,0(r17)
10006760:	0009883a 	mov	r4,zero
10006764:	003fd906 	br	100066cc <__sfp+0xb8>

10006768 <_cleanup>:
10006768:	00840074 	movhi	r2,4097
1000676c:	1111b217 	ldw	r4,18120(r2)
10006770:	01440074 	movhi	r5,4097
10006774:	296c3a04 	addi	r5,r5,-20248
10006778:	000713c1 	jmpi	1000713c <_fwalk_reent>

1000677c <__sinit>:
1000677c:	20800e17 	ldw	r2,56(r4)
10006780:	10000126 	beq	r2,zero,10006788 <__sinit+0xc>
10006784:	f800283a 	ret
10006788:	00064341 	jmpi	10006434 <__sinit.part.0>

1000678c <__sfp_lock_acquire>:
1000678c:	f800283a 	ret

10006790 <__sfp_lock_release>:
10006790:	f800283a 	ret

10006794 <__sinit_lock_acquire>:
10006794:	f800283a 	ret

10006798 <__sinit_lock_release>:
10006798:	f800283a 	ret

1000679c <__fp_lock_all>:
1000679c:	00840074 	movhi	r2,4097
100067a0:	1111b317 	ldw	r4,18124(r2)
100067a4:	01440034 	movhi	r5,4096
100067a8:	29590604 	addi	r5,r5,25624
100067ac:	00070a41 	jmpi	100070a4 <_fwalk>

100067b0 <__fp_unlock_all>:
100067b0:	00840074 	movhi	r2,4097
100067b4:	1111b317 	ldw	r4,18124(r2)
100067b8:	01440034 	movhi	r5,4096
100067bc:	29590b04 	addi	r5,r5,25644
100067c0:	00070a41 	jmpi	100070a4 <_fwalk>

100067c4 <_malloc_trim_r>:
100067c4:	defffb04 	addi	sp,sp,-20
100067c8:	dcc00315 	stw	r19,12(sp)
100067cc:	04c40074 	movhi	r19,4097
100067d0:	dc800215 	stw	r18,8(sp)
100067d4:	dc400115 	stw	r17,4(sp)
100067d8:	dc000015 	stw	r16,0(sp)
100067dc:	dfc00415 	stw	ra,16(sp)
100067e0:	2821883a 	mov	r16,r5
100067e4:	9ccbd304 	addi	r19,r19,12108
100067e8:	2025883a 	mov	r18,r4
100067ec:	000fc040 	call	1000fc04 <__malloc_lock>
100067f0:	98800217 	ldw	r2,8(r19)
100067f4:	14400117 	ldw	r17,4(r2)
100067f8:	00bfff04 	movi	r2,-4
100067fc:	88a2703a 	and	r17,r17,r2
10006800:	8c21c83a 	sub	r16,r17,r16
10006804:	8403fbc4 	addi	r16,r16,4079
10006808:	8020d33a 	srli	r16,r16,12
1000680c:	843fffc4 	addi	r16,r16,-1
10006810:	8020933a 	slli	r16,r16,12
10006814:	80840008 	cmpgei	r2,r16,4096
10006818:	10000626 	beq	r2,zero,10006834 <_malloc_trim_r+0x70>
1000681c:	000b883a 	mov	r5,zero
10006820:	9009883a 	mov	r4,r18
10006824:	000976c0 	call	1000976c <_sbrk_r>
10006828:	98c00217 	ldw	r3,8(r19)
1000682c:	1c47883a 	add	r3,r3,r17
10006830:	10c00a26 	beq	r2,r3,1000685c <_malloc_trim_r+0x98>
10006834:	9009883a 	mov	r4,r18
10006838:	000fc280 	call	1000fc28 <__malloc_unlock>
1000683c:	0005883a 	mov	r2,zero
10006840:	dfc00417 	ldw	ra,16(sp)
10006844:	dcc00317 	ldw	r19,12(sp)
10006848:	dc800217 	ldw	r18,8(sp)
1000684c:	dc400117 	ldw	r17,4(sp)
10006850:	dc000017 	ldw	r16,0(sp)
10006854:	dec00504 	addi	sp,sp,20
10006858:	f800283a 	ret
1000685c:	040bc83a 	sub	r5,zero,r16
10006860:	9009883a 	mov	r4,r18
10006864:	000976c0 	call	1000976c <_sbrk_r>
10006868:	10bfffd8 	cmpnei	r2,r2,-1
1000686c:	10000d26 	beq	r2,zero,100068a4 <_malloc_trim_r+0xe0>
10006870:	00840074 	movhi	r2,4097
10006874:	1098c317 	ldw	r2,25356(r2)
10006878:	98c00217 	ldw	r3,8(r19)
1000687c:	8c23c83a 	sub	r17,r17,r16
10006880:	8c400054 	ori	r17,r17,1
10006884:	1421c83a 	sub	r16,r2,r16
10006888:	1c400115 	stw	r17,4(r3)
1000688c:	00840074 	movhi	r2,4097
10006890:	9009883a 	mov	r4,r18
10006894:	1418c315 	stw	r16,25356(r2)
10006898:	000fc280 	call	1000fc28 <__malloc_unlock>
1000689c:	00800044 	movi	r2,1
100068a0:	003fe706 	br	10006840 <_malloc_trim_r+0x7c>
100068a4:	000b883a 	mov	r5,zero
100068a8:	9009883a 	mov	r4,r18
100068ac:	000976c0 	call	1000976c <_sbrk_r>
100068b0:	99000217 	ldw	r4,8(r19)
100068b4:	1107c83a 	sub	r3,r2,r4
100068b8:	19400410 	cmplti	r5,r3,16
100068bc:	283fdd1e 	bne	r5,zero,10006834 <_malloc_trim_r+0x70>
100068c0:	01440074 	movhi	r5,4097
100068c4:	2951b417 	ldw	r5,18128(r5)
100068c8:	18c00054 	ori	r3,r3,1
100068cc:	20c00115 	stw	r3,4(r4)
100068d0:	1145c83a 	sub	r2,r2,r5
100068d4:	01440074 	movhi	r5,4097
100068d8:	2898c315 	stw	r2,25356(r5)
100068dc:	003fd506 	br	10006834 <_malloc_trim_r+0x70>

100068e0 <_free_r>:
100068e0:	28004f26 	beq	r5,zero,10006a20 <_free_r+0x140>
100068e4:	defffd04 	addi	sp,sp,-12
100068e8:	dc400115 	stw	r17,4(sp)
100068ec:	dc000015 	stw	r16,0(sp)
100068f0:	2023883a 	mov	r17,r4
100068f4:	2821883a 	mov	r16,r5
100068f8:	dfc00215 	stw	ra,8(sp)
100068fc:	000fc040 	call	1000fc04 <__malloc_lock>
10006900:	81ffff17 	ldw	r7,-4(r16)
10006904:	00bfff84 	movi	r2,-2
10006908:	80fffe04 	addi	r3,r16,-8
1000690c:	3884703a 	and	r2,r7,r2
10006910:	01040074 	movhi	r4,4097
10006914:	188d883a 	add	r6,r3,r2
10006918:	210bd304 	addi	r4,r4,12108
1000691c:	31400117 	ldw	r5,4(r6)
10006920:	22000217 	ldw	r8,8(r4)
10006924:	027fff04 	movi	r9,-4
10006928:	2a4a703a 	and	r5,r5,r9
1000692c:	41806426 	beq	r8,r6,10006ac0 <_free_r+0x1e0>
10006930:	31400115 	stw	r5,4(r6)
10006934:	39c0004c 	andi	r7,r7,1
10006938:	3151883a 	add	r8,r6,r5
1000693c:	3800281e 	bne	r7,zero,100069e0 <_free_r+0x100>
10006940:	82bffe17 	ldw	r10,-8(r16)
10006944:	42000117 	ldw	r8,4(r8)
10006948:	01c40074 	movhi	r7,4097
1000694c:	1a87c83a 	sub	r3,r3,r10
10006950:	1a400217 	ldw	r9,8(r3)
10006954:	39cbd504 	addi	r7,r7,12116
10006958:	1285883a 	add	r2,r2,r10
1000695c:	4200004c 	andi	r8,r8,1
10006960:	49c04c26 	beq	r9,r7,10006a94 <_free_r+0x1b4>
10006964:	1a800317 	ldw	r10,12(r3)
10006968:	4a800315 	stw	r10,12(r9)
1000696c:	52400215 	stw	r9,8(r10)
10006970:	40007126 	beq	r8,zero,10006b38 <_free_r+0x258>
10006974:	11400054 	ori	r5,r2,1
10006978:	19400115 	stw	r5,4(r3)
1000697c:	30800015 	stw	r2,0(r6)
10006980:	11408028 	cmpgeui	r5,r2,512
10006984:	28002c1e 	bne	r5,zero,10006a38 <_free_r+0x158>
10006988:	100ad0fa 	srli	r5,r2,3
1000698c:	100cd17a 	srli	r6,r2,5
10006990:	00800044 	movi	r2,1
10006994:	29400044 	addi	r5,r5,1
10006998:	280a90fa 	slli	r5,r5,3
1000699c:	21c00117 	ldw	r7,4(r4)
100069a0:	1184983a 	sll	r2,r2,r6
100069a4:	214b883a 	add	r5,r4,r5
100069a8:	29800017 	ldw	r6,0(r5)
100069ac:	11c4b03a 	or	r2,r2,r7
100069b0:	29fffe04 	addi	r7,r5,-8
100069b4:	19c00315 	stw	r7,12(r3)
100069b8:	19800215 	stw	r6,8(r3)
100069bc:	20800115 	stw	r2,4(r4)
100069c0:	28c00015 	stw	r3,0(r5)
100069c4:	30c00315 	stw	r3,12(r6)
100069c8:	8809883a 	mov	r4,r17
100069cc:	dfc00217 	ldw	ra,8(sp)
100069d0:	dc400117 	ldw	r17,4(sp)
100069d4:	dc000017 	ldw	r16,0(sp)
100069d8:	dec00304 	addi	sp,sp,12
100069dc:	000fc281 	jmpi	1000fc28 <__malloc_unlock>
100069e0:	41c00117 	ldw	r7,4(r8)
100069e4:	39c0004c 	andi	r7,r7,1
100069e8:	38000e1e 	bne	r7,zero,10006a24 <_free_r+0x144>
100069ec:	01c40074 	movhi	r7,4097
100069f0:	1145883a 	add	r2,r2,r5
100069f4:	39cbd504 	addi	r7,r7,12116
100069f8:	31400217 	ldw	r5,8(r6)
100069fc:	12400054 	ori	r9,r2,1
10006a00:	1891883a 	add	r8,r3,r2
10006a04:	29c05226 	beq	r5,r7,10006b50 <_free_r+0x270>
10006a08:	31800317 	ldw	r6,12(r6)
10006a0c:	29800315 	stw	r6,12(r5)
10006a10:	31400215 	stw	r5,8(r6)
10006a14:	1a400115 	stw	r9,4(r3)
10006a18:	40800015 	stw	r2,0(r8)
10006a1c:	003fd806 	br	10006980 <_free_r+0xa0>
10006a20:	f800283a 	ret
10006a24:	11400054 	ori	r5,r2,1
10006a28:	817fff15 	stw	r5,-4(r16)
10006a2c:	30800015 	stw	r2,0(r6)
10006a30:	11408028 	cmpgeui	r5,r2,512
10006a34:	283fd426 	beq	r5,zero,10006988 <_free_r+0xa8>
10006a38:	100ad27a 	srli	r5,r2,9
10006a3c:	29800168 	cmpgeui	r6,r5,5
10006a40:	3000341e 	bne	r6,zero,10006b14 <_free_r+0x234>
10006a44:	100ad1ba 	srli	r5,r2,6
10006a48:	29800e44 	addi	r6,r5,57
10006a4c:	300c90fa 	slli	r6,r6,3
10006a50:	29c00e04 	addi	r7,r5,56
10006a54:	218d883a 	add	r6,r4,r6
10006a58:	31400017 	ldw	r5,0(r6)
10006a5c:	31bffe04 	addi	r6,r6,-8
10006a60:	31404226 	beq	r6,r5,10006b6c <_free_r+0x28c>
10006a64:	01ffff04 	movi	r7,-4
10006a68:	29000117 	ldw	r4,4(r5)
10006a6c:	21c8703a 	and	r4,r4,r7
10006a70:	1100022e 	bgeu	r2,r4,10006a7c <_free_r+0x19c>
10006a74:	29400217 	ldw	r5,8(r5)
10006a78:	317ffb1e 	bne	r6,r5,10006a68 <_free_r+0x188>
10006a7c:	29800317 	ldw	r6,12(r5)
10006a80:	19800315 	stw	r6,12(r3)
10006a84:	19400215 	stw	r5,8(r3)
10006a88:	30c00215 	stw	r3,8(r6)
10006a8c:	28c00315 	stw	r3,12(r5)
10006a90:	003fcd06 	br	100069c8 <_free_r+0xe8>
10006a94:	40004d1e 	bne	r8,zero,10006bcc <_free_r+0x2ec>
10006a98:	31000317 	ldw	r4,12(r6)
10006a9c:	31800217 	ldw	r6,8(r6)
10006aa0:	2885883a 	add	r2,r5,r2
10006aa4:	11400054 	ori	r5,r2,1
10006aa8:	31000315 	stw	r4,12(r6)
10006aac:	21800215 	stw	r6,8(r4)
10006ab0:	19400115 	stw	r5,4(r3)
10006ab4:	1887883a 	add	r3,r3,r2
10006ab8:	18800015 	stw	r2,0(r3)
10006abc:	003fc206 	br	100069c8 <_free_r+0xe8>
10006ac0:	39c0004c 	andi	r7,r7,1
10006ac4:	1145883a 	add	r2,r2,r5
10006ac8:	3800071e 	bne	r7,zero,10006ae8 <_free_r+0x208>
10006acc:	81fffe17 	ldw	r7,-8(r16)
10006ad0:	19c7c83a 	sub	r3,r3,r7
10006ad4:	19400317 	ldw	r5,12(r3)
10006ad8:	19800217 	ldw	r6,8(r3)
10006adc:	11c5883a 	add	r2,r2,r7
10006ae0:	31400315 	stw	r5,12(r6)
10006ae4:	29800215 	stw	r6,8(r5)
10006ae8:	01440074 	movhi	r5,4097
10006aec:	11800054 	ori	r6,r2,1
10006af0:	2951b517 	ldw	r5,18132(r5)
10006af4:	19800115 	stw	r6,4(r3)
10006af8:	20c00215 	stw	r3,8(r4)
10006afc:	117fb236 	bltu	r2,r5,100069c8 <_free_r+0xe8>
10006b00:	00840074 	movhi	r2,4097
10006b04:	1158b917 	ldw	r5,25316(r2)
10006b08:	8809883a 	mov	r4,r17
10006b0c:	00067c40 	call	100067c4 <_malloc_trim_r>
10006b10:	003fad06 	br	100069c8 <_free_r+0xe8>
10006b14:	29800568 	cmpgeui	r6,r5,21
10006b18:	30000926 	beq	r6,zero,10006b40 <_free_r+0x260>
10006b1c:	29801568 	cmpgeui	r6,r5,85
10006b20:	3000191e 	bne	r6,zero,10006b88 <_free_r+0x2a8>
10006b24:	100ad33a 	srli	r5,r2,12
10006b28:	29801bc4 	addi	r6,r5,111
10006b2c:	300c90fa 	slli	r6,r6,3
10006b30:	29c01b84 	addi	r7,r5,110
10006b34:	003fc706 	br	10006a54 <_free_r+0x174>
10006b38:	1145883a 	add	r2,r2,r5
10006b3c:	003fae06 	br	100069f8 <_free_r+0x118>
10006b40:	29801704 	addi	r6,r5,92
10006b44:	300c90fa 	slli	r6,r6,3
10006b48:	29c016c4 	addi	r7,r5,91
10006b4c:	003fc106 	br	10006a54 <_free_r+0x174>
10006b50:	20c00515 	stw	r3,20(r4)
10006b54:	20c00415 	stw	r3,16(r4)
10006b58:	19c00315 	stw	r7,12(r3)
10006b5c:	19c00215 	stw	r7,8(r3)
10006b60:	1a400115 	stw	r9,4(r3)
10006b64:	40800015 	stw	r2,0(r8)
10006b68:	003f9706 	br	100069c8 <_free_r+0xe8>
10006b6c:	380fd0ba 	srai	r7,r7,2
10006b70:	00800044 	movi	r2,1
10006b74:	22000117 	ldw	r8,4(r4)
10006b78:	11ce983a 	sll	r7,r2,r7
10006b7c:	3a0eb03a 	or	r7,r7,r8
10006b80:	21c00115 	stw	r7,4(r4)
10006b84:	003fbe06 	br	10006a80 <_free_r+0x1a0>
10006b88:	29805568 	cmpgeui	r6,r5,341
10006b8c:	3000051e 	bne	r6,zero,10006ba4 <_free_r+0x2c4>
10006b90:	100ad3fa 	srli	r5,r2,15
10006b94:	29801e04 	addi	r6,r5,120
10006b98:	300c90fa 	slli	r6,r6,3
10006b9c:	29c01dc4 	addi	r7,r5,119
10006ba0:	003fac06 	br	10006a54 <_free_r+0x174>
10006ba4:	29415568 	cmpgeui	r5,r5,1365
10006ba8:	2800051e 	bne	r5,zero,10006bc0 <_free_r+0x2e0>
10006bac:	100ad4ba 	srli	r5,r2,18
10006bb0:	29801f44 	addi	r6,r5,125
10006bb4:	300c90fa 	slli	r6,r6,3
10006bb8:	29c01f04 	addi	r7,r5,124
10006bbc:	003fa506 	br	10006a54 <_free_r+0x174>
10006bc0:	0180fe04 	movi	r6,1016
10006bc4:	01c01f84 	movi	r7,126
10006bc8:	003fa206 	br	10006a54 <_free_r+0x174>
10006bcc:	11000054 	ori	r4,r2,1
10006bd0:	19000115 	stw	r4,4(r3)
10006bd4:	30800015 	stw	r2,0(r6)
10006bd8:	003f7b06 	br	100069c8 <_free_r+0xe8>

10006bdc <__sfvwrite_r>:
10006bdc:	30800217 	ldw	r2,8(r6)
10006be0:	1000a326 	beq	r2,zero,10006e70 <__sfvwrite_r+0x294>
10006be4:	29c0030b 	ldhu	r7,12(r5)
10006be8:	defff404 	addi	sp,sp,-48
10006bec:	ddc00915 	stw	r23,36(sp)
10006bf0:	dd400715 	stw	r21,28(sp)
10006bf4:	dc000215 	stw	r16,8(sp)
10006bf8:	dfc00b15 	stw	ra,44(sp)
10006bfc:	df000a15 	stw	fp,40(sp)
10006c00:	dd800815 	stw	r22,32(sp)
10006c04:	dd000615 	stw	r20,24(sp)
10006c08:	dcc00515 	stw	r19,20(sp)
10006c0c:	dc800415 	stw	r18,16(sp)
10006c10:	dc400315 	stw	r17,12(sp)
10006c14:	3880020c 	andi	r2,r7,8
10006c18:	302f883a 	mov	r23,r6
10006c1c:	202b883a 	mov	r21,r4
10006c20:	2821883a 	mov	r16,r5
10006c24:	10002226 	beq	r2,zero,10006cb0 <__sfvwrite_r+0xd4>
10006c28:	28800417 	ldw	r2,16(r5)
10006c2c:	10002026 	beq	r2,zero,10006cb0 <__sfvwrite_r+0xd4>
10006c30:	3880008c 	andi	r2,r7,2
10006c34:	bc400017 	ldw	r17,0(r23)
10006c38:	10002526 	beq	r2,zero,10006cd0 <__sfvwrite_r+0xf4>
10006c3c:	80800917 	ldw	r2,36(r16)
10006c40:	81400717 	ldw	r5,28(r16)
10006c44:	05200034 	movhi	r20,32768
10006c48:	0027883a 	mov	r19,zero
10006c4c:	0025883a 	mov	r18,zero
10006c50:	a53f0004 	addi	r20,r20,-1024
10006c54:	980d883a 	mov	r6,r19
10006c58:	a809883a 	mov	r4,r21
10006c5c:	90001026 	beq	r18,zero,10006ca0 <__sfvwrite_r+0xc4>
10006c60:	900f883a 	mov	r7,r18
10006c64:	a480012e 	bgeu	r20,r18,10006c6c <__sfvwrite_r+0x90>
10006c68:	a00f883a 	mov	r7,r20
10006c6c:	103ee83a 	callr	r2
10006c70:	00807a0e 	bge	zero,r2,10006e5c <__sfvwrite_r+0x280>
10006c74:	b9000217 	ldw	r4,8(r23)
10006c78:	98a7883a 	add	r19,r19,r2
10006c7c:	90a5c83a 	sub	r18,r18,r2
10006c80:	2085c83a 	sub	r2,r4,r2
10006c84:	b8800215 	stw	r2,8(r23)
10006c88:	10006326 	beq	r2,zero,10006e18 <__sfvwrite_r+0x23c>
10006c8c:	80800917 	ldw	r2,36(r16)
10006c90:	81400717 	ldw	r5,28(r16)
10006c94:	980d883a 	mov	r6,r19
10006c98:	a809883a 	mov	r4,r21
10006c9c:	903ff01e 	bne	r18,zero,10006c60 <__sfvwrite_r+0x84>
10006ca0:	8cc00017 	ldw	r19,0(r17)
10006ca4:	8c800117 	ldw	r18,4(r17)
10006ca8:	8c400204 	addi	r17,r17,8
10006cac:	003fe906 	br	10006c54 <__sfvwrite_r+0x78>
10006cb0:	800b883a 	mov	r5,r16
10006cb4:	a809883a 	mov	r4,r21
10006cb8:	00046400 	call	10004640 <__swsetup_r>
10006cbc:	1000f71e 	bne	r2,zero,1000709c <__sfvwrite_r+0x4c0>
10006cc0:	81c0030b 	ldhu	r7,12(r16)
10006cc4:	bc400017 	ldw	r17,0(r23)
10006cc8:	3880008c 	andi	r2,r7,2
10006ccc:	103fdb1e 	bne	r2,zero,10006c3c <__sfvwrite_r+0x60>
10006cd0:	3880004c 	andi	r2,r7,1
10006cd4:	84800217 	ldw	r18,8(r16)
10006cd8:	82000017 	ldw	r8,0(r16)
10006cdc:	1000661e 	bne	r2,zero,10006e78 <__sfvwrite_r+0x29c>
10006ce0:	00a00034 	movhi	r2,32768
10006ce4:	10bfff84 	addi	r2,r2,-2
10006ce8:	00e00034 	movhi	r3,32768
10006cec:	d8800015 	stw	r2,0(sp)
10006cf0:	18bfffc4 	addi	r2,r3,-1
10006cf4:	0039883a 	mov	fp,zero
10006cf8:	0027883a 	mov	r19,zero
10006cfc:	d8800115 	stw	r2,4(sp)
10006d00:	98004126 	beq	r19,zero,10006e08 <__sfvwrite_r+0x22c>
10006d04:	3880800c 	andi	r2,r7,512
10006d08:	10009726 	beq	r2,zero,10006f68 <__sfvwrite_r+0x38c>
10006d0c:	902d883a 	mov	r22,r18
10006d10:	9c80be36 	bltu	r19,r18,1000700c <__sfvwrite_r+0x430>
10006d14:	3881200c 	andi	r2,r7,1152
10006d18:	10002626 	beq	r2,zero,10006db4 <__sfvwrite_r+0x1d8>
10006d1c:	81800517 	ldw	r6,20(r16)
10006d20:	81400417 	ldw	r5,16(r16)
10006d24:	98800044 	addi	r2,r19,1
10006d28:	3189883a 	add	r4,r6,r6
10006d2c:	2189883a 	add	r4,r4,r6
10006d30:	2028d7fa 	srli	r20,r4,31
10006d34:	4165c83a 	sub	r18,r8,r5
10006d38:	1485883a 	add	r2,r2,r18
10006d3c:	a109883a 	add	r4,r20,r4
10006d40:	2029d07a 	srai	r20,r4,1
10006d44:	a00d883a 	mov	r6,r20
10006d48:	a080022e 	bgeu	r20,r2,10006d54 <__sfvwrite_r+0x178>
10006d4c:	1029883a 	mov	r20,r2
10006d50:	100d883a 	mov	r6,r2
10006d54:	39c1000c 	andi	r7,r7,1024
10006d58:	3800c026 	beq	r7,zero,1000705c <__sfvwrite_r+0x480>
10006d5c:	a809883a 	mov	r4,r21
10006d60:	300b883a 	mov	r5,r6
10006d64:	000744c0 	call	1000744c <_malloc_r>
10006d68:	1009883a 	mov	r4,r2
10006d6c:	1000c726 	beq	r2,zero,1000708c <__sfvwrite_r+0x4b0>
10006d70:	81400417 	ldw	r5,16(r16)
10006d74:	900d883a 	mov	r6,r18
10006d78:	0007cfc0 	call	10007cfc <memcpy>
10006d7c:	1009883a 	mov	r4,r2
10006d80:	8080030b 	ldhu	r2,12(r16)
10006d84:	00fedfc4 	movi	r3,-1153
10006d88:	10c4703a 	and	r2,r2,r3
10006d8c:	10802014 	ori	r2,r2,128
10006d90:	8080030d 	sth	r2,12(r16)
10006d94:	2491883a 	add	r8,r4,r18
10006d98:	a485c83a 	sub	r2,r20,r18
10006d9c:	81000415 	stw	r4,16(r16)
10006da0:	82000015 	stw	r8,0(r16)
10006da4:	85000515 	stw	r20,20(r16)
10006da8:	9825883a 	mov	r18,r19
10006dac:	80800215 	stw	r2,8(r16)
10006db0:	982d883a 	mov	r22,r19
10006db4:	4009883a 	mov	r4,r8
10006db8:	b00d883a 	mov	r6,r22
10006dbc:	e00b883a 	mov	r5,fp
10006dc0:	0007dfc0 	call	10007dfc <memmove>
10006dc4:	81000217 	ldw	r4,8(r16)
10006dc8:	80800017 	ldw	r2,0(r16)
10006dcc:	9829883a 	mov	r20,r19
10006dd0:	24a5c83a 	sub	r18,r4,r18
10006dd4:	1585883a 	add	r2,r2,r22
10006dd8:	84800215 	stw	r18,8(r16)
10006ddc:	80800015 	stw	r2,0(r16)
10006de0:	0027883a 	mov	r19,zero
10006de4:	b8800217 	ldw	r2,8(r23)
10006de8:	e539883a 	add	fp,fp,r20
10006dec:	1529c83a 	sub	r20,r2,r20
10006df0:	bd000215 	stw	r20,8(r23)
10006df4:	a0000826 	beq	r20,zero,10006e18 <__sfvwrite_r+0x23c>
10006df8:	81c0030b 	ldhu	r7,12(r16)
10006dfc:	84800217 	ldw	r18,8(r16)
10006e00:	82000017 	ldw	r8,0(r16)
10006e04:	983fbf1e 	bne	r19,zero,10006d04 <__sfvwrite_r+0x128>
10006e08:	8f000017 	ldw	fp,0(r17)
10006e0c:	8cc00117 	ldw	r19,4(r17)
10006e10:	8c400204 	addi	r17,r17,8
10006e14:	003fba06 	br	10006d00 <__sfvwrite_r+0x124>
10006e18:	0005883a 	mov	r2,zero
10006e1c:	dfc00b17 	ldw	ra,44(sp)
10006e20:	df000a17 	ldw	fp,40(sp)
10006e24:	ddc00917 	ldw	r23,36(sp)
10006e28:	dd800817 	ldw	r22,32(sp)
10006e2c:	dd400717 	ldw	r21,28(sp)
10006e30:	dd000617 	ldw	r20,24(sp)
10006e34:	dcc00517 	ldw	r19,20(sp)
10006e38:	dc800417 	ldw	r18,16(sp)
10006e3c:	dc400317 	ldw	r17,12(sp)
10006e40:	dc000217 	ldw	r16,8(sp)
10006e44:	dec00c04 	addi	sp,sp,48
10006e48:	f800283a 	ret
10006e4c:	800b883a 	mov	r5,r16
10006e50:	a809883a 	mov	r4,r21
10006e54:	00063340 	call	10006334 <_fflush_r>
10006e58:	10002026 	beq	r2,zero,10006edc <__sfvwrite_r+0x300>
10006e5c:	8080030b 	ldhu	r2,12(r16)
10006e60:	10801014 	ori	r2,r2,64
10006e64:	8080030d 	sth	r2,12(r16)
10006e68:	00bfffc4 	movi	r2,-1
10006e6c:	003feb06 	br	10006e1c <__sfvwrite_r+0x240>
10006e70:	0005883a 	mov	r2,zero
10006e74:	f800283a 	ret
10006e78:	002d883a 	mov	r22,zero
10006e7c:	0027883a 	mov	r19,zero
10006e80:	0005883a 	mov	r2,zero
10006e84:	0039883a 	mov	fp,zero
10006e88:	b0001d26 	beq	r22,zero,10006f00 <__sfvwrite_r+0x324>
10006e8c:	10002026 	beq	r2,zero,10006f10 <__sfvwrite_r+0x334>
10006e90:	9829883a 	mov	r20,r19
10006e94:	b500012e 	bgeu	r22,r20,10006e9c <__sfvwrite_r+0x2c0>
10006e98:	b029883a 	mov	r20,r22
10006e9c:	80800417 	ldw	r2,16(r16)
10006ea0:	81c00517 	ldw	r7,20(r16)
10006ea4:	1200022e 	bgeu	r2,r8,10006eb0 <__sfvwrite_r+0x2d4>
10006ea8:	3ca5883a 	add	r18,r7,r18
10006eac:	95002216 	blt	r18,r20,10006f38 <__sfvwrite_r+0x35c>
10006eb0:	a1c05916 	blt	r20,r7,10007018 <__sfvwrite_r+0x43c>
10006eb4:	80800917 	ldw	r2,36(r16)
10006eb8:	81400717 	ldw	r5,28(r16)
10006ebc:	e00d883a 	mov	r6,fp
10006ec0:	a809883a 	mov	r4,r21
10006ec4:	103ee83a 	callr	r2
10006ec8:	1025883a 	mov	r18,r2
10006ecc:	00bfe30e 	bge	zero,r2,10006e5c <__sfvwrite_r+0x280>
10006ed0:	9ca7c83a 	sub	r19,r19,r18
10006ed4:	983fdd26 	beq	r19,zero,10006e4c <__sfvwrite_r+0x270>
10006ed8:	00800044 	movi	r2,1
10006edc:	b9800217 	ldw	r6,8(r23)
10006ee0:	e4b9883a 	add	fp,fp,r18
10006ee4:	b4adc83a 	sub	r22,r22,r18
10006ee8:	34a5c83a 	sub	r18,r6,r18
10006eec:	bc800215 	stw	r18,8(r23)
10006ef0:	903fc926 	beq	r18,zero,10006e18 <__sfvwrite_r+0x23c>
10006ef4:	84800217 	ldw	r18,8(r16)
10006ef8:	82000017 	ldw	r8,0(r16)
10006efc:	b03fe31e 	bne	r22,zero,10006e8c <__sfvwrite_r+0x2b0>
10006f00:	8d800117 	ldw	r22,4(r17)
10006f04:	8f000017 	ldw	fp,0(r17)
10006f08:	8c400204 	addi	r17,r17,8
10006f0c:	b03ffc26 	beq	r22,zero,10006f00 <__sfvwrite_r+0x324>
10006f10:	b00d883a 	mov	r6,r22
10006f14:	01400284 	movi	r5,10
10006f18:	e009883a 	mov	r4,fp
10006f1c:	da000015 	stw	r8,0(sp)
10006f20:	0007c2c0 	call	10007c2c <memchr>
10006f24:	da000017 	ldw	r8,0(sp)
10006f28:	10004926 	beq	r2,zero,10007050 <__sfvwrite_r+0x474>
10006f2c:	10800044 	addi	r2,r2,1
10006f30:	1727c83a 	sub	r19,r2,fp
10006f34:	003fd606 	br	10006e90 <__sfvwrite_r+0x2b4>
10006f38:	e00b883a 	mov	r5,fp
10006f3c:	4009883a 	mov	r4,r8
10006f40:	900d883a 	mov	r6,r18
10006f44:	0007dfc0 	call	10007dfc <memmove>
10006f48:	80800017 	ldw	r2,0(r16)
10006f4c:	800b883a 	mov	r5,r16
10006f50:	a809883a 	mov	r4,r21
10006f54:	1485883a 	add	r2,r2,r18
10006f58:	80800015 	stw	r2,0(r16)
10006f5c:	00063340 	call	10006334 <_fflush_r>
10006f60:	103fdb26 	beq	r2,zero,10006ed0 <__sfvwrite_r+0x2f4>
10006f64:	003fbd06 	br	10006e5c <__sfvwrite_r+0x280>
10006f68:	80800417 	ldw	r2,16(r16)
10006f6c:	12001436 	bltu	r2,r8,10006fc0 <__sfvwrite_r+0x3e4>
10006f70:	85000517 	ldw	r20,20(r16)
10006f74:	9d001236 	bltu	r19,r20,10006fc0 <__sfvwrite_r+0x3e4>
10006f78:	d8800017 	ldw	r2,0(sp)
10006f7c:	14c0322e 	bgeu	r2,r19,10007048 <__sfvwrite_r+0x46c>
10006f80:	d9000117 	ldw	r4,4(sp)
10006f84:	a00b883a 	mov	r5,r20
10006f88:	000cb7c0 	call	1000cb7c <__divsi3>
10006f8c:	a00b883a 	mov	r5,r20
10006f90:	1009883a 	mov	r4,r2
10006f94:	000cd300 	call	1000cd30 <__mulsi3>
10006f98:	82000917 	ldw	r8,36(r16)
10006f9c:	81400717 	ldw	r5,28(r16)
10006fa0:	100f883a 	mov	r7,r2
10006fa4:	e00d883a 	mov	r6,fp
10006fa8:	a809883a 	mov	r4,r21
10006fac:	403ee83a 	callr	r8
10006fb0:	1029883a 	mov	r20,r2
10006fb4:	00bfa90e 	bge	zero,r2,10006e5c <__sfvwrite_r+0x280>
10006fb8:	9d27c83a 	sub	r19,r19,r20
10006fbc:	003f8906 	br	10006de4 <__sfvwrite_r+0x208>
10006fc0:	9029883a 	mov	r20,r18
10006fc4:	9c80012e 	bgeu	r19,r18,10006fcc <__sfvwrite_r+0x3f0>
10006fc8:	9829883a 	mov	r20,r19
10006fcc:	4009883a 	mov	r4,r8
10006fd0:	a00d883a 	mov	r6,r20
10006fd4:	e00b883a 	mov	r5,fp
10006fd8:	0007dfc0 	call	10007dfc <memmove>
10006fdc:	80800217 	ldw	r2,8(r16)
10006fe0:	81000017 	ldw	r4,0(r16)
10006fe4:	1505c83a 	sub	r2,r2,r20
10006fe8:	2509883a 	add	r4,r4,r20
10006fec:	80800215 	stw	r2,8(r16)
10006ff0:	81000015 	stw	r4,0(r16)
10006ff4:	103ff01e 	bne	r2,zero,10006fb8 <__sfvwrite_r+0x3dc>
10006ff8:	800b883a 	mov	r5,r16
10006ffc:	a809883a 	mov	r4,r21
10007000:	00063340 	call	10006334 <_fflush_r>
10007004:	103fec26 	beq	r2,zero,10006fb8 <__sfvwrite_r+0x3dc>
10007008:	003f9406 	br	10006e5c <__sfvwrite_r+0x280>
1000700c:	9825883a 	mov	r18,r19
10007010:	982d883a 	mov	r22,r19
10007014:	003f6706 	br	10006db4 <__sfvwrite_r+0x1d8>
10007018:	4009883a 	mov	r4,r8
1000701c:	a00d883a 	mov	r6,r20
10007020:	e00b883a 	mov	r5,fp
10007024:	0007dfc0 	call	10007dfc <memmove>
10007028:	81000217 	ldw	r4,8(r16)
1000702c:	80800017 	ldw	r2,0(r16)
10007030:	a025883a 	mov	r18,r20
10007034:	2509c83a 	sub	r4,r4,r20
10007038:	1505883a 	add	r2,r2,r20
1000703c:	81000215 	stw	r4,8(r16)
10007040:	80800015 	stw	r2,0(r16)
10007044:	003fa206 	br	10006ed0 <__sfvwrite_r+0x2f4>
10007048:	9809883a 	mov	r4,r19
1000704c:	003fcd06 	br	10006f84 <__sfvwrite_r+0x3a8>
10007050:	b5000044 	addi	r20,r22,1
10007054:	a027883a 	mov	r19,r20
10007058:	003f8e06 	br	10006e94 <__sfvwrite_r+0x2b8>
1000705c:	a809883a 	mov	r4,r21
10007060:	00092080 	call	10009208 <_realloc_r>
10007064:	1009883a 	mov	r4,r2
10007068:	103f4a1e 	bne	r2,zero,10006d94 <__sfvwrite_r+0x1b8>
1000706c:	81400417 	ldw	r5,16(r16)
10007070:	a809883a 	mov	r4,r21
10007074:	00068e00 	call	100068e0 <_free_r>
10007078:	8080030b 	ldhu	r2,12(r16)
1000707c:	00c00304 	movi	r3,12
10007080:	a8c00015 	stw	r3,0(r21)
10007084:	10bfdfcc 	andi	r2,r2,65407
10007088:	003f7506 	br	10006e60 <__sfvwrite_r+0x284>
1000708c:	00c00304 	movi	r3,12
10007090:	8080030b 	ldhu	r2,12(r16)
10007094:	a8c00015 	stw	r3,0(r21)
10007098:	003f7106 	br	10006e60 <__sfvwrite_r+0x284>
1000709c:	00bfffc4 	movi	r2,-1
100070a0:	003f5e06 	br	10006e1c <__sfvwrite_r+0x240>

100070a4 <_fwalk>:
100070a4:	defffa04 	addi	sp,sp,-24
100070a8:	dd000415 	stw	r20,16(sp)
100070ac:	dcc00315 	stw	r19,12(sp)
100070b0:	dc800215 	stw	r18,8(sp)
100070b4:	dfc00515 	stw	ra,20(sp)
100070b8:	dc400115 	stw	r17,4(sp)
100070bc:	dc000015 	stw	r16,0(sp)
100070c0:	2827883a 	mov	r19,r5
100070c4:	2480b804 	addi	r18,r4,736
100070c8:	0029883a 	mov	r20,zero
100070cc:	94400117 	ldw	r17,4(r18)
100070d0:	94000217 	ldw	r16,8(r18)
100070d4:	8c7fffc4 	addi	r17,r17,-1
100070d8:	88000d16 	blt	r17,zero,10007110 <_fwalk+0x6c>
100070dc:	8080030b 	ldhu	r2,12(r16)
100070e0:	8c7fffc4 	addi	r17,r17,-1
100070e4:	108000b0 	cmpltui	r2,r2,2
100070e8:	1000061e 	bne	r2,zero,10007104 <_fwalk+0x60>
100070ec:	8080038f 	ldh	r2,14(r16)
100070f0:	8009883a 	mov	r4,r16
100070f4:	10bfffe0 	cmpeqi	r2,r2,-1
100070f8:	1000021e 	bne	r2,zero,10007104 <_fwalk+0x60>
100070fc:	983ee83a 	callr	r19
10007100:	a0a8b03a 	or	r20,r20,r2
10007104:	88bfffd8 	cmpnei	r2,r17,-1
10007108:	84001a04 	addi	r16,r16,104
1000710c:	103ff31e 	bne	r2,zero,100070dc <_fwalk+0x38>
10007110:	94800017 	ldw	r18,0(r18)
10007114:	903fed1e 	bne	r18,zero,100070cc <_fwalk+0x28>
10007118:	a005883a 	mov	r2,r20
1000711c:	dfc00517 	ldw	ra,20(sp)
10007120:	dd000417 	ldw	r20,16(sp)
10007124:	dcc00317 	ldw	r19,12(sp)
10007128:	dc800217 	ldw	r18,8(sp)
1000712c:	dc400117 	ldw	r17,4(sp)
10007130:	dc000017 	ldw	r16,0(sp)
10007134:	dec00604 	addi	sp,sp,24
10007138:	f800283a 	ret

1000713c <_fwalk_reent>:
1000713c:	defff904 	addi	sp,sp,-28
10007140:	dd400515 	stw	r21,20(sp)
10007144:	dd000415 	stw	r20,16(sp)
10007148:	dcc00315 	stw	r19,12(sp)
1000714c:	dc800215 	stw	r18,8(sp)
10007150:	dfc00615 	stw	ra,24(sp)
10007154:	dc400115 	stw	r17,4(sp)
10007158:	dc000015 	stw	r16,0(sp)
1000715c:	202b883a 	mov	r21,r4
10007160:	2827883a 	mov	r19,r5
10007164:	2480b804 	addi	r18,r4,736
10007168:	0029883a 	mov	r20,zero
1000716c:	94400117 	ldw	r17,4(r18)
10007170:	94000217 	ldw	r16,8(r18)
10007174:	8c7fffc4 	addi	r17,r17,-1
10007178:	88000e16 	blt	r17,zero,100071b4 <_fwalk_reent+0x78>
1000717c:	8080030b 	ldhu	r2,12(r16)
10007180:	8c7fffc4 	addi	r17,r17,-1
10007184:	108000b0 	cmpltui	r2,r2,2
10007188:	1000071e 	bne	r2,zero,100071a8 <_fwalk_reent+0x6c>
1000718c:	8080038f 	ldh	r2,14(r16)
10007190:	800b883a 	mov	r5,r16
10007194:	a809883a 	mov	r4,r21
10007198:	10bfffe0 	cmpeqi	r2,r2,-1
1000719c:	1000021e 	bne	r2,zero,100071a8 <_fwalk_reent+0x6c>
100071a0:	983ee83a 	callr	r19
100071a4:	a0a8b03a 	or	r20,r20,r2
100071a8:	88bfffd8 	cmpnei	r2,r17,-1
100071ac:	84001a04 	addi	r16,r16,104
100071b0:	103ff21e 	bne	r2,zero,1000717c <_fwalk_reent+0x40>
100071b4:	94800017 	ldw	r18,0(r18)
100071b8:	903fec1e 	bne	r18,zero,1000716c <_fwalk_reent+0x30>
100071bc:	a005883a 	mov	r2,r20
100071c0:	dfc00617 	ldw	ra,24(sp)
100071c4:	dd400517 	ldw	r21,20(sp)
100071c8:	dd000417 	ldw	r20,16(sp)
100071cc:	dcc00317 	ldw	r19,12(sp)
100071d0:	dc800217 	ldw	r18,8(sp)
100071d4:	dc400117 	ldw	r17,4(sp)
100071d8:	dc000017 	ldw	r16,0(sp)
100071dc:	dec00704 	addi	sp,sp,28
100071e0:	f800283a 	ret

100071e4 <__localeconv_l>:
100071e4:	20803c04 	addi	r2,r4,240
100071e8:	f800283a 	ret

100071ec <_localeconv_r>:
100071ec:	00840074 	movhi	r2,4097
100071f0:	108d1104 	addi	r2,r2,13380
100071f4:	f800283a 	ret

100071f8 <localeconv>:
100071f8:	00840074 	movhi	r2,4097
100071fc:	108d1104 	addi	r2,r2,13380
10007200:	f800283a 	ret

10007204 <__smakebuf_r>:
10007204:	2880030b 	ldhu	r2,12(r5)
10007208:	deffe804 	addi	sp,sp,-96
1000720c:	dc001215 	stw	r16,72(sp)
10007210:	dfc01715 	stw	ra,92(sp)
10007214:	dd001615 	stw	r20,88(sp)
10007218:	dcc01515 	stw	r19,84(sp)
1000721c:	dc801415 	stw	r18,80(sp)
10007220:	dc401315 	stw	r17,76(sp)
10007224:	10c0008c 	andi	r3,r2,2
10007228:	2821883a 	mov	r16,r5
1000722c:	18000d26 	beq	r3,zero,10007264 <__smakebuf_r+0x60>
10007230:	288010c4 	addi	r2,r5,67
10007234:	28800015 	stw	r2,0(r5)
10007238:	28800415 	stw	r2,16(r5)
1000723c:	00800044 	movi	r2,1
10007240:	28800515 	stw	r2,20(r5)
10007244:	dfc01717 	ldw	ra,92(sp)
10007248:	dd001617 	ldw	r20,88(sp)
1000724c:	dcc01517 	ldw	r19,84(sp)
10007250:	dc801417 	ldw	r18,80(sp)
10007254:	dc401317 	ldw	r17,76(sp)
10007258:	dc001217 	ldw	r16,72(sp)
1000725c:	dec01804 	addi	sp,sp,96
10007260:	f800283a 	ret
10007264:	2940038f 	ldh	r5,14(r5)
10007268:	2023883a 	mov	r17,r4
1000726c:	28002816 	blt	r5,zero,10007310 <__smakebuf_r+0x10c>
10007270:	d80d883a 	mov	r6,sp
10007274:	000b4200 	call	1000b420 <_fstat_r>
10007278:	10002416 	blt	r2,zero,1000730c <__smakebuf_r+0x108>
1000727c:	d8800117 	ldw	r2,4(sp)
10007280:	10bc000c 	andi	r2,r2,61440
10007284:	10880018 	cmpnei	r2,r2,8192
10007288:	1000461e 	bne	r2,zero,100073a4 <__smakebuf_r+0x1a0>
1000728c:	8140038f 	ldh	r5,14(r16)
10007290:	8809883a 	mov	r4,r17
10007294:	000b4800 	call	1000b480 <_isatty_r>
10007298:	10003e26 	beq	r2,zero,10007394 <__smakebuf_r+0x190>
1000729c:	8080030b 	ldhu	r2,12(r16)
100072a0:	80c010c4 	addi	r3,r16,67
100072a4:	80c00015 	stw	r3,0(r16)
100072a8:	10800054 	ori	r2,r2,1
100072ac:	8080030d 	sth	r2,12(r16)
100072b0:	00800044 	movi	r2,1
100072b4:	80c00415 	stw	r3,16(r16)
100072b8:	80800515 	stw	r2,20(r16)
100072bc:	04c00044 	movi	r19,1
100072c0:	05010004 	movi	r20,1024
100072c4:	04820004 	movi	r18,2048
100072c8:	a00b883a 	mov	r5,r20
100072cc:	8809883a 	mov	r4,r17
100072d0:	000744c0 	call	1000744c <_malloc_r>
100072d4:	10001726 	beq	r2,zero,10007334 <__smakebuf_r+0x130>
100072d8:	80c0030b 	ldhu	r3,12(r16)
100072dc:	01040034 	movhi	r4,4096
100072e0:	21190804 	addi	r4,r4,25632
100072e4:	89000f15 	stw	r4,60(r17)
100072e8:	18c02014 	ori	r3,r3,128
100072ec:	80c0030d 	sth	r3,12(r16)
100072f0:	80800015 	stw	r2,0(r16)
100072f4:	80800415 	stw	r2,16(r16)
100072f8:	85000515 	stw	r20,20(r16)
100072fc:	98001d1e 	bne	r19,zero,10007374 <__smakebuf_r+0x170>
10007300:	90c6b03a 	or	r3,r18,r3
10007304:	80c0030d 	sth	r3,12(r16)
10007308:	003fce06 	br	10007244 <__smakebuf_r+0x40>
1000730c:	8080030b 	ldhu	r2,12(r16)
10007310:	1080200c 	andi	r2,r2,128
10007314:	0027883a 	mov	r19,zero
10007318:	10001326 	beq	r2,zero,10007368 <__smakebuf_r+0x164>
1000731c:	05001004 	movi	r20,64
10007320:	a00b883a 	mov	r5,r20
10007324:	8809883a 	mov	r4,r17
10007328:	0025883a 	mov	r18,zero
1000732c:	000744c0 	call	1000744c <_malloc_r>
10007330:	103fe91e 	bne	r2,zero,100072d8 <__smakebuf_r+0xd4>
10007334:	8080030b 	ldhu	r2,12(r16)
10007338:	10c0800c 	andi	r3,r2,512
1000733c:	183fc11e 	bne	r3,zero,10007244 <__smakebuf_r+0x40>
10007340:	00ffff04 	movi	r3,-4
10007344:	10c4703a 	and	r2,r2,r3
10007348:	10800094 	ori	r2,r2,2
1000734c:	80c010c4 	addi	r3,r16,67
10007350:	8080030d 	sth	r2,12(r16)
10007354:	00800044 	movi	r2,1
10007358:	80c00015 	stw	r3,0(r16)
1000735c:	80c00415 	stw	r3,16(r16)
10007360:	80800515 	stw	r2,20(r16)
10007364:	003fb706 	br	10007244 <__smakebuf_r+0x40>
10007368:	05010004 	movi	r20,1024
1000736c:	0025883a 	mov	r18,zero
10007370:	003fd506 	br	100072c8 <__smakebuf_r+0xc4>
10007374:	8140038f 	ldh	r5,14(r16)
10007378:	8809883a 	mov	r4,r17
1000737c:	000b4800 	call	1000b480 <_isatty_r>
10007380:	80c0030b 	ldhu	r3,12(r16)
10007384:	103fde26 	beq	r2,zero,10007300 <__smakebuf_r+0xfc>
10007388:	18ffff0c 	andi	r3,r3,65532
1000738c:	18c00054 	ori	r3,r3,1
10007390:	003fdb06 	br	10007300 <__smakebuf_r+0xfc>
10007394:	04c00044 	movi	r19,1
10007398:	05010004 	movi	r20,1024
1000739c:	04820004 	movi	r18,2048
100073a0:	003fc906 	br	100072c8 <__smakebuf_r+0xc4>
100073a4:	0027883a 	mov	r19,zero
100073a8:	05010004 	movi	r20,1024
100073ac:	04820004 	movi	r18,2048
100073b0:	003fc506 	br	100072c8 <__smakebuf_r+0xc4>

100073b4 <__swhatbuf_r>:
100073b4:	deffea04 	addi	sp,sp,-88
100073b8:	dc001215 	stw	r16,72(sp)
100073bc:	2821883a 	mov	r16,r5
100073c0:	2940038f 	ldh	r5,14(r5)
100073c4:	dc801415 	stw	r18,80(sp)
100073c8:	dc401315 	stw	r17,76(sp)
100073cc:	dfc01515 	stw	ra,84(sp)
100073d0:	3023883a 	mov	r17,r6
100073d4:	3825883a 	mov	r18,r7
100073d8:	28001016 	blt	r5,zero,1000741c <__swhatbuf_r+0x68>
100073dc:	d80d883a 	mov	r6,sp
100073e0:	000b4200 	call	1000b420 <_fstat_r>
100073e4:	10000d16 	blt	r2,zero,1000741c <__swhatbuf_r+0x68>
100073e8:	d8c00117 	ldw	r3,4(sp)
100073ec:	00820004 	movi	r2,2048
100073f0:	18fc000c 	andi	r3,r3,61440
100073f4:	18c80020 	cmpeqi	r3,r3,8192
100073f8:	90c00015 	stw	r3,0(r18)
100073fc:	00c10004 	movi	r3,1024
10007400:	88c00015 	stw	r3,0(r17)
10007404:	dfc01517 	ldw	ra,84(sp)
10007408:	dc801417 	ldw	r18,80(sp)
1000740c:	dc401317 	ldw	r17,76(sp)
10007410:	dc001217 	ldw	r16,72(sp)
10007414:	dec01604 	addi	sp,sp,88
10007418:	f800283a 	ret
1000741c:	8080030b 	ldhu	r2,12(r16)
10007420:	90000015 	stw	zero,0(r18)
10007424:	1080200c 	andi	r2,r2,128
10007428:	10000426 	beq	r2,zero,1000743c <__swhatbuf_r+0x88>
1000742c:	00801004 	movi	r2,64
10007430:	88800015 	stw	r2,0(r17)
10007434:	0005883a 	mov	r2,zero
10007438:	003ff206 	br	10007404 <__swhatbuf_r+0x50>
1000743c:	00810004 	movi	r2,1024
10007440:	88800015 	stw	r2,0(r17)
10007444:	0005883a 	mov	r2,zero
10007448:	003fee06 	br	10007404 <__swhatbuf_r+0x50>

1000744c <_malloc_r>:
1000744c:	defff604 	addi	sp,sp,-40
10007450:	dc400115 	stw	r17,4(sp)
10007454:	2c4002c4 	addi	r17,r5,11
10007458:	dc800215 	stw	r18,8(sp)
1000745c:	dfc00915 	stw	ra,36(sp)
10007460:	df000815 	stw	fp,32(sp)
10007464:	ddc00715 	stw	r23,28(sp)
10007468:	dd800615 	stw	r22,24(sp)
1000746c:	dd400515 	stw	r21,20(sp)
10007470:	dd000415 	stw	r20,16(sp)
10007474:	dcc00315 	stw	r19,12(sp)
10007478:	dc000015 	stw	r16,0(sp)
1000747c:	888005e8 	cmpgeui	r2,r17,23
10007480:	2025883a 	mov	r18,r4
10007484:	10001b1e 	bne	r2,zero,100074f4 <_malloc_r+0xa8>
10007488:	29400468 	cmpgeui	r5,r5,17
1000748c:	2800821e 	bne	r5,zero,10007698 <_malloc_r+0x24c>
10007490:	000fc040 	call	1000fc04 <__malloc_lock>
10007494:	04400404 	movi	r17,16
10007498:	00800604 	movi	r2,24
1000749c:	01c00084 	movi	r7,2
100074a0:	04c40074 	movhi	r19,4097
100074a4:	9ccbd304 	addi	r19,r19,12108
100074a8:	9885883a 	add	r2,r19,r2
100074ac:	14000117 	ldw	r16,4(r2)
100074b0:	10fffe04 	addi	r3,r2,-8
100074b4:	80c08b26 	beq	r16,r3,100076e4 <_malloc_r+0x298>
100074b8:	80800117 	ldw	r2,4(r16)
100074bc:	81000317 	ldw	r4,12(r16)
100074c0:	00ffff04 	movi	r3,-4
100074c4:	10c4703a 	and	r2,r2,r3
100074c8:	81400217 	ldw	r5,8(r16)
100074cc:	8085883a 	add	r2,r16,r2
100074d0:	10c00117 	ldw	r3,4(r2)
100074d4:	29000315 	stw	r4,12(r5)
100074d8:	21400215 	stw	r5,8(r4)
100074dc:	18c00054 	ori	r3,r3,1
100074e0:	10c00115 	stw	r3,4(r2)
100074e4:	9009883a 	mov	r4,r18
100074e8:	000fc280 	call	1000fc28 <__malloc_unlock>
100074ec:	80800204 	addi	r2,r16,8
100074f0:	00006c06 	br	100076a4 <_malloc_r+0x258>
100074f4:	00bffe04 	movi	r2,-8
100074f8:	88a2703a 	and	r17,r17,r2
100074fc:	88006616 	blt	r17,zero,10007698 <_malloc_r+0x24c>
10007500:	89406536 	bltu	r17,r5,10007698 <_malloc_r+0x24c>
10007504:	000fc040 	call	1000fc04 <__malloc_lock>
10007508:	88807e28 	cmpgeui	r2,r17,504
1000750c:	10012226 	beq	r2,zero,10007998 <_malloc_r+0x54c>
10007510:	8804d27a 	srli	r2,r17,9
10007514:	10006f26 	beq	r2,zero,100076d4 <_malloc_r+0x288>
10007518:	10c00168 	cmpgeui	r3,r2,5
1000751c:	1800fe1e 	bne	r3,zero,10007918 <_malloc_r+0x4cc>
10007520:	8804d1ba 	srli	r2,r17,6
10007524:	11c00e44 	addi	r7,r2,57
10007528:	380890fa 	slli	r4,r7,3
1000752c:	12000e04 	addi	r8,r2,56
10007530:	04c40074 	movhi	r19,4097
10007534:	9ccbd304 	addi	r19,r19,12108
10007538:	9909883a 	add	r4,r19,r4
1000753c:	24000117 	ldw	r16,4(r4)
10007540:	213ffe04 	addi	r4,r4,-8
10007544:	24000b26 	beq	r4,r16,10007574 <_malloc_r+0x128>
10007548:	01bfff04 	movi	r6,-4
1000754c:	00000306 	br	1000755c <_malloc_r+0x110>
10007550:	1800d60e 	bge	r3,zero,100078ac <_malloc_r+0x460>
10007554:	84000317 	ldw	r16,12(r16)
10007558:	24000626 	beq	r4,r16,10007574 <_malloc_r+0x128>
1000755c:	80800117 	ldw	r2,4(r16)
10007560:	1184703a 	and	r2,r2,r6
10007564:	1447c83a 	sub	r3,r2,r17
10007568:	19400408 	cmpgei	r5,r3,16
1000756c:	283ff826 	beq	r5,zero,10007550 <_malloc_r+0x104>
10007570:	400f883a 	mov	r7,r8
10007574:	9c000417 	ldw	r16,16(r19)
10007578:	02440074 	movhi	r9,4097
1000757c:	4a4bd504 	addi	r9,r9,12116
10007580:	82405f26 	beq	r16,r9,10007700 <_malloc_r+0x2b4>
10007584:	80c00117 	ldw	r3,4(r16)
10007588:	00bfff04 	movi	r2,-4
1000758c:	1884703a 	and	r2,r3,r2
10007590:	1447c83a 	sub	r3,r2,r17
10007594:	19000410 	cmplti	r4,r3,16
10007598:	20010a26 	beq	r4,zero,100079c4 <_malloc_r+0x578>
1000759c:	9a400515 	stw	r9,20(r19)
100075a0:	9a400415 	stw	r9,16(r19)
100075a4:	1800ff0e 	bge	r3,zero,100079a4 <_malloc_r+0x558>
100075a8:	10c08028 	cmpgeui	r3,r2,512
100075ac:	1800c11e 	bne	r3,zero,100078b4 <_malloc_r+0x468>
100075b0:	1006d0fa 	srli	r3,r2,3
100075b4:	1008d17a 	srli	r4,r2,5
100075b8:	00800044 	movi	r2,1
100075bc:	18c00044 	addi	r3,r3,1
100075c0:	180690fa 	slli	r3,r3,3
100075c4:	99400117 	ldw	r5,4(r19)
100075c8:	1104983a 	sll	r2,r2,r4
100075cc:	98c7883a 	add	r3,r19,r3
100075d0:	19000017 	ldw	r4,0(r3)
100075d4:	1144b03a 	or	r2,r2,r5
100075d8:	197ffe04 	addi	r5,r3,-8
100075dc:	81400315 	stw	r5,12(r16)
100075e0:	81000215 	stw	r4,8(r16)
100075e4:	98800115 	stw	r2,4(r19)
100075e8:	1c000015 	stw	r16,0(r3)
100075ec:	24000315 	stw	r16,12(r4)
100075f0:	3807d0ba 	srai	r3,r7,2
100075f4:	01000044 	movi	r4,1
100075f8:	20c8983a 	sll	r4,r4,r3
100075fc:	11004536 	bltu	r2,r4,10007714 <_malloc_r+0x2c8>
10007600:	2086703a 	and	r3,r4,r2
10007604:	18000a1e 	bne	r3,zero,10007630 <_malloc_r+0x1e4>
10007608:	00ffff04 	movi	r3,-4
1000760c:	2109883a 	add	r4,r4,r4
10007610:	38ce703a 	and	r7,r7,r3
10007614:	2086703a 	and	r3,r4,r2
10007618:	39c00104 	addi	r7,r7,4
1000761c:	1800041e 	bne	r3,zero,10007630 <_malloc_r+0x1e4>
10007620:	2109883a 	add	r4,r4,r4
10007624:	2086703a 	and	r3,r4,r2
10007628:	39c00104 	addi	r7,r7,4
1000762c:	183ffc26 	beq	r3,zero,10007620 <_malloc_r+0x1d4>
10007630:	02bfff04 	movi	r10,-4
10007634:	381690fa 	slli	r11,r7,3
10007638:	3819883a 	mov	r12,r7
1000763c:	9ad7883a 	add	r11,r19,r11
10007640:	5811883a 	mov	r8,r11
10007644:	40800317 	ldw	r2,12(r8)
10007648:	4080bc26 	beq	r8,r2,1000793c <_malloc_r+0x4f0>
1000764c:	10c00117 	ldw	r3,4(r2)
10007650:	1021883a 	mov	r16,r2
10007654:	10800317 	ldw	r2,12(r2)
10007658:	1a86703a 	and	r3,r3,r10
1000765c:	1c4bc83a 	sub	r5,r3,r17
10007660:	29800410 	cmplti	r6,r5,16
10007664:	3000ba26 	beq	r6,zero,10007950 <_malloc_r+0x504>
10007668:	283ff716 	blt	r5,zero,10007648 <_malloc_r+0x1fc>
1000766c:	80c7883a 	add	r3,r16,r3
10007670:	19400117 	ldw	r5,4(r3)
10007674:	81800217 	ldw	r6,8(r16)
10007678:	9009883a 	mov	r4,r18
1000767c:	29400054 	ori	r5,r5,1
10007680:	19400115 	stw	r5,4(r3)
10007684:	30800315 	stw	r2,12(r6)
10007688:	11800215 	stw	r6,8(r2)
1000768c:	000fc280 	call	1000fc28 <__malloc_unlock>
10007690:	80800204 	addi	r2,r16,8
10007694:	00000306 	br	100076a4 <_malloc_r+0x258>
10007698:	00800304 	movi	r2,12
1000769c:	90800015 	stw	r2,0(r18)
100076a0:	0005883a 	mov	r2,zero
100076a4:	dfc00917 	ldw	ra,36(sp)
100076a8:	df000817 	ldw	fp,32(sp)
100076ac:	ddc00717 	ldw	r23,28(sp)
100076b0:	dd800617 	ldw	r22,24(sp)
100076b4:	dd400517 	ldw	r21,20(sp)
100076b8:	dd000417 	ldw	r20,16(sp)
100076bc:	dcc00317 	ldw	r19,12(sp)
100076c0:	dc800217 	ldw	r18,8(sp)
100076c4:	dc400117 	ldw	r17,4(sp)
100076c8:	dc000017 	ldw	r16,0(sp)
100076cc:	dec00a04 	addi	sp,sp,40
100076d0:	f800283a 	ret
100076d4:	01008004 	movi	r4,512
100076d8:	01c01004 	movi	r7,64
100076dc:	02000fc4 	movi	r8,63
100076e0:	003f9306 	br	10007530 <_malloc_r+0xe4>
100076e4:	14000317 	ldw	r16,12(r2)
100076e8:	39c00084 	addi	r7,r7,2
100076ec:	143f721e 	bne	r2,r16,100074b8 <_malloc_r+0x6c>
100076f0:	9c000417 	ldw	r16,16(r19)
100076f4:	02440074 	movhi	r9,4097
100076f8:	4a4bd504 	addi	r9,r9,12116
100076fc:	827fa11e 	bne	r16,r9,10007584 <_malloc_r+0x138>
10007700:	3807d0ba 	srai	r3,r7,2
10007704:	01000044 	movi	r4,1
10007708:	98800117 	ldw	r2,4(r19)
1000770c:	20c8983a 	sll	r4,r4,r3
10007710:	113fbb2e 	bgeu	r2,r4,10007600 <_malloc_r+0x1b4>
10007714:	9c000217 	ldw	r16,8(r19)
10007718:	00bfff04 	movi	r2,-4
1000771c:	85400117 	ldw	r21,4(r16)
10007720:	a8ac703a 	and	r22,r21,r2
10007724:	b4400336 	bltu	r22,r17,10007734 <_malloc_r+0x2e8>
10007728:	b445c83a 	sub	r2,r22,r17
1000772c:	10c00408 	cmpgei	r3,r2,16
10007730:	1800541e 	bne	r3,zero,10007884 <_malloc_r+0x438>
10007734:	00840074 	movhi	r2,4097
10007738:	1091b417 	ldw	r2,18128(r2)
1000773c:	00c40074 	movhi	r3,4097
10007740:	1d58b917 	ldw	r21,25316(r3)
10007744:	10bfffd8 	cmpnei	r2,r2,-1
10007748:	85b9883a 	add	fp,r16,r22
1000774c:	8d6b883a 	add	r21,r17,r21
10007750:	1000d626 	beq	r2,zero,10007aac <_malloc_r+0x660>
10007754:	ad4403c4 	addi	r21,r21,4111
10007758:	00bc0004 	movi	r2,-4096
1000775c:	a8aa703a 	and	r21,r21,r2
10007760:	a80b883a 	mov	r5,r21
10007764:	9009883a 	mov	r4,r18
10007768:	000976c0 	call	1000976c <_sbrk_r>
1000776c:	102f883a 	mov	r23,r2
10007770:	10bfffd8 	cmpnei	r2,r2,-1
10007774:	1000a826 	beq	r2,zero,10007a18 <_malloc_r+0x5cc>
10007778:	bf00a636 	bltu	r23,fp,10007a14 <_malloc_r+0x5c8>
1000777c:	00840074 	movhi	r2,4097
10007780:	1518c317 	ldw	r20,25356(r2)
10007784:	ad29883a 	add	r20,r21,r20
10007788:	1518c315 	stw	r20,25356(r2)
1000778c:	a007883a 	mov	r3,r20
10007790:	e5c0ec26 	beq	fp,r23,10007b44 <_malloc_r+0x6f8>
10007794:	00840074 	movhi	r2,4097
10007798:	1091b417 	ldw	r2,18128(r2)
1000779c:	10bfffd8 	cmpnei	r2,r2,-1
100077a0:	1000ef26 	beq	r2,zero,10007b60 <_malloc_r+0x714>
100077a4:	bf39c83a 	sub	fp,r23,fp
100077a8:	e0c7883a 	add	r3,fp,r3
100077ac:	00840074 	movhi	r2,4097
100077b0:	10d8c315 	stw	r3,25356(r2)
100077b4:	bf0001cc 	andi	fp,r23,7
100077b8:	e000c526 	beq	fp,zero,10007ad0 <_malloc_r+0x684>
100077bc:	bf2fc83a 	sub	r23,r23,fp
100077c0:	bdc00204 	addi	r23,r23,8
100077c4:	05040204 	movi	r20,4104
100077c8:	a729c83a 	sub	r20,r20,fp
100077cc:	bd6b883a 	add	r21,r23,r21
100077d0:	a569c83a 	sub	r20,r20,r21
100077d4:	a503ffcc 	andi	r20,r20,4095
100077d8:	a00b883a 	mov	r5,r20
100077dc:	9009883a 	mov	r4,r18
100077e0:	000976c0 	call	1000976c <_sbrk_r>
100077e4:	10ffffe0 	cmpeqi	r3,r2,-1
100077e8:	1800f31e 	bne	r3,zero,10007bb8 <_malloc_r+0x76c>
100077ec:	15c5c83a 	sub	r2,r2,r23
100077f0:	152b883a 	add	r21,r2,r20
100077f4:	00840074 	movhi	r2,4097
100077f8:	1158c317 	ldw	r5,25356(r2)
100077fc:	9dc00215 	stw	r23,8(r19)
10007800:	ad400054 	ori	r21,r21,1
10007804:	a169883a 	add	r20,r20,r5
10007808:	1518c315 	stw	r20,25356(r2)
1000780c:	bd400115 	stw	r21,4(r23)
10007810:	84c0d626 	beq	r16,r19,10007b6c <_malloc_r+0x720>
10007814:	b0800428 	cmpgeui	r2,r22,16
10007818:	1000d626 	beq	r2,zero,10007b74 <_malloc_r+0x728>
1000781c:	80c00117 	ldw	r3,4(r16)
10007820:	013ffe04 	movi	r4,-8
10007824:	b0bffd04 	addi	r2,r22,-12
10007828:	1104703a 	and	r2,r2,r4
1000782c:	18c0004c 	andi	r3,r3,1
10007830:	1886b03a 	or	r3,r3,r2
10007834:	80c00115 	stw	r3,4(r16)
10007838:	01000144 	movi	r4,5
1000783c:	8087883a 	add	r3,r16,r2
10007840:	19000115 	stw	r4,4(r3)
10007844:	19000215 	stw	r4,8(r3)
10007848:	10800428 	cmpgeui	r2,r2,16
1000784c:	1000df1e 	bne	r2,zero,10007bcc <_malloc_r+0x780>
10007850:	bd400117 	ldw	r21,4(r23)
10007854:	b821883a 	mov	r16,r23
10007858:	00840074 	movhi	r2,4097
1000785c:	1098b817 	ldw	r2,25312(r2)
10007860:	1500022e 	bgeu	r2,r20,1000786c <_malloc_r+0x420>
10007864:	00840074 	movhi	r2,4097
10007868:	1518b815 	stw	r20,25312(r2)
1000786c:	00840074 	movhi	r2,4097
10007870:	1098b717 	ldw	r2,25308(r2)
10007874:	15006a2e 	bgeu	r2,r20,10007a20 <_malloc_r+0x5d4>
10007878:	00840074 	movhi	r2,4097
1000787c:	1518b715 	stw	r20,25308(r2)
10007880:	00006706 	br	10007a20 <_malloc_r+0x5d4>
10007884:	88c00054 	ori	r3,r17,1
10007888:	80c00115 	stw	r3,4(r16)
1000788c:	8463883a 	add	r17,r16,r17
10007890:	10800054 	ori	r2,r2,1
10007894:	9c400215 	stw	r17,8(r19)
10007898:	88800115 	stw	r2,4(r17)
1000789c:	9009883a 	mov	r4,r18
100078a0:	000fc280 	call	1000fc28 <__malloc_unlock>
100078a4:	80800204 	addi	r2,r16,8
100078a8:	003f7e06 	br	100076a4 <_malloc_r+0x258>
100078ac:	81000317 	ldw	r4,12(r16)
100078b0:	003f0506 	br	100074c8 <_malloc_r+0x7c>
100078b4:	1006d27a 	srli	r3,r2,9
100078b8:	19000168 	cmpgeui	r4,r3,5
100078bc:	20005026 	beq	r4,zero,10007a00 <_malloc_r+0x5b4>
100078c0:	19000568 	cmpgeui	r4,r3,21
100078c4:	20008c1e 	bne	r4,zero,10007af8 <_malloc_r+0x6ac>
100078c8:	19401704 	addi	r5,r3,92
100078cc:	280a90fa 	slli	r5,r5,3
100078d0:	190016c4 	addi	r4,r3,91
100078d4:	994b883a 	add	r5,r19,r5
100078d8:	28c00017 	ldw	r3,0(r5)
100078dc:	297ffe04 	addi	r5,r5,-8
100078e0:	28c07426 	beq	r5,r3,10007ab4 <_malloc_r+0x668>
100078e4:	01bfff04 	movi	r6,-4
100078e8:	19000117 	ldw	r4,4(r3)
100078ec:	2188703a 	and	r4,r4,r6
100078f0:	1100022e 	bgeu	r2,r4,100078fc <_malloc_r+0x4b0>
100078f4:	18c00217 	ldw	r3,8(r3)
100078f8:	28fffb1e 	bne	r5,r3,100078e8 <_malloc_r+0x49c>
100078fc:	19400317 	ldw	r5,12(r3)
10007900:	98800117 	ldw	r2,4(r19)
10007904:	81400315 	stw	r5,12(r16)
10007908:	80c00215 	stw	r3,8(r16)
1000790c:	2c000215 	stw	r16,8(r5)
10007910:	1c000315 	stw	r16,12(r3)
10007914:	003f3606 	br	100075f0 <_malloc_r+0x1a4>
10007918:	10c00568 	cmpgeui	r3,r2,21
1000791c:	18004a26 	beq	r3,zero,10007a48 <_malloc_r+0x5fc>
10007920:	10c01568 	cmpgeui	r3,r2,85
10007924:	18007b1e 	bne	r3,zero,10007b14 <_malloc_r+0x6c8>
10007928:	8804d33a 	srli	r2,r17,12
1000792c:	11c01bc4 	addi	r7,r2,111
10007930:	380890fa 	slli	r4,r7,3
10007934:	12001b84 	addi	r8,r2,110
10007938:	003efd06 	br	10007530 <_malloc_r+0xe4>
1000793c:	63000044 	addi	r12,r12,1
10007940:	608000cc 	andi	r2,r12,3
10007944:	42000204 	addi	r8,r8,8
10007948:	103f3e1e 	bne	r2,zero,10007644 <_malloc_r+0x1f8>
1000794c:	00004506 	br	10007a64 <_malloc_r+0x618>
10007950:	81000217 	ldw	r4,8(r16)
10007954:	89800054 	ori	r6,r17,1
10007958:	81800115 	stw	r6,4(r16)
1000795c:	20800315 	stw	r2,12(r4)
10007960:	11000215 	stw	r4,8(r2)
10007964:	8463883a 	add	r17,r16,r17
10007968:	9c400515 	stw	r17,20(r19)
1000796c:	9c400415 	stw	r17,16(r19)
10007970:	28800054 	ori	r2,r5,1
10007974:	88800115 	stw	r2,4(r17)
10007978:	8a400315 	stw	r9,12(r17)
1000797c:	8a400215 	stw	r9,8(r17)
10007980:	80c7883a 	add	r3,r16,r3
10007984:	19400015 	stw	r5,0(r3)
10007988:	9009883a 	mov	r4,r18
1000798c:	000fc280 	call	1000fc28 <__malloc_unlock>
10007990:	80800204 	addi	r2,r16,8
10007994:	003f4306 	br	100076a4 <_malloc_r+0x258>
10007998:	880ed0fa 	srli	r7,r17,3
1000799c:	88800204 	addi	r2,r17,8
100079a0:	003ebf06 	br	100074a0 <_malloc_r+0x54>
100079a4:	8085883a 	add	r2,r16,r2
100079a8:	10c00117 	ldw	r3,4(r2)
100079ac:	9009883a 	mov	r4,r18
100079b0:	18c00054 	ori	r3,r3,1
100079b4:	10c00115 	stw	r3,4(r2)
100079b8:	000fc280 	call	1000fc28 <__malloc_unlock>
100079bc:	80800204 	addi	r2,r16,8
100079c0:	003f3806 	br	100076a4 <_malloc_r+0x258>
100079c4:	89000054 	ori	r4,r17,1
100079c8:	81000115 	stw	r4,4(r16)
100079cc:	8463883a 	add	r17,r16,r17
100079d0:	9c400515 	stw	r17,20(r19)
100079d4:	9c400415 	stw	r17,16(r19)
100079d8:	19000054 	ori	r4,r3,1
100079dc:	89000115 	stw	r4,4(r17)
100079e0:	8085883a 	add	r2,r16,r2
100079e4:	8a400315 	stw	r9,12(r17)
100079e8:	8a400215 	stw	r9,8(r17)
100079ec:	10c00015 	stw	r3,0(r2)
100079f0:	9009883a 	mov	r4,r18
100079f4:	000fc280 	call	1000fc28 <__malloc_unlock>
100079f8:	80800204 	addi	r2,r16,8
100079fc:	003f2906 	br	100076a4 <_malloc_r+0x258>
10007a00:	1006d1ba 	srli	r3,r2,6
10007a04:	19400e44 	addi	r5,r3,57
10007a08:	280a90fa 	slli	r5,r5,3
10007a0c:	19000e04 	addi	r4,r3,56
10007a10:	003fb006 	br	100078d4 <_malloc_r+0x488>
10007a14:	84c04626 	beq	r16,r19,10007b30 <_malloc_r+0x6e4>
10007a18:	9c000217 	ldw	r16,8(r19)
10007a1c:	85400117 	ldw	r21,4(r16)
10007a20:	00bfff04 	movi	r2,-4
10007a24:	a8aa703a 	and	r21,r21,r2
10007a28:	ac45c83a 	sub	r2,r21,r17
10007a2c:	ac400236 	bltu	r21,r17,10007a38 <_malloc_r+0x5ec>
10007a30:	10c00408 	cmpgei	r3,r2,16
10007a34:	183f931e 	bne	r3,zero,10007884 <_malloc_r+0x438>
10007a38:	9009883a 	mov	r4,r18
10007a3c:	000fc280 	call	1000fc28 <__malloc_unlock>
10007a40:	0005883a 	mov	r2,zero
10007a44:	003f1706 	br	100076a4 <_malloc_r+0x258>
10007a48:	11c01704 	addi	r7,r2,92
10007a4c:	380890fa 	slli	r4,r7,3
10007a50:	120016c4 	addi	r8,r2,91
10007a54:	003eb606 	br	10007530 <_malloc_r+0xe4>
10007a58:	58800217 	ldw	r2,8(r11)
10007a5c:	39ffffc4 	addi	r7,r7,-1
10007a60:	12c0701e 	bne	r2,r11,10007c24 <_malloc_r+0x7d8>
10007a64:	388000cc 	andi	r2,r7,3
10007a68:	5afffe04 	addi	r11,r11,-8
10007a6c:	103ffa1e 	bne	r2,zero,10007a58 <_malloc_r+0x60c>
10007a70:	98c00117 	ldw	r3,4(r19)
10007a74:	0104303a 	nor	r2,zero,r4
10007a78:	10c4703a 	and	r2,r2,r3
10007a7c:	98800115 	stw	r2,4(r19)
10007a80:	2109883a 	add	r4,r4,r4
10007a84:	113f2336 	bltu	r2,r4,10007714 <_malloc_r+0x2c8>
10007a88:	203f2226 	beq	r4,zero,10007714 <_malloc_r+0x2c8>
10007a8c:	2086703a 	and	r3,r4,r2
10007a90:	1800041e 	bne	r3,zero,10007aa4 <_malloc_r+0x658>
10007a94:	2109883a 	add	r4,r4,r4
10007a98:	2086703a 	and	r3,r4,r2
10007a9c:	63000104 	addi	r12,r12,4
10007aa0:	183ffc26 	beq	r3,zero,10007a94 <_malloc_r+0x648>
10007aa4:	600f883a 	mov	r7,r12
10007aa8:	003ee206 	br	10007634 <_malloc_r+0x1e8>
10007aac:	ad400404 	addi	r21,r21,16
10007ab0:	003f2b06 	br	10007760 <_malloc_r+0x314>
10007ab4:	2009d0ba 	srai	r4,r4,2
10007ab8:	00800044 	movi	r2,1
10007abc:	99800117 	ldw	r6,4(r19)
10007ac0:	1104983a 	sll	r2,r2,r4
10007ac4:	1184b03a 	or	r2,r2,r6
10007ac8:	98800115 	stw	r2,4(r19)
10007acc:	003f8d06 	br	10007904 <_malloc_r+0x4b8>
10007ad0:	bd69883a 	add	r20,r23,r21
10007ad4:	0529c83a 	sub	r20,zero,r20
10007ad8:	a503ffcc 	andi	r20,r20,4095
10007adc:	a00b883a 	mov	r5,r20
10007ae0:	9009883a 	mov	r4,r18
10007ae4:	000976c0 	call	1000976c <_sbrk_r>
10007ae8:	10ffffe0 	cmpeqi	r3,r2,-1
10007aec:	183f3f26 	beq	r3,zero,100077ec <_malloc_r+0x3a0>
10007af0:	0029883a 	mov	r20,zero
10007af4:	003f3f06 	br	100077f4 <_malloc_r+0x3a8>
10007af8:	19001568 	cmpgeui	r4,r3,85
10007afc:	2000201e 	bne	r4,zero,10007b80 <_malloc_r+0x734>
10007b00:	1006d33a 	srli	r3,r2,12
10007b04:	19401bc4 	addi	r5,r3,111
10007b08:	280a90fa 	slli	r5,r5,3
10007b0c:	19001b84 	addi	r4,r3,110
10007b10:	003f7006 	br	100078d4 <_malloc_r+0x488>
10007b14:	10c05568 	cmpgeui	r3,r2,341
10007b18:	1800201e 	bne	r3,zero,10007b9c <_malloc_r+0x750>
10007b1c:	8804d3fa 	srli	r2,r17,15
10007b20:	11c01e04 	addi	r7,r2,120
10007b24:	380890fa 	slli	r4,r7,3
10007b28:	12001dc4 	addi	r8,r2,119
10007b2c:	003e8006 	br	10007530 <_malloc_r+0xe4>
10007b30:	00840074 	movhi	r2,4097
10007b34:	10d8c317 	ldw	r3,25356(r2)
10007b38:	a8c7883a 	add	r3,r21,r3
10007b3c:	10d8c315 	stw	r3,25356(r2)
10007b40:	003f1406 	br	10007794 <_malloc_r+0x348>
10007b44:	e083ffcc 	andi	r2,fp,4095
10007b48:	103f121e 	bne	r2,zero,10007794 <_malloc_r+0x348>
10007b4c:	9c000217 	ldw	r16,8(r19)
10007b50:	b56b883a 	add	r21,r22,r21
10007b54:	ad400054 	ori	r21,r21,1
10007b58:	85400115 	stw	r21,4(r16)
10007b5c:	003f3e06 	br	10007858 <_malloc_r+0x40c>
10007b60:	00840074 	movhi	r2,4097
10007b64:	15d1b415 	stw	r23,18128(r2)
10007b68:	003f1206 	br	100077b4 <_malloc_r+0x368>
10007b6c:	b821883a 	mov	r16,r23
10007b70:	003f3906 	br	10007858 <_malloc_r+0x40c>
10007b74:	00800044 	movi	r2,1
10007b78:	b8800115 	stw	r2,4(r23)
10007b7c:	003fae06 	br	10007a38 <_malloc_r+0x5ec>
10007b80:	19005568 	cmpgeui	r4,r3,341
10007b84:	2000191e 	bne	r4,zero,10007bec <_malloc_r+0x7a0>
10007b88:	1006d3fa 	srli	r3,r2,15
10007b8c:	19401e04 	addi	r5,r3,120
10007b90:	280a90fa 	slli	r5,r5,3
10007b94:	19001dc4 	addi	r4,r3,119
10007b98:	003f4e06 	br	100078d4 <_malloc_r+0x488>
10007b9c:	10815568 	cmpgeui	r2,r2,1365
10007ba0:	1000191e 	bne	r2,zero,10007c08 <_malloc_r+0x7bc>
10007ba4:	8804d4ba 	srli	r2,r17,18
10007ba8:	11c01f44 	addi	r7,r2,125
10007bac:	380890fa 	slli	r4,r7,3
10007bb0:	12001f04 	addi	r8,r2,124
10007bb4:	003e5e06 	br	10007530 <_malloc_r+0xe4>
10007bb8:	e73ffe04 	addi	fp,fp,-8
10007bbc:	af2b883a 	add	r21,r21,fp
10007bc0:	adebc83a 	sub	r21,r21,r23
10007bc4:	0029883a 	mov	r20,zero
10007bc8:	003f0a06 	br	100077f4 <_malloc_r+0x3a8>
10007bcc:	81400204 	addi	r5,r16,8
10007bd0:	9009883a 	mov	r4,r18
10007bd4:	00068e00 	call	100068e0 <_free_r>
10007bd8:	9c000217 	ldw	r16,8(r19)
10007bdc:	00840074 	movhi	r2,4097
10007be0:	1518c317 	ldw	r20,25356(r2)
10007be4:	85400117 	ldw	r21,4(r16)
10007be8:	003f1b06 	br	10007858 <_malloc_r+0x40c>
10007bec:	18c15568 	cmpgeui	r3,r3,1365
10007bf0:	1800091e 	bne	r3,zero,10007c18 <_malloc_r+0x7cc>
10007bf4:	1006d4ba 	srli	r3,r2,18
10007bf8:	19401f44 	addi	r5,r3,125
10007bfc:	280a90fa 	slli	r5,r5,3
10007c00:	19001f04 	addi	r4,r3,124
10007c04:	003f3306 	br	100078d4 <_malloc_r+0x488>
10007c08:	0100fe04 	movi	r4,1016
10007c0c:	01c01fc4 	movi	r7,127
10007c10:	02001f84 	movi	r8,126
10007c14:	003e4606 	br	10007530 <_malloc_r+0xe4>
10007c18:	0140fe04 	movi	r5,1016
10007c1c:	01001f84 	movi	r4,126
10007c20:	003f2c06 	br	100078d4 <_malloc_r+0x488>
10007c24:	98800117 	ldw	r2,4(r19)
10007c28:	003f9506 	br	10007a80 <_malloc_r+0x634>

10007c2c <memchr>:
10007c2c:	208000cc 	andi	r2,r4,3
10007c30:	280f883a 	mov	r7,r5
10007c34:	10000e26 	beq	r2,zero,10007c70 <memchr+0x44>
10007c38:	30bfffc4 	addi	r2,r6,-1
10007c3c:	30001726 	beq	r6,zero,10007c9c <memchr+0x70>
10007c40:	29803fcc 	andi	r6,r5,255
10007c44:	00000606 	br	10007c60 <memchr+0x34>
10007c48:	21000044 	addi	r4,r4,1
10007c4c:	20c000cc 	andi	r3,r4,3
10007c50:	18000826 	beq	r3,zero,10007c74 <memchr+0x48>
10007c54:	10bfffc4 	addi	r2,r2,-1
10007c58:	10ffffe0 	cmpeqi	r3,r2,-1
10007c5c:	18000f1e 	bne	r3,zero,10007c9c <memchr+0x70>
10007c60:	20c00003 	ldbu	r3,0(r4)
10007c64:	19bff81e 	bne	r3,r6,10007c48 <memchr+0x1c>
10007c68:	2005883a 	mov	r2,r4
10007c6c:	f800283a 	ret
10007c70:	3005883a 	mov	r2,r6
10007c74:	10c00128 	cmpgeui	r3,r2,4
10007c78:	18000a1e 	bne	r3,zero,10007ca4 <memchr+0x78>
10007c7c:	10001e26 	beq	r2,zero,10007cf8 <memchr+0xcc>
10007c80:	2087883a 	add	r3,r4,r2
10007c84:	39803fcc 	andi	r6,r7,255
10007c88:	2005883a 	mov	r2,r4
10007c8c:	11000003 	ldbu	r4,0(r2)
10007c90:	21bff626 	beq	r4,r6,10007c6c <memchr+0x40>
10007c94:	10800044 	addi	r2,r2,1
10007c98:	18bffc1e 	bne	r3,r2,10007c8c <memchr+0x60>
10007c9c:	0005883a 	mov	r2,zero
10007ca0:	f800283a 	ret
10007ca4:	29403fcc 	andi	r5,r5,255
10007ca8:	280c923a 	slli	r6,r5,8
10007cac:	027fbff4 	movhi	r9,65279
10007cb0:	02202074 	movhi	r8,32897
10007cb4:	314ab03a 	or	r5,r6,r5
10007cb8:	280c943a 	slli	r6,r5,16
10007cbc:	4a7fbfc4 	addi	r9,r9,-257
10007cc0:	42202004 	addi	r8,r8,-32640
10007cc4:	314cb03a 	or	r6,r6,r5
10007cc8:	20c00017 	ldw	r3,0(r4)
10007ccc:	30c6f03a 	xor	r3,r6,r3
10007cd0:	1a4b883a 	add	r5,r3,r9
10007cd4:	00c6303a 	nor	r3,zero,r3
10007cd8:	28c6703a 	and	r3,r5,r3
10007cdc:	1a06703a 	and	r3,r3,r8
10007ce0:	183fe71e 	bne	r3,zero,10007c80 <memchr+0x54>
10007ce4:	10bfff04 	addi	r2,r2,-4
10007ce8:	10c00128 	cmpgeui	r3,r2,4
10007cec:	21000104 	addi	r4,r4,4
10007cf0:	183ff51e 	bne	r3,zero,10007cc8 <memchr+0x9c>
10007cf4:	003fe106 	br	10007c7c <memchr+0x50>
10007cf8:	f800283a 	ret

10007cfc <memcpy>:
10007cfc:	30c00430 	cmpltui	r3,r6,16
10007d00:	2005883a 	mov	r2,r4
10007d04:	18002d1e 	bne	r3,zero,10007dbc <memcpy+0xc0>
10007d08:	2906b03a 	or	r3,r5,r4
10007d0c:	18c000cc 	andi	r3,r3,3
10007d10:	1800351e 	bne	r3,zero,10007de8 <memcpy+0xec>
10007d14:	32fffc04 	addi	r11,r6,-16
10007d18:	5816d13a 	srli	r11,r11,4
10007d1c:	280f883a 	mov	r7,r5
10007d20:	2007883a 	mov	r3,r4
10007d24:	5ac00044 	addi	r11,r11,1
10007d28:	5816913a 	slli	r11,r11,4
10007d2c:	22d5883a 	add	r10,r4,r11
10007d30:	39000117 	ldw	r4,4(r7)
10007d34:	3a400017 	ldw	r9,0(r7)
10007d38:	3a000217 	ldw	r8,8(r7)
10007d3c:	19000115 	stw	r4,4(r3)
10007d40:	39000317 	ldw	r4,12(r7)
10007d44:	1a400015 	stw	r9,0(r3)
10007d48:	1a000215 	stw	r8,8(r3)
10007d4c:	19000315 	stw	r4,12(r3)
10007d50:	18c00404 	addi	r3,r3,16
10007d54:	39c00404 	addi	r7,r7,16
10007d58:	50fff51e 	bne	r10,r3,10007d30 <memcpy+0x34>
10007d5c:	3100030c 	andi	r4,r6,12
10007d60:	2acb883a 	add	r5,r5,r11
10007d64:	320003cc 	andi	r8,r6,15
10007d68:	20002226 	beq	r4,zero,10007df4 <memcpy+0xf8>
10007d6c:	280f883a 	mov	r7,r5
10007d70:	1813883a 	mov	r9,r3
10007d74:	39c00104 	addi	r7,r7,4
10007d78:	3abfff17 	ldw	r10,-4(r7)
10007d7c:	41c9c83a 	sub	r4,r8,r7
10007d80:	2909883a 	add	r4,r5,r4
10007d84:	4a800015 	stw	r10,0(r9)
10007d88:	21000128 	cmpgeui	r4,r4,4
10007d8c:	4a400104 	addi	r9,r9,4
10007d90:	203ff81e 	bne	r4,zero,10007d74 <memcpy+0x78>
10007d94:	413fff04 	addi	r4,r8,-4
10007d98:	2008d0ba 	srli	r4,r4,2
10007d9c:	318000cc 	andi	r6,r6,3
10007da0:	31ffffc4 	addi	r7,r6,-1
10007da4:	21000044 	addi	r4,r4,1
10007da8:	200890ba 	slli	r4,r4,2
10007dac:	1907883a 	add	r3,r3,r4
10007db0:	290b883a 	add	r5,r5,r4
10007db4:	3000041e 	bne	r6,zero,10007dc8 <memcpy+0xcc>
10007db8:	f800283a 	ret
10007dbc:	2007883a 	mov	r3,r4
10007dc0:	31ffffc4 	addi	r7,r6,-1
10007dc4:	303ffc26 	beq	r6,zero,10007db8 <memcpy+0xbc>
10007dc8:	39c00044 	addi	r7,r7,1
10007dcc:	19cf883a 	add	r7,r3,r7
10007dd0:	29800003 	ldbu	r6,0(r5)
10007dd4:	18c00044 	addi	r3,r3,1
10007dd8:	29400044 	addi	r5,r5,1
10007ddc:	19bfffc5 	stb	r6,-1(r3)
10007de0:	38fffb1e 	bne	r7,r3,10007dd0 <memcpy+0xd4>
10007de4:	f800283a 	ret
10007de8:	31ffffc4 	addi	r7,r6,-1
10007dec:	2007883a 	mov	r3,r4
10007df0:	003ff506 	br	10007dc8 <memcpy+0xcc>
10007df4:	400d883a 	mov	r6,r8
10007df8:	003ff106 	br	10007dc0 <memcpy+0xc4>

10007dfc <memmove>:
10007dfc:	2005883a 	mov	r2,r4
10007e00:	29000a2e 	bgeu	r5,r4,10007e2c <memmove+0x30>
10007e04:	2989883a 	add	r4,r5,r6
10007e08:	1100082e 	bgeu	r2,r4,10007e2c <memmove+0x30>
10007e0c:	1187883a 	add	r3,r2,r6
10007e10:	30003e26 	beq	r6,zero,10007f0c <memmove+0x110>
10007e14:	217fffc3 	ldbu	r5,-1(r4)
10007e18:	18ffffc4 	addi	r3,r3,-1
10007e1c:	213fffc4 	addi	r4,r4,-1
10007e20:	19400005 	stb	r5,0(r3)
10007e24:	10fffb1e 	bne	r2,r3,10007e14 <memmove+0x18>
10007e28:	f800283a 	ret
10007e2c:	30c00430 	cmpltui	r3,r6,16
10007e30:	18000b26 	beq	r3,zero,10007e60 <memmove+0x64>
10007e34:	1007883a 	mov	r3,r2
10007e38:	31ffffc4 	addi	r7,r6,-1
10007e3c:	30003726 	beq	r6,zero,10007f1c <memmove+0x120>
10007e40:	39c00044 	addi	r7,r7,1
10007e44:	29cf883a 	add	r7,r5,r7
10007e48:	29800003 	ldbu	r6,0(r5)
10007e4c:	29400044 	addi	r5,r5,1
10007e50:	18c00044 	addi	r3,r3,1
10007e54:	19bfffc5 	stb	r6,-1(r3)
10007e58:	29fffb1e 	bne	r5,r7,10007e48 <memmove+0x4c>
10007e5c:	f800283a 	ret
10007e60:	2886b03a 	or	r3,r5,r2
10007e64:	18c000cc 	andi	r3,r3,3
10007e68:	1800291e 	bne	r3,zero,10007f10 <memmove+0x114>
10007e6c:	327ffc04 	addi	r9,r6,-16
10007e70:	4812d13a 	srli	r9,r9,4
10007e74:	280f883a 	mov	r7,r5
10007e78:	1007883a 	mov	r3,r2
10007e7c:	4a400044 	addi	r9,r9,1
10007e80:	4812913a 	slli	r9,r9,4
10007e84:	1251883a 	add	r8,r2,r9
10007e88:	39000017 	ldw	r4,0(r7)
10007e8c:	39c00404 	addi	r7,r7,16
10007e90:	18c00404 	addi	r3,r3,16
10007e94:	193ffc15 	stw	r4,-16(r3)
10007e98:	393ffd17 	ldw	r4,-12(r7)
10007e9c:	193ffd15 	stw	r4,-12(r3)
10007ea0:	393ffe17 	ldw	r4,-8(r7)
10007ea4:	193ffe15 	stw	r4,-8(r3)
10007ea8:	393fff17 	ldw	r4,-4(r7)
10007eac:	193fff15 	stw	r4,-4(r3)
10007eb0:	40fff51e 	bne	r8,r3,10007e88 <memmove+0x8c>
10007eb4:	3100030c 	andi	r4,r6,12
10007eb8:	2a4b883a 	add	r5,r5,r9
10007ebc:	320003cc 	andi	r8,r6,15
10007ec0:	20001726 	beq	r4,zero,10007f20 <memmove+0x124>
10007ec4:	2813883a 	mov	r9,r5
10007ec8:	180f883a 	mov	r7,r3
10007ecc:	4a800017 	ldw	r10,0(r9)
10007ed0:	39c00104 	addi	r7,r7,4
10007ed4:	41c9c83a 	sub	r4,r8,r7
10007ed8:	1909883a 	add	r4,r3,r4
10007edc:	21000128 	cmpgeui	r4,r4,4
10007ee0:	3abfff15 	stw	r10,-4(r7)
10007ee4:	4a400104 	addi	r9,r9,4
10007ee8:	203ff81e 	bne	r4,zero,10007ecc <memmove+0xd0>
10007eec:	413fff04 	addi	r4,r8,-4
10007ef0:	2008d0ba 	srli	r4,r4,2
10007ef4:	318000cc 	andi	r6,r6,3
10007ef8:	21000044 	addi	r4,r4,1
10007efc:	200890ba 	slli	r4,r4,2
10007f00:	1907883a 	add	r3,r3,r4
10007f04:	290b883a 	add	r5,r5,r4
10007f08:	003fcb06 	br	10007e38 <memmove+0x3c>
10007f0c:	f800283a 	ret
10007f10:	31ffffc4 	addi	r7,r6,-1
10007f14:	1007883a 	mov	r3,r2
10007f18:	003fc906 	br	10007e40 <memmove+0x44>
10007f1c:	f800283a 	ret
10007f20:	400d883a 	mov	r6,r8
10007f24:	003fc406 	br	10007e38 <memmove+0x3c>

10007f28 <memset>:
10007f28:	20c000cc 	andi	r3,r4,3
10007f2c:	2005883a 	mov	r2,r4
10007f30:	18003626 	beq	r3,zero,1000800c <memset+0xe4>
10007f34:	31ffffc4 	addi	r7,r6,-1
10007f38:	30003326 	beq	r6,zero,10008008 <memset+0xe0>
10007f3c:	2811883a 	mov	r8,r5
10007f40:	2007883a 	mov	r3,r4
10007f44:	00000306 	br	10007f54 <memset+0x2c>
10007f48:	39ffffc4 	addi	r7,r7,-1
10007f4c:	39bfffe0 	cmpeqi	r6,r7,-1
10007f50:	30002d1e 	bne	r6,zero,10008008 <memset+0xe0>
10007f54:	18c00044 	addi	r3,r3,1
10007f58:	198000cc 	andi	r6,r3,3
10007f5c:	1a3fffc5 	stb	r8,-1(r3)
10007f60:	303ff91e 	bne	r6,zero,10007f48 <memset+0x20>
10007f64:	39000130 	cmpltui	r4,r7,4
10007f68:	2000221e 	bne	r4,zero,10007ff4 <memset+0xcc>
10007f6c:	29003fcc 	andi	r4,r5,255
10007f70:	200c923a 	slli	r6,r4,8
10007f74:	3a000430 	cmpltui	r8,r7,16
10007f78:	3108b03a 	or	r4,r6,r4
10007f7c:	200c943a 	slli	r6,r4,16
10007f80:	310cb03a 	or	r6,r6,r4
10007f84:	40000e1e 	bne	r8,zero,10007fc0 <memset+0x98>
10007f88:	393ffc04 	addi	r4,r7,-16
10007f8c:	2008d13a 	srli	r4,r4,4
10007f90:	21000044 	addi	r4,r4,1
10007f94:	2008913a 	slli	r4,r4,4
10007f98:	1909883a 	add	r4,r3,r4
10007f9c:	19800015 	stw	r6,0(r3)
10007fa0:	19800115 	stw	r6,4(r3)
10007fa4:	19800215 	stw	r6,8(r3)
10007fa8:	19800315 	stw	r6,12(r3)
10007fac:	18c00404 	addi	r3,r3,16
10007fb0:	20fffa1e 	bne	r4,r3,10007f9c <memset+0x74>
10007fb4:	3900030c 	andi	r4,r7,12
10007fb8:	39c003cc 	andi	r7,r7,15
10007fbc:	20000d26 	beq	r4,zero,10007ff4 <memset+0xcc>
10007fc0:	1811883a 	mov	r8,r3
10007fc4:	42000104 	addi	r8,r8,4
10007fc8:	3a09c83a 	sub	r4,r7,r8
10007fcc:	1909883a 	add	r4,r3,r4
10007fd0:	21000128 	cmpgeui	r4,r4,4
10007fd4:	41bfff15 	stw	r6,-4(r8)
10007fd8:	203ffa1e 	bne	r4,zero,10007fc4 <memset+0x9c>
10007fdc:	393fff04 	addi	r4,r7,-4
10007fe0:	2008d0ba 	srli	r4,r4,2
10007fe4:	39c000cc 	andi	r7,r7,3
10007fe8:	21000044 	addi	r4,r4,1
10007fec:	200890ba 	slli	r4,r4,2
10007ff0:	1907883a 	add	r3,r3,r4
10007ff4:	38000426 	beq	r7,zero,10008008 <memset+0xe0>
10007ff8:	19cf883a 	add	r7,r3,r7
10007ffc:	18c00044 	addi	r3,r3,1
10008000:	197fffc5 	stb	r5,-1(r3)
10008004:	38fffd1e 	bne	r7,r3,10007ffc <memset+0xd4>
10008008:	f800283a 	ret
1000800c:	2007883a 	mov	r3,r4
10008010:	300f883a 	mov	r7,r6
10008014:	003fd306 	br	10007f64 <memset+0x3c>

10008018 <_Balloc>:
10008018:	20801317 	ldw	r2,76(r4)
1000801c:	defffc04 	addi	sp,sp,-16
10008020:	dc400115 	stw	r17,4(sp)
10008024:	dc000015 	stw	r16,0(sp)
10008028:	dfc00315 	stw	ra,12(sp)
1000802c:	dc800215 	stw	r18,8(sp)
10008030:	2021883a 	mov	r16,r4
10008034:	2823883a 	mov	r17,r5
10008038:	10000e26 	beq	r2,zero,10008074 <_Balloc+0x5c>
1000803c:	880690ba 	slli	r3,r17,2
10008040:	10c7883a 	add	r3,r2,r3
10008044:	18800017 	ldw	r2,0(r3)
10008048:	10001126 	beq	r2,zero,10008090 <_Balloc+0x78>
1000804c:	11000017 	ldw	r4,0(r2)
10008050:	19000015 	stw	r4,0(r3)
10008054:	10000415 	stw	zero,16(r2)
10008058:	10000315 	stw	zero,12(r2)
1000805c:	dfc00317 	ldw	ra,12(sp)
10008060:	dc800217 	ldw	r18,8(sp)
10008064:	dc400117 	ldw	r17,4(sp)
10008068:	dc000017 	ldw	r16,0(sp)
1000806c:	dec00404 	addi	sp,sp,16
10008070:	f800283a 	ret
10008074:	01800844 	movi	r6,33
10008078:	01400104 	movi	r5,4
1000807c:	000af640 	call	1000af64 <_calloc_r>
10008080:	80801315 	stw	r2,76(r16)
10008084:	103fed1e 	bne	r2,zero,1000803c <_Balloc+0x24>
10008088:	0005883a 	mov	r2,zero
1000808c:	003ff306 	br	1000805c <_Balloc+0x44>
10008090:	04800044 	movi	r18,1
10008094:	9464983a 	sll	r18,r18,r17
10008098:	01400044 	movi	r5,1
1000809c:	8009883a 	mov	r4,r16
100080a0:	91800144 	addi	r6,r18,5
100080a4:	300c90ba 	slli	r6,r6,2
100080a8:	000af640 	call	1000af64 <_calloc_r>
100080ac:	103ff626 	beq	r2,zero,10008088 <_Balloc+0x70>
100080b0:	14400115 	stw	r17,4(r2)
100080b4:	14800215 	stw	r18,8(r2)
100080b8:	003fe606 	br	10008054 <_Balloc+0x3c>

100080bc <_Bfree>:
100080bc:	28000726 	beq	r5,zero,100080dc <_Bfree+0x20>
100080c0:	28c00117 	ldw	r3,4(r5)
100080c4:	20801317 	ldw	r2,76(r4)
100080c8:	180690ba 	slli	r3,r3,2
100080cc:	10c5883a 	add	r2,r2,r3
100080d0:	10c00017 	ldw	r3,0(r2)
100080d4:	28c00015 	stw	r3,0(r5)
100080d8:	11400015 	stw	r5,0(r2)
100080dc:	f800283a 	ret

100080e0 <__multadd>:
100080e0:	defff704 	addi	sp,sp,-36
100080e4:	dc800215 	stw	r18,8(sp)
100080e8:	2c800417 	ldw	r18,16(r5)
100080ec:	ddc00715 	stw	r23,28(sp)
100080f0:	dd800615 	stw	r22,24(sp)
100080f4:	dd400515 	stw	r21,20(sp)
100080f8:	dd000415 	stw	r20,16(sp)
100080fc:	dcc00315 	stw	r19,12(sp)
10008100:	dc400115 	stw	r17,4(sp)
10008104:	dfc00815 	stw	ra,32(sp)
10008108:	dc000015 	stw	r16,0(sp)
1000810c:	2827883a 	mov	r19,r5
10008110:	2029883a 	mov	r20,r4
10008114:	302b883a 	mov	r21,r6
10008118:	3823883a 	mov	r17,r7
1000811c:	2d800504 	addi	r22,r5,20
10008120:	002f883a 	mov	r23,zero
10008124:	b4000017 	ldw	r16,0(r22)
10008128:	a80b883a 	mov	r5,r21
1000812c:	b5800104 	addi	r22,r22,4
10008130:	813fffcc 	andi	r4,r16,65535
10008134:	000cd300 	call	1000cd30 <__mulsi3>
10008138:	8008d43a 	srli	r4,r16,16
1000813c:	a80b883a 	mov	r5,r21
10008140:	1461883a 	add	r16,r2,r17
10008144:	000cd300 	call	1000cd30 <__mulsi3>
10008148:	800ed43a 	srli	r7,r16,16
1000814c:	843fffcc 	andi	r16,r16,65535
10008150:	bdc00044 	addi	r23,r23,1
10008154:	11c5883a 	add	r2,r2,r7
10008158:	1006943a 	slli	r3,r2,16
1000815c:	1022d43a 	srli	r17,r2,16
10008160:	1c21883a 	add	r16,r3,r16
10008164:	b43fff15 	stw	r16,-4(r22)
10008168:	bcbfee16 	blt	r23,r18,10008124 <__multadd+0x44>
1000816c:	88000826 	beq	r17,zero,10008190 <__multadd+0xb0>
10008170:	98800217 	ldw	r2,8(r19)
10008174:	9080120e 	bge	r18,r2,100081c0 <__multadd+0xe0>
10008178:	90800144 	addi	r2,r18,5
1000817c:	100490ba 	slli	r2,r2,2
10008180:	94800044 	addi	r18,r18,1
10008184:	9885883a 	add	r2,r19,r2
10008188:	14400015 	stw	r17,0(r2)
1000818c:	9c800415 	stw	r18,16(r19)
10008190:	9805883a 	mov	r2,r19
10008194:	dfc00817 	ldw	ra,32(sp)
10008198:	ddc00717 	ldw	r23,28(sp)
1000819c:	dd800617 	ldw	r22,24(sp)
100081a0:	dd400517 	ldw	r21,20(sp)
100081a4:	dd000417 	ldw	r20,16(sp)
100081a8:	dcc00317 	ldw	r19,12(sp)
100081ac:	dc800217 	ldw	r18,8(sp)
100081b0:	dc400117 	ldw	r17,4(sp)
100081b4:	dc000017 	ldw	r16,0(sp)
100081b8:	dec00904 	addi	sp,sp,36
100081bc:	f800283a 	ret
100081c0:	99400117 	ldw	r5,4(r19)
100081c4:	a009883a 	mov	r4,r20
100081c8:	29400044 	addi	r5,r5,1
100081cc:	00080180 	call	10008018 <_Balloc>
100081d0:	1021883a 	mov	r16,r2
100081d4:	10001226 	beq	r2,zero,10008220 <__multadd+0x140>
100081d8:	99800417 	ldw	r6,16(r19)
100081dc:	99400304 	addi	r5,r19,12
100081e0:	11000304 	addi	r4,r2,12
100081e4:	31800084 	addi	r6,r6,2
100081e8:	300c90ba 	slli	r6,r6,2
100081ec:	0007cfc0 	call	10007cfc <memcpy>
100081f0:	98000926 	beq	r19,zero,10008218 <__multadd+0x138>
100081f4:	98c00117 	ldw	r3,4(r19)
100081f8:	a0801317 	ldw	r2,76(r20)
100081fc:	180690ba 	slli	r3,r3,2
10008200:	10c5883a 	add	r2,r2,r3
10008204:	10c00017 	ldw	r3,0(r2)
10008208:	98c00015 	stw	r3,0(r19)
1000820c:	14c00015 	stw	r19,0(r2)
10008210:	8027883a 	mov	r19,r16
10008214:	003fd806 	br	10008178 <__multadd+0x98>
10008218:	8027883a 	mov	r19,r16
1000821c:	003fd606 	br	10008178 <__multadd+0x98>
10008220:	01c40074 	movhi	r7,4097
10008224:	01040074 	movhi	r4,4097
10008228:	39c95204 	addi	r7,r7,9544
1000822c:	000d883a 	mov	r6,zero
10008230:	01402d44 	movi	r5,181
10008234:	21096704 	addi	r4,r4,9628
10008238:	000aeec0 	call	1000aeec <__assert_func>

1000823c <__s2b>:
1000823c:	defff904 	addi	sp,sp,-28
10008240:	dc800215 	stw	r18,8(sp)
10008244:	dc000015 	stw	r16,0(sp)
10008248:	2025883a 	mov	r18,r4
1000824c:	2821883a 	mov	r16,r5
10008250:	39000204 	addi	r4,r7,8
10008254:	01400244 	movi	r5,9
10008258:	dcc00315 	stw	r19,12(sp)
1000825c:	dc400115 	stw	r17,4(sp)
10008260:	dfc00615 	stw	ra,24(sp)
10008264:	3823883a 	mov	r17,r7
10008268:	dd400515 	stw	r21,20(sp)
1000826c:	dd000415 	stw	r20,16(sp)
10008270:	3027883a 	mov	r19,r6
10008274:	000cb7c0 	call	1000cb7c <__divsi3>
10008278:	88c00290 	cmplti	r3,r17,10
1000827c:	1800341e 	bne	r3,zero,10008350 <__s2b+0x114>
10008280:	00c00044 	movi	r3,1
10008284:	000b883a 	mov	r5,zero
10008288:	18c7883a 	add	r3,r3,r3
1000828c:	29400044 	addi	r5,r5,1
10008290:	18bffd16 	blt	r3,r2,10008288 <__s2b+0x4c>
10008294:	9009883a 	mov	r4,r18
10008298:	00080180 	call	10008018 <_Balloc>
1000829c:	100b883a 	mov	r5,r2
100082a0:	10002d26 	beq	r2,zero,10008358 <__s2b+0x11c>
100082a4:	d8800717 	ldw	r2,28(sp)
100082a8:	28800515 	stw	r2,20(r5)
100082ac:	00800044 	movi	r2,1
100082b0:	28800415 	stw	r2,16(r5)
100082b4:	98800290 	cmplti	r2,r19,10
100082b8:	1000221e 	bne	r2,zero,10008344 <__s2b+0x108>
100082bc:	85400244 	addi	r21,r16,9
100082c0:	a829883a 	mov	r20,r21
100082c4:	84e1883a 	add	r16,r16,r19
100082c8:	a1c00007 	ldb	r7,0(r20)
100082cc:	01800284 	movi	r6,10
100082d0:	9009883a 	mov	r4,r18
100082d4:	39fff404 	addi	r7,r7,-48
100082d8:	00080e00 	call	100080e0 <__multadd>
100082dc:	a5000044 	addi	r20,r20,1
100082e0:	100b883a 	mov	r5,r2
100082e4:	a43ff81e 	bne	r20,r16,100082c8 <__s2b+0x8c>
100082e8:	9c3ffe04 	addi	r16,r19,-8
100082ec:	ac21883a 	add	r16,r21,r16
100082f0:	9c400a0e 	bge	r19,r17,1000831c <__s2b+0xe0>
100082f4:	8ce3c83a 	sub	r17,r17,r19
100082f8:	8463883a 	add	r17,r16,r17
100082fc:	81c00007 	ldb	r7,0(r16)
10008300:	01800284 	movi	r6,10
10008304:	9009883a 	mov	r4,r18
10008308:	39fff404 	addi	r7,r7,-48
1000830c:	00080e00 	call	100080e0 <__multadd>
10008310:	84000044 	addi	r16,r16,1
10008314:	100b883a 	mov	r5,r2
10008318:	8c3ff81e 	bne	r17,r16,100082fc <__s2b+0xc0>
1000831c:	2805883a 	mov	r2,r5
10008320:	dfc00617 	ldw	ra,24(sp)
10008324:	dd400517 	ldw	r21,20(sp)
10008328:	dd000417 	ldw	r20,16(sp)
1000832c:	dcc00317 	ldw	r19,12(sp)
10008330:	dc800217 	ldw	r18,8(sp)
10008334:	dc400117 	ldw	r17,4(sp)
10008338:	dc000017 	ldw	r16,0(sp)
1000833c:	dec00704 	addi	sp,sp,28
10008340:	f800283a 	ret
10008344:	84000284 	addi	r16,r16,10
10008348:	04c00244 	movi	r19,9
1000834c:	003fe806 	br	100082f0 <__s2b+0xb4>
10008350:	000b883a 	mov	r5,zero
10008354:	003fcf06 	br	10008294 <__s2b+0x58>
10008358:	01c40074 	movhi	r7,4097
1000835c:	01040074 	movhi	r4,4097
10008360:	39c95204 	addi	r7,r7,9544
10008364:	000d883a 	mov	r6,zero
10008368:	01403384 	movi	r5,206
1000836c:	21096704 	addi	r4,r4,9628
10008370:	000aeec0 	call	1000aeec <__assert_func>

10008374 <__hi0bits>:
10008374:	20bfffec 	andhi	r2,r4,65535
10008378:	1000131e 	bne	r2,zero,100083c8 <__hi0bits+0x54>
1000837c:	2008943a 	slli	r4,r4,16
10008380:	00800404 	movi	r2,16
10008384:	20ffc02c 	andhi	r3,r4,65280
10008388:	1800021e 	bne	r3,zero,10008394 <__hi0bits+0x20>
1000838c:	2008923a 	slli	r4,r4,8
10008390:	10800204 	addi	r2,r2,8
10008394:	20fc002c 	andhi	r3,r4,61440
10008398:	1800021e 	bne	r3,zero,100083a4 <__hi0bits+0x30>
1000839c:	2008913a 	slli	r4,r4,4
100083a0:	10800104 	addi	r2,r2,4
100083a4:	20f0002c 	andhi	r3,r4,49152
100083a8:	1800021e 	bne	r3,zero,100083b4 <__hi0bits+0x40>
100083ac:	200890ba 	slli	r4,r4,2
100083b0:	10800084 	addi	r2,r2,2
100083b4:	20000316 	blt	r4,zero,100083c4 <__hi0bits+0x50>
100083b8:	2110002c 	andhi	r4,r4,16384
100083bc:	10800044 	addi	r2,r2,1
100083c0:	20000326 	beq	r4,zero,100083d0 <__hi0bits+0x5c>
100083c4:	f800283a 	ret
100083c8:	0005883a 	mov	r2,zero
100083cc:	003fed06 	br	10008384 <__hi0bits+0x10>
100083d0:	00800804 	movi	r2,32
100083d4:	f800283a 	ret

100083d8 <__lo0bits>:
100083d8:	20c00017 	ldw	r3,0(r4)
100083dc:	188001cc 	andi	r2,r3,7
100083e0:	10000826 	beq	r2,zero,10008404 <__lo0bits+0x2c>
100083e4:	1880004c 	andi	r2,r3,1
100083e8:	10001f1e 	bne	r2,zero,10008468 <__lo0bits+0x90>
100083ec:	1880008c 	andi	r2,r3,2
100083f0:	10002126 	beq	r2,zero,10008478 <__lo0bits+0xa0>
100083f4:	1806d07a 	srli	r3,r3,1
100083f8:	00800044 	movi	r2,1
100083fc:	20c00015 	stw	r3,0(r4)
10008400:	f800283a 	ret
10008404:	18bfffcc 	andi	r2,r3,65535
10008408:	10001426 	beq	r2,zero,1000845c <__lo0bits+0x84>
1000840c:	0005883a 	mov	r2,zero
10008410:	19403fcc 	andi	r5,r3,255
10008414:	2800021e 	bne	r5,zero,10008420 <__lo0bits+0x48>
10008418:	1806d23a 	srli	r3,r3,8
1000841c:	10800204 	addi	r2,r2,8
10008420:	194003cc 	andi	r5,r3,15
10008424:	2800021e 	bne	r5,zero,10008430 <__lo0bits+0x58>
10008428:	1806d13a 	srli	r3,r3,4
1000842c:	10800104 	addi	r2,r2,4
10008430:	194000cc 	andi	r5,r3,3
10008434:	2800021e 	bne	r5,zero,10008440 <__lo0bits+0x68>
10008438:	1806d0ba 	srli	r3,r3,2
1000843c:	10800084 	addi	r2,r2,2
10008440:	1940004c 	andi	r5,r3,1
10008444:	2800031e 	bne	r5,zero,10008454 <__lo0bits+0x7c>
10008448:	1806d07a 	srli	r3,r3,1
1000844c:	10800044 	addi	r2,r2,1
10008450:	18000726 	beq	r3,zero,10008470 <__lo0bits+0x98>
10008454:	20c00015 	stw	r3,0(r4)
10008458:	f800283a 	ret
1000845c:	1806d43a 	srli	r3,r3,16
10008460:	00800404 	movi	r2,16
10008464:	003fea06 	br	10008410 <__lo0bits+0x38>
10008468:	0005883a 	mov	r2,zero
1000846c:	f800283a 	ret
10008470:	00800804 	movi	r2,32
10008474:	f800283a 	ret
10008478:	1806d0ba 	srli	r3,r3,2
1000847c:	00800084 	movi	r2,2
10008480:	20c00015 	stw	r3,0(r4)
10008484:	f800283a 	ret

10008488 <__i2b>:
10008488:	20c01317 	ldw	r3,76(r4)
1000848c:	defffd04 	addi	sp,sp,-12
10008490:	dc400115 	stw	r17,4(sp)
10008494:	dc000015 	stw	r16,0(sp)
10008498:	dfc00215 	stw	ra,8(sp)
1000849c:	2021883a 	mov	r16,r4
100084a0:	2823883a 	mov	r17,r5
100084a4:	18000d26 	beq	r3,zero,100084dc <__i2b+0x54>
100084a8:	18800117 	ldw	r2,4(r3)
100084ac:	10001826 	beq	r2,zero,10008510 <__i2b+0x88>
100084b0:	11000017 	ldw	r4,0(r2)
100084b4:	19000115 	stw	r4,4(r3)
100084b8:	00c00044 	movi	r3,1
100084bc:	10000315 	stw	zero,12(r2)
100084c0:	14400515 	stw	r17,20(r2)
100084c4:	10c00415 	stw	r3,16(r2)
100084c8:	dfc00217 	ldw	ra,8(sp)
100084cc:	dc400117 	ldw	r17,4(sp)
100084d0:	dc000017 	ldw	r16,0(sp)
100084d4:	dec00304 	addi	sp,sp,12
100084d8:	f800283a 	ret
100084dc:	01800844 	movi	r6,33
100084e0:	01400104 	movi	r5,4
100084e4:	000af640 	call	1000af64 <_calloc_r>
100084e8:	80801315 	stw	r2,76(r16)
100084ec:	1007883a 	mov	r3,r2
100084f0:	103fed1e 	bne	r2,zero,100084a8 <__i2b+0x20>
100084f4:	01c40074 	movhi	r7,4097
100084f8:	01040074 	movhi	r4,4097
100084fc:	39c95204 	addi	r7,r7,9544
10008500:	000d883a 	mov	r6,zero
10008504:	01405004 	movi	r5,320
10008508:	21096704 	addi	r4,r4,9628
1000850c:	000aeec0 	call	1000aeec <__assert_func>
10008510:	01800704 	movi	r6,28
10008514:	01400044 	movi	r5,1
10008518:	8009883a 	mov	r4,r16
1000851c:	000af640 	call	1000af64 <_calloc_r>
10008520:	103ff426 	beq	r2,zero,100084f4 <__i2b+0x6c>
10008524:	00c00044 	movi	r3,1
10008528:	10c00115 	stw	r3,4(r2)
1000852c:	00c00084 	movi	r3,2
10008530:	10c00215 	stw	r3,8(r2)
10008534:	003fe006 	br	100084b8 <__i2b+0x30>

10008538 <__multiply>:
10008538:	defff004 	addi	sp,sp,-64
1000853c:	dd800c15 	stw	r22,48(sp)
10008540:	dc400715 	stw	r17,28(sp)
10008544:	2d800417 	ldw	r22,16(r5)
10008548:	34400417 	ldw	r17,16(r6)
1000854c:	dc800815 	stw	r18,32(sp)
10008550:	dc000615 	stw	r16,24(sp)
10008554:	dfc00f15 	stw	ra,60(sp)
10008558:	df000e15 	stw	fp,56(sp)
1000855c:	ddc00d15 	stw	r23,52(sp)
10008560:	dd400b15 	stw	r21,44(sp)
10008564:	dd000a15 	stw	r20,40(sp)
10008568:	dcc00915 	stw	r19,36(sp)
1000856c:	2825883a 	mov	r18,r5
10008570:	3021883a 	mov	r16,r6
10008574:	b4400516 	blt	r22,r17,1000858c <__multiply+0x54>
10008578:	8807883a 	mov	r3,r17
1000857c:	2821883a 	mov	r16,r5
10008580:	b023883a 	mov	r17,r22
10008584:	3025883a 	mov	r18,r6
10008588:	182d883a 	mov	r22,r3
1000858c:	80800217 	ldw	r2,8(r16)
10008590:	8d87883a 	add	r3,r17,r22
10008594:	d8c00015 	stw	r3,0(sp)
10008598:	81400117 	ldw	r5,4(r16)
1000859c:	10c0010e 	bge	r2,r3,100085a4 <__multiply+0x6c>
100085a0:	29400044 	addi	r5,r5,1
100085a4:	00080180 	call	10008018 <_Balloc>
100085a8:	d8800515 	stw	r2,20(sp)
100085ac:	10008c26 	beq	r2,zero,100087e0 <__multiply+0x2a8>
100085b0:	d8800017 	ldw	r2,0(sp)
100085b4:	102690ba 	slli	r19,r2,2
100085b8:	d8800517 	ldw	r2,20(sp)
100085bc:	15000504 	addi	r20,r2,20
100085c0:	a4c5883a 	add	r2,r20,r19
100085c4:	d8800115 	stw	r2,4(sp)
100085c8:	a0800a2e 	bgeu	r20,r2,100085f4 <__multiply+0xbc>
100085cc:	d8800117 	ldw	r2,4(sp)
100085d0:	d8c00517 	ldw	r3,20(sp)
100085d4:	000b883a 	mov	r5,zero
100085d8:	a009883a 	mov	r4,r20
100085dc:	10cdc83a 	sub	r6,r2,r3
100085e0:	31bffac4 	addi	r6,r6,-21
100085e4:	300cd0ba 	srli	r6,r6,2
100085e8:	31800044 	addi	r6,r6,1
100085ec:	300c90ba 	slli	r6,r6,2
100085f0:	0007f280 	call	10007f28 <memset>
100085f4:	b02c90ba 	slli	r22,r22,2
100085f8:	882290ba 	slli	r17,r17,2
100085fc:	94800504 	addi	r18,r18,20
10008600:	80800504 	addi	r2,r16,20
10008604:	9587883a 	add	r3,r18,r22
10008608:	d8800315 	stw	r2,12(sp)
1000860c:	d8c00215 	stw	r3,8(sp)
10008610:	1463883a 	add	r17,r2,r17
10008614:	90c0542e 	bgeu	r18,r3,10008768 <__multiply+0x230>
10008618:	80800544 	addi	r2,r16,21
1000861c:	88806d36 	bltu	r17,r2,100087d4 <__multiply+0x29c>
10008620:	8c05c83a 	sub	r2,r17,r16
10008624:	10bffac4 	addi	r2,r2,-21
10008628:	1004d0ba 	srli	r2,r2,2
1000862c:	10800044 	addi	r2,r2,1
10008630:	100490ba 	slli	r2,r2,2
10008634:	d8800415 	stw	r2,16(sp)
10008638:	00000606 	br	10008654 <__multiply+0x11c>
1000863c:	102ad43a 	srli	r21,r2,16
10008640:	a800271e 	bne	r21,zero,100086e0 <__multiply+0x1a8>
10008644:	d8800217 	ldw	r2,8(sp)
10008648:	94800104 	addi	r18,r18,4
1000864c:	a5000104 	addi	r20,r20,4
10008650:	9080452e 	bgeu	r18,r2,10008768 <__multiply+0x230>
10008654:	90800017 	ldw	r2,0(r18)
10008658:	15ffffcc 	andi	r23,r2,65535
1000865c:	b83ff726 	beq	r23,zero,1000863c <__multiply+0x104>
10008660:	dd400317 	ldw	r21,12(sp)
10008664:	a02d883a 	mov	r22,r20
10008668:	0027883a 	mov	r19,zero
1000866c:	af000017 	ldw	fp,0(r21)
10008670:	b4000017 	ldw	r16,0(r22)
10008674:	b80b883a 	mov	r5,r23
10008678:	e13fffcc 	andi	r4,fp,65535
1000867c:	000cd300 	call	1000cd30 <__mulsi3>
10008680:	e008d43a 	srli	r4,fp,16
10008684:	823fffcc 	andi	r8,r16,65535
10008688:	1205883a 	add	r2,r2,r8
1000868c:	b80b883a 	mov	r5,r23
10008690:	14e7883a 	add	r19,r2,r19
10008694:	8020d43a 	srli	r16,r16,16
10008698:	000cd300 	call	1000cd30 <__mulsi3>
1000869c:	9808d43a 	srli	r4,r19,16
100086a0:	1405883a 	add	r2,r2,r16
100086a4:	98ffffcc 	andi	r3,r19,65535
100086a8:	1105883a 	add	r2,r2,r4
100086ac:	1008943a 	slli	r4,r2,16
100086b0:	b5800104 	addi	r22,r22,4
100086b4:	ad400104 	addi	r21,r21,4
100086b8:	20c6b03a 	or	r3,r4,r3
100086bc:	b0ffff15 	stw	r3,-4(r22)
100086c0:	1026d43a 	srli	r19,r2,16
100086c4:	ac7fe936 	bltu	r21,r17,1000866c <__multiply+0x134>
100086c8:	d8800417 	ldw	r2,16(sp)
100086cc:	a085883a 	add	r2,r20,r2
100086d0:	14c00015 	stw	r19,0(r2)
100086d4:	90800017 	ldw	r2,0(r18)
100086d8:	102ad43a 	srli	r21,r2,16
100086dc:	a83fd926 	beq	r21,zero,10008644 <__multiply+0x10c>
100086e0:	a5c00017 	ldw	r23,0(r20)
100086e4:	dd800317 	ldw	r22,12(sp)
100086e8:	a027883a 	mov	r19,r20
100086ec:	b821883a 	mov	r16,r23
100086f0:	0039883a 	mov	fp,zero
100086f4:	b100000b 	ldhu	r4,0(r22)
100086f8:	a80b883a 	mov	r5,r21
100086fc:	9cc00104 	addi	r19,r19,4
10008700:	000cd300 	call	1000cd30 <__mulsi3>
10008704:	800cd43a 	srli	r6,r16,16
10008708:	b8ffffcc 	andi	r3,r23,65535
1000870c:	b5800104 	addi	r22,r22,4
10008710:	118d883a 	add	r6,r2,r6
10008714:	3739883a 	add	fp,r6,fp
10008718:	e004943a 	slli	r2,fp,16
1000871c:	9c000017 	ldw	r16,0(r19)
10008720:	a80b883a 	mov	r5,r21
10008724:	10c6b03a 	or	r3,r2,r3
10008728:	98ffff15 	stw	r3,-4(r19)
1000872c:	b13fff8b 	ldhu	r4,-2(r22)
10008730:	000cd300 	call	1000cd30 <__mulsi3>
10008734:	e00cd43a 	srli	r6,fp,16
10008738:	80ffffcc 	andi	r3,r16,65535
1000873c:	10c7883a 	add	r3,r2,r3
10008740:	19af883a 	add	r23,r3,r6
10008744:	b838d43a 	srli	fp,r23,16
10008748:	b47fea36 	bltu	r22,r17,100086f4 <__multiply+0x1bc>
1000874c:	d8800417 	ldw	r2,16(sp)
10008750:	94800104 	addi	r18,r18,4
10008754:	a085883a 	add	r2,r20,r2
10008758:	15c00015 	stw	r23,0(r2)
1000875c:	d8800217 	ldw	r2,8(sp)
10008760:	a5000104 	addi	r20,r20,4
10008764:	90bfbb36 	bltu	r18,r2,10008654 <__multiply+0x11c>
10008768:	d8800017 	ldw	r2,0(sp)
1000876c:	00800516 	blt	zero,r2,10008784 <__multiply+0x24c>
10008770:	00000906 	br	10008798 <__multiply+0x260>
10008774:	d8800017 	ldw	r2,0(sp)
10008778:	10bfffc4 	addi	r2,r2,-1
1000877c:	d8800015 	stw	r2,0(sp)
10008780:	10000526 	beq	r2,zero,10008798 <__multiply+0x260>
10008784:	d8c00117 	ldw	r3,4(sp)
10008788:	18bfff17 	ldw	r2,-4(r3)
1000878c:	18ffff04 	addi	r3,r3,-4
10008790:	d8c00115 	stw	r3,4(sp)
10008794:	103ff726 	beq	r2,zero,10008774 <__multiply+0x23c>
10008798:	d8800517 	ldw	r2,20(sp)
1000879c:	d8c00017 	ldw	r3,0(sp)
100087a0:	10c00415 	stw	r3,16(r2)
100087a4:	dfc00f17 	ldw	ra,60(sp)
100087a8:	df000e17 	ldw	fp,56(sp)
100087ac:	ddc00d17 	ldw	r23,52(sp)
100087b0:	dd800c17 	ldw	r22,48(sp)
100087b4:	dd400b17 	ldw	r21,44(sp)
100087b8:	dd000a17 	ldw	r20,40(sp)
100087bc:	dcc00917 	ldw	r19,36(sp)
100087c0:	dc800817 	ldw	r18,32(sp)
100087c4:	dc400717 	ldw	r17,28(sp)
100087c8:	dc000617 	ldw	r16,24(sp)
100087cc:	dec01004 	addi	sp,sp,64
100087d0:	f800283a 	ret
100087d4:	00800104 	movi	r2,4
100087d8:	d8800415 	stw	r2,16(sp)
100087dc:	003f9d06 	br	10008654 <__multiply+0x11c>
100087e0:	01c40074 	movhi	r7,4097
100087e4:	01040074 	movhi	r4,4097
100087e8:	39c95204 	addi	r7,r7,9544
100087ec:	000d883a 	mov	r6,zero
100087f0:	01405744 	movi	r5,349
100087f4:	21096704 	addi	r4,r4,9628
100087f8:	000aeec0 	call	1000aeec <__assert_func>

100087fc <__pow5mult>:
100087fc:	defffb04 	addi	sp,sp,-20
10008800:	dcc00315 	stw	r19,12(sp)
10008804:	dc000015 	stw	r16,0(sp)
10008808:	dfc00415 	stw	ra,16(sp)
1000880c:	dc800215 	stw	r18,8(sp)
10008810:	dc400115 	stw	r17,4(sp)
10008814:	308000cc 	andi	r2,r6,3
10008818:	3021883a 	mov	r16,r6
1000881c:	2027883a 	mov	r19,r4
10008820:	10002d1e 	bne	r2,zero,100088d8 <__pow5mult+0xdc>
10008824:	2825883a 	mov	r18,r5
10008828:	8021d0ba 	srai	r16,r16,2
1000882c:	80001926 	beq	r16,zero,10008894 <__pow5mult+0x98>
10008830:	9c401217 	ldw	r17,72(r19)
10008834:	8800061e 	bne	r17,zero,10008850 <__pow5mult+0x54>
10008838:	00002f06 	br	100088f8 <__pow5mult+0xfc>
1000883c:	8021d07a 	srai	r16,r16,1
10008840:	80001426 	beq	r16,zero,10008894 <__pow5mult+0x98>
10008844:	88800017 	ldw	r2,0(r17)
10008848:	10001a26 	beq	r2,zero,100088b4 <__pow5mult+0xb8>
1000884c:	1023883a 	mov	r17,r2
10008850:	8080004c 	andi	r2,r16,1
10008854:	103ff926 	beq	r2,zero,1000883c <__pow5mult+0x40>
10008858:	880d883a 	mov	r6,r17
1000885c:	900b883a 	mov	r5,r18
10008860:	9809883a 	mov	r4,r19
10008864:	00085380 	call	10008538 <__multiply>
10008868:	90001926 	beq	r18,zero,100088d0 <__pow5mult+0xd4>
1000886c:	91000117 	ldw	r4,4(r18)
10008870:	98c01317 	ldw	r3,76(r19)
10008874:	8021d07a 	srai	r16,r16,1
10008878:	200890ba 	slli	r4,r4,2
1000887c:	1907883a 	add	r3,r3,r4
10008880:	19000017 	ldw	r4,0(r3)
10008884:	91000015 	stw	r4,0(r18)
10008888:	1c800015 	stw	r18,0(r3)
1000888c:	1025883a 	mov	r18,r2
10008890:	803fec1e 	bne	r16,zero,10008844 <__pow5mult+0x48>
10008894:	9005883a 	mov	r2,r18
10008898:	dfc00417 	ldw	ra,16(sp)
1000889c:	dcc00317 	ldw	r19,12(sp)
100088a0:	dc800217 	ldw	r18,8(sp)
100088a4:	dc400117 	ldw	r17,4(sp)
100088a8:	dc000017 	ldw	r16,0(sp)
100088ac:	dec00504 	addi	sp,sp,20
100088b0:	f800283a 	ret
100088b4:	880d883a 	mov	r6,r17
100088b8:	880b883a 	mov	r5,r17
100088bc:	9809883a 	mov	r4,r19
100088c0:	00085380 	call	10008538 <__multiply>
100088c4:	88800015 	stw	r2,0(r17)
100088c8:	10000015 	stw	zero,0(r2)
100088cc:	003fdf06 	br	1000884c <__pow5mult+0x50>
100088d0:	1025883a 	mov	r18,r2
100088d4:	003fd906 	br	1000883c <__pow5mult+0x40>
100088d8:	100490ba 	slli	r2,r2,2
100088dc:	00c40074 	movhi	r3,4097
100088e0:	000f883a 	mov	r7,zero
100088e4:	10c7883a 	add	r3,r2,r3
100088e8:	19897617 	ldw	r6,9688(r3)
100088ec:	00080e00 	call	100080e0 <__multadd>
100088f0:	1025883a 	mov	r18,r2
100088f4:	003fcc06 	br	10008828 <__pow5mult+0x2c>
100088f8:	01400044 	movi	r5,1
100088fc:	9809883a 	mov	r4,r19
10008900:	00080180 	call	10008018 <_Balloc>
10008904:	1023883a 	mov	r17,r2
10008908:	10000726 	beq	r2,zero,10008928 <__pow5mult+0x12c>
1000890c:	00809c44 	movi	r2,625
10008910:	88800515 	stw	r2,20(r17)
10008914:	00800044 	movi	r2,1
10008918:	88800415 	stw	r2,16(r17)
1000891c:	9c401215 	stw	r17,72(r19)
10008920:	88000015 	stw	zero,0(r17)
10008924:	003fca06 	br	10008850 <__pow5mult+0x54>
10008928:	01c40074 	movhi	r7,4097
1000892c:	01040074 	movhi	r4,4097
10008930:	39c95204 	addi	r7,r7,9544
10008934:	000d883a 	mov	r6,zero
10008938:	01405004 	movi	r5,320
1000893c:	21096704 	addi	r4,r4,9628
10008940:	000aeec0 	call	1000aeec <__assert_func>

10008944 <__lshift>:
10008944:	defff804 	addi	sp,sp,-32
10008948:	dd800615 	stw	r22,24(sp)
1000894c:	dc000015 	stw	r16,0(sp)
10008950:	302dd17a 	srai	r22,r6,5
10008954:	2c000417 	ldw	r16,16(r5)
10008958:	28800217 	ldw	r2,8(r5)
1000895c:	dd000415 	stw	r20,16(sp)
10008960:	b421883a 	add	r16,r22,r16
10008964:	dcc00315 	stw	r19,12(sp)
10008968:	dc800215 	stw	r18,8(sp)
1000896c:	dc400115 	stw	r17,4(sp)
10008970:	dfc00715 	stw	ra,28(sp)
10008974:	dd400515 	stw	r21,20(sp)
10008978:	85000044 	addi	r20,r16,1
1000897c:	2827883a 	mov	r19,r5
10008980:	3025883a 	mov	r18,r6
10008984:	29400117 	ldw	r5,4(r5)
10008988:	2023883a 	mov	r17,r4
1000898c:	1500030e 	bge	r2,r20,1000899c <__lshift+0x58>
10008990:	1085883a 	add	r2,r2,r2
10008994:	29400044 	addi	r5,r5,1
10008998:	153ffd16 	blt	r2,r20,10008990 <__lshift+0x4c>
1000899c:	8809883a 	mov	r4,r17
100089a0:	00080180 	call	10008018 <_Balloc>
100089a4:	102b883a 	mov	r21,r2
100089a8:	10004126 	beq	r2,zero,10008ab0 <__lshift+0x16c>
100089ac:	11000504 	addi	r4,r2,20
100089b0:	0580050e 	bge	zero,r22,100089c8 <__lshift+0x84>
100089b4:	b02c90ba 	slli	r22,r22,2
100089b8:	000b883a 	mov	r5,zero
100089bc:	b00d883a 	mov	r6,r22
100089c0:	0007f280 	call	10007f28 <memset>
100089c4:	1589883a 	add	r4,r2,r22
100089c8:	9a000417 	ldw	r8,16(r19)
100089cc:	98c00504 	addi	r3,r19,20
100089d0:	948007cc 	andi	r18,r18,31
100089d4:	401090ba 	slli	r8,r8,2
100089d8:	1a11883a 	add	r8,r3,r8
100089dc:	90002c26 	beq	r18,zero,10008a90 <__lshift+0x14c>
100089e0:	01400804 	movi	r5,32
100089e4:	2c8bc83a 	sub	r5,r5,r18
100089e8:	2005883a 	mov	r2,r4
100089ec:	000f883a 	mov	r7,zero
100089f0:	19800017 	ldw	r6,0(r3)
100089f4:	10800104 	addi	r2,r2,4
100089f8:	18c00104 	addi	r3,r3,4
100089fc:	348c983a 	sll	r6,r6,r18
10008a00:	31ccb03a 	or	r6,r6,r7
10008a04:	11bfff15 	stw	r6,-4(r2)
10008a08:	19bfff17 	ldw	r6,-4(r3)
10008a0c:	314ed83a 	srl	r7,r6,r5
10008a10:	1a3ff736 	bltu	r3,r8,100089f0 <__lshift+0xac>
10008a14:	98800544 	addi	r2,r19,21
10008a18:	40802336 	bltu	r8,r2,10008aa8 <__lshift+0x164>
10008a1c:	44c7c83a 	sub	r3,r8,r19
10008a20:	18fffac4 	addi	r3,r3,-21
10008a24:	1806d0ba 	srli	r3,r3,2
10008a28:	18c00044 	addi	r3,r3,1
10008a2c:	180690ba 	slli	r3,r3,2
10008a30:	20c9883a 	add	r4,r4,r3
10008a34:	21c00015 	stw	r7,0(r4)
10008a38:	38000126 	beq	r7,zero,10008a40 <__lshift+0xfc>
10008a3c:	a021883a 	mov	r16,r20
10008a40:	ac000415 	stw	r16,16(r21)
10008a44:	98000726 	beq	r19,zero,10008a64 <__lshift+0x120>
10008a48:	98c00117 	ldw	r3,4(r19)
10008a4c:	88801317 	ldw	r2,76(r17)
10008a50:	180690ba 	slli	r3,r3,2
10008a54:	10c5883a 	add	r2,r2,r3
10008a58:	10c00017 	ldw	r3,0(r2)
10008a5c:	98c00015 	stw	r3,0(r19)
10008a60:	14c00015 	stw	r19,0(r2)
10008a64:	a805883a 	mov	r2,r21
10008a68:	dfc00717 	ldw	ra,28(sp)
10008a6c:	dd800617 	ldw	r22,24(sp)
10008a70:	dd400517 	ldw	r21,20(sp)
10008a74:	dd000417 	ldw	r20,16(sp)
10008a78:	dcc00317 	ldw	r19,12(sp)
10008a7c:	dc800217 	ldw	r18,8(sp)
10008a80:	dc400117 	ldw	r17,4(sp)
10008a84:	dc000017 	ldw	r16,0(sp)
10008a88:	dec00804 	addi	sp,sp,32
10008a8c:	f800283a 	ret
10008a90:	18800017 	ldw	r2,0(r3)
10008a94:	18c00104 	addi	r3,r3,4
10008a98:	21000104 	addi	r4,r4,4
10008a9c:	20bfff15 	stw	r2,-4(r4)
10008aa0:	1a3ffb36 	bltu	r3,r8,10008a90 <__lshift+0x14c>
10008aa4:	003fe606 	br	10008a40 <__lshift+0xfc>
10008aa8:	00c00104 	movi	r3,4
10008aac:	003fe006 	br	10008a30 <__lshift+0xec>
10008ab0:	01c40074 	movhi	r7,4097
10008ab4:	01040074 	movhi	r4,4097
10008ab8:	39c95204 	addi	r7,r7,9544
10008abc:	000d883a 	mov	r6,zero
10008ac0:	01407644 	movi	r5,473
10008ac4:	21096704 	addi	r4,r4,9628
10008ac8:	000aeec0 	call	1000aeec <__assert_func>

10008acc <__mcmp>:
10008acc:	21800417 	ldw	r6,16(r4)
10008ad0:	28c00417 	ldw	r3,16(r5)
10008ad4:	30c5c83a 	sub	r2,r6,r3
10008ad8:	30c00e1e 	bne	r6,r3,10008b14 <__mcmp+0x48>
10008adc:	180690ba 	slli	r3,r3,2
10008ae0:	21c00504 	addi	r7,r4,20
10008ae4:	29400504 	addi	r5,r5,20
10008ae8:	38c9883a 	add	r4,r7,r3
10008aec:	28c7883a 	add	r3,r5,r3
10008af0:	00000106 	br	10008af8 <__mcmp+0x2c>
10008af4:	3900082e 	bgeu	r7,r4,10008b18 <__mcmp+0x4c>
10008af8:	21bfff17 	ldw	r6,-4(r4)
10008afc:	197fff17 	ldw	r5,-4(r3)
10008b00:	213fff04 	addi	r4,r4,-4
10008b04:	18ffff04 	addi	r3,r3,-4
10008b08:	317ffa26 	beq	r6,r5,10008af4 <__mcmp+0x28>
10008b0c:	3140032e 	bgeu	r6,r5,10008b1c <__mcmp+0x50>
10008b10:	00bfffc4 	movi	r2,-1
10008b14:	f800283a 	ret
10008b18:	f800283a 	ret
10008b1c:	00800044 	movi	r2,1
10008b20:	f800283a 	ret

10008b24 <__mdiff>:
10008b24:	28800417 	ldw	r2,16(r5)
10008b28:	30c00417 	ldw	r3,16(r6)
10008b2c:	defffc04 	addi	sp,sp,-16
10008b30:	dc800215 	stw	r18,8(sp)
10008b34:	dc400115 	stw	r17,4(sp)
10008b38:	dc000015 	stw	r16,0(sp)
10008b3c:	dfc00315 	stw	ra,12(sp)
10008b40:	2823883a 	mov	r17,r5
10008b44:	3021883a 	mov	r16,r6
10008b48:	10e5c83a 	sub	r18,r2,r3
10008b4c:	10c0641e 	bne	r2,r3,10008ce0 <__mdiff+0x1bc>
10008b50:	180c90ba 	slli	r6,r3,2
10008b54:	29400504 	addi	r5,r5,20
10008b58:	80c00504 	addi	r3,r16,20
10008b5c:	2985883a 	add	r2,r5,r6
10008b60:	1987883a 	add	r3,r3,r6
10008b64:	00000106 	br	10008b6c <__mdiff+0x48>
10008b68:	2880642e 	bgeu	r5,r2,10008cfc <__mdiff+0x1d8>
10008b6c:	11bfff17 	ldw	r6,-4(r2)
10008b70:	19ffff17 	ldw	r7,-4(r3)
10008b74:	10bfff04 	addi	r2,r2,-4
10008b78:	18ffff04 	addi	r3,r3,-4
10008b7c:	31fffa26 	beq	r6,r7,10008b68 <__mdiff+0x44>
10008b80:	31c05236 	bltu	r6,r7,10008ccc <__mdiff+0x1a8>
10008b84:	89400117 	ldw	r5,4(r17)
10008b88:	00080180 	call	10008018 <_Balloc>
10008b8c:	10006226 	beq	r2,zero,10008d18 <__mdiff+0x1f4>
10008b90:	8a400417 	ldw	r9,16(r17)
10008b94:	83000417 	ldw	r12,16(r16)
10008b98:	8ac00504 	addi	r11,r17,20
10008b9c:	481090ba 	slli	r8,r9,2
10008ba0:	601890ba 	slli	r12,r12,2
10008ba4:	81800504 	addi	r6,r16,20
10008ba8:	13400504 	addi	r13,r2,20
10008bac:	14800315 	stw	r18,12(r2)
10008bb0:	5a11883a 	add	r8,r11,r8
10008bb4:	3319883a 	add	r12,r6,r12
10008bb8:	681d883a 	mov	r14,r13
10008bbc:	5815883a 	mov	r10,r11
10008bc0:	0007883a 	mov	r3,zero
10008bc4:	51000017 	ldw	r4,0(r10)
10008bc8:	31c00017 	ldw	r7,0(r6)
10008bcc:	73800104 	addi	r14,r14,4
10008bd0:	217fffcc 	andi	r5,r4,65535
10008bd4:	28cb883a 	add	r5,r5,r3
10008bd8:	38ffffcc 	andi	r3,r7,65535
10008bdc:	28cbc83a 	sub	r5,r5,r3
10008be0:	380ed43a 	srli	r7,r7,16
10008be4:	2006d43a 	srli	r3,r4,16
10008be8:	2809d43a 	srai	r4,r5,16
10008bec:	297fffcc 	andi	r5,r5,65535
10008bf0:	19c7c83a 	sub	r3,r3,r7
10008bf4:	1907883a 	add	r3,r3,r4
10008bf8:	1808943a 	slli	r4,r3,16
10008bfc:	31800104 	addi	r6,r6,4
10008c00:	1807d43a 	srai	r3,r3,16
10008c04:	214ab03a 	or	r5,r4,r5
10008c08:	717fff15 	stw	r5,-4(r14)
10008c0c:	52800104 	addi	r10,r10,4
10008c10:	333fec36 	bltu	r6,r12,10008bc4 <__mdiff+0xa0>
10008c14:	640fc83a 	sub	r7,r12,r16
10008c18:	39fffac4 	addi	r7,r7,-21
10008c1c:	84000544 	addi	r16,r16,21
10008c20:	380ed0ba 	srli	r7,r7,2
10008c24:	64003336 	bltu	r12,r16,10008cf4 <__mdiff+0x1d0>
10008c28:	380890ba 	slli	r4,r7,2
10008c2c:	6909883a 	add	r4,r13,r4
10008c30:	64002e36 	bltu	r12,r16,10008cec <__mdiff+0x1c8>
10008c34:	39800044 	addi	r6,r7,1
10008c38:	300c90ba 	slli	r6,r6,2
10008c3c:	5997883a 	add	r11,r11,r6
10008c40:	699b883a 	add	r13,r13,r6
10008c44:	5a00152e 	bgeu	r11,r8,10008c9c <__mdiff+0x178>
10008c48:	680f883a 	mov	r7,r13
10008c4c:	580d883a 	mov	r6,r11
10008c50:	31000017 	ldw	r4,0(r6)
10008c54:	39c00104 	addi	r7,r7,4
10008c58:	31800104 	addi	r6,r6,4
10008c5c:	217fffcc 	andi	r5,r4,65535
10008c60:	28cb883a 	add	r5,r5,r3
10008c64:	2815d43a 	srai	r10,r5,16
10008c68:	2006d43a 	srli	r3,r4,16
10008c6c:	297fffcc 	andi	r5,r5,65535
10008c70:	1a87883a 	add	r3,r3,r10
10008c74:	1814943a 	slli	r10,r3,16
10008c78:	1807d43a 	srai	r3,r3,16
10008c7c:	514ab03a 	or	r5,r10,r5
10008c80:	397fff15 	stw	r5,-4(r7)
10008c84:	323ff236 	bltu	r6,r8,10008c50 <__mdiff+0x12c>
10008c88:	413fffc4 	addi	r4,r8,-1
10008c8c:	22c9c83a 	sub	r4,r4,r11
10008c90:	2008d0ba 	srli	r4,r4,2
10008c94:	200890ba 	slli	r4,r4,2
10008c98:	6909883a 	add	r4,r13,r4
10008c9c:	2800041e 	bne	r5,zero,10008cb0 <__mdiff+0x18c>
10008ca0:	20ffff17 	ldw	r3,-4(r4)
10008ca4:	4a7fffc4 	addi	r9,r9,-1
10008ca8:	213fff04 	addi	r4,r4,-4
10008cac:	183ffc26 	beq	r3,zero,10008ca0 <__mdiff+0x17c>
10008cb0:	12400415 	stw	r9,16(r2)
10008cb4:	dfc00317 	ldw	ra,12(sp)
10008cb8:	dc800217 	ldw	r18,8(sp)
10008cbc:	dc400117 	ldw	r17,4(sp)
10008cc0:	dc000017 	ldw	r16,0(sp)
10008cc4:	dec00404 	addi	sp,sp,16
10008cc8:	f800283a 	ret
10008ccc:	8805883a 	mov	r2,r17
10008cd0:	04800044 	movi	r18,1
10008cd4:	8023883a 	mov	r17,r16
10008cd8:	1021883a 	mov	r16,r2
10008cdc:	003fa906 	br	10008b84 <__mdiff+0x60>
10008ce0:	903ffa16 	blt	r18,zero,10008ccc <__mdiff+0x1a8>
10008ce4:	0025883a 	mov	r18,zero
10008ce8:	003fa606 	br	10008b84 <__mdiff+0x60>
10008cec:	01800104 	movi	r6,4
10008cf0:	003fd206 	br	10008c3c <__mdiff+0x118>
10008cf4:	0009883a 	mov	r4,zero
10008cf8:	003fcc06 	br	10008c2c <__mdiff+0x108>
10008cfc:	000b883a 	mov	r5,zero
10008d00:	00080180 	call	10008018 <_Balloc>
10008d04:	10000b26 	beq	r2,zero,10008d34 <__mdiff+0x210>
10008d08:	00c00044 	movi	r3,1
10008d0c:	10c00415 	stw	r3,16(r2)
10008d10:	10000515 	stw	zero,20(r2)
10008d14:	003fe706 	br	10008cb4 <__mdiff+0x190>
10008d18:	01c40074 	movhi	r7,4097
10008d1c:	01040074 	movhi	r4,4097
10008d20:	39c95204 	addi	r7,r7,9544
10008d24:	000d883a 	mov	r6,zero
10008d28:	01409004 	movi	r5,576
10008d2c:	21096704 	addi	r4,r4,9628
10008d30:	000aeec0 	call	1000aeec <__assert_func>
10008d34:	01c40074 	movhi	r7,4097
10008d38:	01040074 	movhi	r4,4097
10008d3c:	39c95204 	addi	r7,r7,9544
10008d40:	000d883a 	mov	r6,zero
10008d44:	01408c84 	movi	r5,562
10008d48:	21096704 	addi	r4,r4,9628
10008d4c:	000aeec0 	call	1000aeec <__assert_func>

10008d50 <__ulp>:
10008d50:	28dffc2c 	andhi	r3,r5,32752
10008d54:	017f3034 	movhi	r5,64704
10008d58:	1947883a 	add	r3,r3,r5
10008d5c:	00c0020e 	bge	zero,r3,10008d68 <__ulp+0x18>
10008d60:	0005883a 	mov	r2,zero
10008d64:	f800283a 	ret
10008d68:	00c7c83a 	sub	r3,zero,r3
10008d6c:	1807d53a 	srai	r3,r3,20
10008d70:	18800508 	cmpgei	r2,r3,20
10008d74:	1000041e 	bne	r2,zero,10008d88 <__ulp+0x38>
10008d78:	00800234 	movhi	r2,8
10008d7c:	10c7d83a 	sra	r3,r2,r3
10008d80:	0005883a 	mov	r2,zero
10008d84:	f800283a 	ret
10008d88:	193ffb04 	addi	r4,r3,-20
10008d8c:	208007c8 	cmpgei	r2,r4,31
10008d90:	0007883a 	mov	r3,zero
10008d94:	1000031e 	bne	r2,zero,10008da4 <__ulp+0x54>
10008d98:	00a00034 	movhi	r2,32768
10008d9c:	1104d83a 	srl	r2,r2,r4
10008da0:	f800283a 	ret
10008da4:	00800044 	movi	r2,1
10008da8:	f800283a 	ret

10008dac <__b2d>:
10008dac:	defffa04 	addi	sp,sp,-24
10008db0:	dc400115 	stw	r17,4(sp)
10008db4:	24400417 	ldw	r17,16(r4)
10008db8:	dc000015 	stw	r16,0(sp)
10008dbc:	24000504 	addi	r16,r4,20
10008dc0:	882290ba 	slli	r17,r17,2
10008dc4:	dc800215 	stw	r18,8(sp)
10008dc8:	dd000415 	stw	r20,16(sp)
10008dcc:	8463883a 	add	r17,r16,r17
10008dd0:	8cbfff17 	ldw	r18,-4(r17)
10008dd4:	dcc00315 	stw	r19,12(sp)
10008dd8:	dfc00515 	stw	ra,20(sp)
10008ddc:	9009883a 	mov	r4,r18
10008de0:	2827883a 	mov	r19,r5
10008de4:	00083740 	call	10008374 <__hi0bits>
10008de8:	00c00804 	movi	r3,32
10008dec:	1889c83a 	sub	r4,r3,r2
10008df0:	99000015 	stw	r4,0(r19)
10008df4:	110002c8 	cmpgei	r4,r2,11
10008df8:	8d3fff04 	addi	r20,r17,-4
10008dfc:	20002026 	beq	r4,zero,10008e80 <__b2d+0xd4>
10008e00:	10bffd44 	addi	r2,r2,-11
10008e04:	85000e2e 	bgeu	r16,r20,10008e40 <__b2d+0x94>
10008e08:	897ffe17 	ldw	r5,-8(r17)
10008e0c:	10001226 	beq	r2,zero,10008e58 <__b2d+0xac>
10008e10:	1889c83a 	sub	r4,r3,r2
10008e14:	90a4983a 	sll	r18,r18,r2
10008e18:	2906d83a 	srl	r3,r5,r4
10008e1c:	89bffe04 	addi	r6,r17,-8
10008e20:	2884983a 	sll	r2,r5,r2
10008e24:	90e4b03a 	or	r18,r18,r3
10008e28:	90cffc34 	orhi	r3,r18,16368
10008e2c:	81800c2e 	bgeu	r16,r6,10008e60 <__b2d+0xb4>
10008e30:	897ffd17 	ldw	r5,-12(r17)
10008e34:	2908d83a 	srl	r4,r5,r4
10008e38:	1104b03a 	or	r2,r2,r4
10008e3c:	00000806 	br	10008e60 <__b2d+0xb4>
10008e40:	10000426 	beq	r2,zero,10008e54 <__b2d+0xa8>
10008e44:	90a4983a 	sll	r18,r18,r2
10008e48:	0005883a 	mov	r2,zero
10008e4c:	90cffc34 	orhi	r3,r18,16368
10008e50:	00000306 	br	10008e60 <__b2d+0xb4>
10008e54:	000b883a 	mov	r5,zero
10008e58:	90cffc34 	orhi	r3,r18,16368
10008e5c:	2805883a 	mov	r2,r5
10008e60:	dfc00517 	ldw	ra,20(sp)
10008e64:	dd000417 	ldw	r20,16(sp)
10008e68:	dcc00317 	ldw	r19,12(sp)
10008e6c:	dc800217 	ldw	r18,8(sp)
10008e70:	dc400117 	ldw	r17,4(sp)
10008e74:	dc000017 	ldw	r16,0(sp)
10008e78:	dec00604 	addi	sp,sp,24
10008e7c:	f800283a 	ret
10008e80:	014002c4 	movi	r5,11
10008e84:	2889c83a 	sub	r4,r5,r2
10008e88:	9106d83a 	srl	r3,r18,r4
10008e8c:	18cffc34 	orhi	r3,r3,16368
10008e90:	85000536 	bltu	r16,r20,10008ea8 <__b2d+0xfc>
10008e94:	000b883a 	mov	r5,zero
10008e98:	10800544 	addi	r2,r2,21
10008e9c:	9084983a 	sll	r2,r18,r2
10008ea0:	1144b03a 	or	r2,r2,r5
10008ea4:	003fee06 	br	10008e60 <__b2d+0xb4>
10008ea8:	897ffe17 	ldw	r5,-8(r17)
10008eac:	290ad83a 	srl	r5,r5,r4
10008eb0:	003ff906 	br	10008e98 <__b2d+0xec>

10008eb4 <__d2b>:
10008eb4:	defff804 	addi	sp,sp,-32
10008eb8:	dd000615 	stw	r20,24(sp)
10008ebc:	2829883a 	mov	r20,r5
10008ec0:	01400044 	movi	r5,1
10008ec4:	dcc00515 	stw	r19,20(sp)
10008ec8:	dc000215 	stw	r16,8(sp)
10008ecc:	dfc00715 	stw	ra,28(sp)
10008ed0:	dc800415 	stw	r18,16(sp)
10008ed4:	dc400315 	stw	r17,12(sp)
10008ed8:	3021883a 	mov	r16,r6
10008edc:	3827883a 	mov	r19,r7
10008ee0:	00080180 	call	10008018 <_Balloc>
10008ee4:	10004526 	beq	r2,zero,10008ffc <__d2b+0x148>
10008ee8:	8024d53a 	srli	r18,r16,20
10008eec:	01800434 	movhi	r6,16
10008ef0:	31bfffc4 	addi	r6,r6,-1
10008ef4:	9481ffcc 	andi	r18,r18,2047
10008ef8:	1023883a 	mov	r17,r2
10008efc:	81a0703a 	and	r16,r16,r6
10008f00:	90000126 	beq	r18,zero,10008f08 <__d2b+0x54>
10008f04:	84000434 	orhi	r16,r16,16
10008f08:	dc000115 	stw	r16,4(sp)
10008f0c:	a0002226 	beq	r20,zero,10008f98 <__d2b+0xe4>
10008f10:	d809883a 	mov	r4,sp
10008f14:	dd000015 	stw	r20,0(sp)
10008f18:	00083d80 	call	100083d8 <__lo0bits>
10008f1c:	d8c00117 	ldw	r3,4(sp)
10008f20:	10003326 	beq	r2,zero,10008ff0 <__d2b+0x13c>
10008f24:	01000804 	movi	r4,32
10008f28:	2089c83a 	sub	r4,r4,r2
10008f2c:	1908983a 	sll	r4,r3,r4
10008f30:	d9400017 	ldw	r5,0(sp)
10008f34:	1886d83a 	srl	r3,r3,r2
10008f38:	2148b03a 	or	r4,r4,r5
10008f3c:	89000515 	stw	r4,20(r17)
10008f40:	d8c00115 	stw	r3,4(sp)
10008f44:	88c00615 	stw	r3,24(r17)
10008f48:	1800271e 	bne	r3,zero,10008fe8 <__d2b+0x134>
10008f4c:	04000044 	movi	r16,1
10008f50:	8c000415 	stw	r16,16(r17)
10008f54:	90001926 	beq	r18,zero,10008fbc <__d2b+0x108>
10008f58:	00c00d44 	movi	r3,53
10008f5c:	94bef344 	addi	r18,r18,-1075
10008f60:	90a5883a 	add	r18,r18,r2
10008f64:	1885c83a 	sub	r2,r3,r2
10008f68:	d8c00817 	ldw	r3,32(sp)
10008f6c:	9c800015 	stw	r18,0(r19)
10008f70:	18800015 	stw	r2,0(r3)
10008f74:	8805883a 	mov	r2,r17
10008f78:	dfc00717 	ldw	ra,28(sp)
10008f7c:	dd000617 	ldw	r20,24(sp)
10008f80:	dcc00517 	ldw	r19,20(sp)
10008f84:	dc800417 	ldw	r18,16(sp)
10008f88:	dc400317 	ldw	r17,12(sp)
10008f8c:	dc000217 	ldw	r16,8(sp)
10008f90:	dec00804 	addi	sp,sp,32
10008f94:	f800283a 	ret
10008f98:	d9000104 	addi	r4,sp,4
10008f9c:	00083d80 	call	100083d8 <__lo0bits>
10008fa0:	00c00044 	movi	r3,1
10008fa4:	88c00415 	stw	r3,16(r17)
10008fa8:	d8c00117 	ldw	r3,4(sp)
10008fac:	10800804 	addi	r2,r2,32
10008fb0:	04000044 	movi	r16,1
10008fb4:	88c00515 	stw	r3,20(r17)
10008fb8:	903fe71e 	bne	r18,zero,10008f58 <__d2b+0xa4>
10008fbc:	800690ba 	slli	r3,r16,2
10008fc0:	10bef384 	addi	r2,r2,-1074
10008fc4:	98800015 	stw	r2,0(r19)
10008fc8:	88c5883a 	add	r2,r17,r3
10008fcc:	11000417 	ldw	r4,16(r2)
10008fd0:	8020917a 	slli	r16,r16,5
10008fd4:	00083740 	call	10008374 <__hi0bits>
10008fd8:	80a1c83a 	sub	r16,r16,r2
10008fdc:	d8800817 	ldw	r2,32(sp)
10008fe0:	14000015 	stw	r16,0(r2)
10008fe4:	003fe306 	br	10008f74 <__d2b+0xc0>
10008fe8:	04000084 	movi	r16,2
10008fec:	003fd806 	br	10008f50 <__d2b+0x9c>
10008ff0:	d9000017 	ldw	r4,0(sp)
10008ff4:	89000515 	stw	r4,20(r17)
10008ff8:	003fd206 	br	10008f44 <__d2b+0x90>
10008ffc:	01c40074 	movhi	r7,4097
10009000:	01040074 	movhi	r4,4097
10009004:	39c95204 	addi	r7,r7,9544
10009008:	000d883a 	mov	r6,zero
1000900c:	0140c284 	movi	r5,778
10009010:	21096704 	addi	r4,r4,9628
10009014:	000aeec0 	call	1000aeec <__assert_func>

10009018 <__ratio>:
10009018:	defff904 	addi	sp,sp,-28
1000901c:	dc400315 	stw	r17,12(sp)
10009020:	2823883a 	mov	r17,r5
10009024:	d80b883a 	mov	r5,sp
10009028:	dfc00615 	stw	ra,24(sp)
1000902c:	dcc00515 	stw	r19,20(sp)
10009030:	dc800415 	stw	r18,16(sp)
10009034:	2027883a 	mov	r19,r4
10009038:	dc000215 	stw	r16,8(sp)
1000903c:	0008dac0 	call	10008dac <__b2d>
10009040:	d9400104 	addi	r5,sp,4
10009044:	8809883a 	mov	r4,r17
10009048:	1025883a 	mov	r18,r2
1000904c:	1821883a 	mov	r16,r3
10009050:	0008dac0 	call	10008dac <__b2d>
10009054:	89000417 	ldw	r4,16(r17)
10009058:	9a000417 	ldw	r8,16(r19)
1000905c:	d9400117 	ldw	r5,4(sp)
10009060:	100d883a 	mov	r6,r2
10009064:	4111c83a 	sub	r8,r8,r4
10009068:	d9000017 	ldw	r4,0(sp)
1000906c:	4010917a 	slli	r8,r8,5
10009070:	180f883a 	mov	r7,r3
10009074:	2149c83a 	sub	r4,r4,r5
10009078:	4111883a 	add	r8,r8,r4
1000907c:	02000c0e 	bge	zero,r8,100090b0 <__ratio+0x98>
10009080:	4010953a 	slli	r8,r8,20
10009084:	4421883a 	add	r16,r8,r16
10009088:	9009883a 	mov	r4,r18
1000908c:	800b883a 	mov	r5,r16
10009090:	000d6480 	call	1000d648 <__divdf3>
10009094:	dfc00617 	ldw	ra,24(sp)
10009098:	dcc00517 	ldw	r19,20(sp)
1000909c:	dc800417 	ldw	r18,16(sp)
100090a0:	dc400317 	ldw	r17,12(sp)
100090a4:	dc000217 	ldw	r16,8(sp)
100090a8:	dec00704 	addi	sp,sp,28
100090ac:	f800283a 	ret
100090b0:	4010953a 	slli	r8,r8,20
100090b4:	1a0fc83a 	sub	r7,r3,r8
100090b8:	003ff306 	br	10009088 <__ratio+0x70>

100090bc <_mprec_log10>:
100090bc:	defffe04 	addi	sp,sp,-8
100090c0:	dc000015 	stw	r16,0(sp)
100090c4:	dfc00115 	stw	ra,4(sp)
100090c8:	20800608 	cmpgei	r2,r4,24
100090cc:	2021883a 	mov	r16,r4
100090d0:	10000f26 	beq	r2,zero,10009110 <_mprec_log10+0x54>
100090d4:	0009883a 	mov	r4,zero
100090d8:	014ffc34 	movhi	r5,16368
100090dc:	000d883a 	mov	r6,zero
100090e0:	01d00934 	movhi	r7,16420
100090e4:	000e1c80 	call	1000e1c8 <__muldf3>
100090e8:	843fffc4 	addi	r16,r16,-1
100090ec:	1009883a 	mov	r4,r2
100090f0:	180b883a 	mov	r5,r3
100090f4:	803ff91e 	bne	r16,zero,100090dc <_mprec_log10+0x20>
100090f8:	2005883a 	mov	r2,r4
100090fc:	2807883a 	mov	r3,r5
10009100:	dfc00117 	ldw	ra,4(sp)
10009104:	dc000017 	ldw	r16,0(sp)
10009108:	dec00204 	addi	sp,sp,8
1000910c:	f800283a 	ret
10009110:	202090fa 	slli	r16,r4,3
10009114:	00840074 	movhi	r2,4097
10009118:	10898e04 	addi	r2,r2,9784
1000911c:	1421883a 	add	r16,r2,r16
10009120:	81000017 	ldw	r4,0(r16)
10009124:	81400117 	ldw	r5,4(r16)
10009128:	003ff306 	br	100090f8 <_mprec_log10+0x3c>

1000912c <__copybits>:
1000912c:	297fffc4 	addi	r5,r5,-1
10009130:	280fd17a 	srai	r7,r5,5
10009134:	31400417 	ldw	r5,16(r6)
10009138:	30800504 	addi	r2,r6,20
1000913c:	39c00044 	addi	r7,r7,1
10009140:	280a90ba 	slli	r5,r5,2
10009144:	380e90ba 	slli	r7,r7,2
10009148:	114b883a 	add	r5,r2,r5
1000914c:	21cf883a 	add	r7,r4,r7
10009150:	11400c2e 	bgeu	r2,r5,10009184 <__copybits+0x58>
10009154:	2007883a 	mov	r3,r4
10009158:	12000017 	ldw	r8,0(r2)
1000915c:	10800104 	addi	r2,r2,4
10009160:	18c00104 	addi	r3,r3,4
10009164:	1a3fff15 	stw	r8,-4(r3)
10009168:	117ffb36 	bltu	r2,r5,10009158 <__copybits+0x2c>
1000916c:	2985c83a 	sub	r2,r5,r6
10009170:	10bffac4 	addi	r2,r2,-21
10009174:	1004d0ba 	srli	r2,r2,2
10009178:	10800044 	addi	r2,r2,1
1000917c:	100490ba 	slli	r2,r2,2
10009180:	2089883a 	add	r4,r4,r2
10009184:	21c0072e 	bgeu	r4,r7,100091a4 <__copybits+0x78>
10009188:	39bfffc4 	addi	r6,r7,-1
1000918c:	310dc83a 	sub	r6,r6,r4
10009190:	300cd0ba 	srli	r6,r6,2
10009194:	000b883a 	mov	r5,zero
10009198:	31800044 	addi	r6,r6,1
1000919c:	300c90ba 	slli	r6,r6,2
100091a0:	0007f281 	jmpi	10007f28 <memset>
100091a4:	f800283a 	ret

100091a8 <__any_on>:
100091a8:	20c00417 	ldw	r3,16(r4)
100091ac:	280dd17a 	srai	r6,r5,5
100091b0:	21000504 	addi	r4,r4,20
100091b4:	1980080e 	bge	r3,r6,100091d8 <__any_on+0x30>
100091b8:	180490ba 	slli	r2,r3,2
100091bc:	2085883a 	add	r2,r4,r2
100091c0:	20800f2e 	bgeu	r4,r2,10009200 <__any_on+0x58>
100091c4:	10ffff17 	ldw	r3,-4(r2)
100091c8:	10bfff04 	addi	r2,r2,-4
100091cc:	183ffc26 	beq	r3,zero,100091c0 <__any_on+0x18>
100091d0:	00800044 	movi	r2,1
100091d4:	f800283a 	ret
100091d8:	300490ba 	slli	r2,r6,2
100091dc:	2085883a 	add	r2,r4,r2
100091e0:	30fff70e 	bge	r6,r3,100091c0 <__any_on+0x18>
100091e4:	294007cc 	andi	r5,r5,31
100091e8:	283ff526 	beq	r5,zero,100091c0 <__any_on+0x18>
100091ec:	11800017 	ldw	r6,0(r2)
100091f0:	3146d83a 	srl	r3,r6,r5
100091f4:	194a983a 	sll	r5,r3,r5
100091f8:	317ff51e 	bne	r6,r5,100091d0 <__any_on+0x28>
100091fc:	003ff006 	br	100091c0 <__any_on+0x18>
10009200:	0005883a 	mov	r2,zero
10009204:	f800283a 	ret

10009208 <_realloc_r>:
10009208:	defff504 	addi	sp,sp,-44
1000920c:	dc800315 	stw	r18,12(sp)
10009210:	dfc00a15 	stw	ra,40(sp)
10009214:	df000915 	stw	fp,36(sp)
10009218:	ddc00815 	stw	r23,32(sp)
1000921c:	dd800715 	stw	r22,28(sp)
10009220:	dd400615 	stw	r21,24(sp)
10009224:	dd000515 	stw	r20,20(sp)
10009228:	dcc00415 	stw	r19,16(sp)
1000922c:	dc400215 	stw	r17,8(sp)
10009230:	dc000115 	stw	r16,4(sp)
10009234:	3025883a 	mov	r18,r6
10009238:	28008b26 	beq	r5,zero,10009468 <_realloc_r+0x260>
1000923c:	2821883a 	mov	r16,r5
10009240:	2027883a 	mov	r19,r4
10009244:	944002c4 	addi	r17,r18,11
10009248:	000fc040 	call	1000fc04 <__malloc_lock>
1000924c:	888005f0 	cmpltui	r2,r17,23
10009250:	1000521e 	bne	r2,zero,1000939c <_realloc_r+0x194>
10009254:	017ffe04 	movi	r5,-8
10009258:	8962703a 	and	r17,r17,r5
1000925c:	8807883a 	mov	r3,r17
10009260:	88005116 	blt	r17,zero,100093a8 <_realloc_r+0x1a0>
10009264:	8c805036 	bltu	r17,r18,100093a8 <_realloc_r+0x1a0>
10009268:	80bfff17 	ldw	r2,-4(r16)
1000926c:	017fff04 	movi	r5,-4
10009270:	857ffe04 	addi	r21,r16,-8
10009274:	1168703a 	and	r20,r2,r5
10009278:	ad2d883a 	add	r22,r21,r20
1000927c:	a0c0390e 	bge	r20,r3,10009364 <_realloc_r+0x15c>
10009280:	07040074 	movhi	fp,4097
10009284:	e70bd304 	addi	fp,fp,12108
10009288:	e2000217 	ldw	r8,8(fp)
1000928c:	b1000117 	ldw	r4,4(r22)
10009290:	45808e26 	beq	r8,r22,100094cc <_realloc_r+0x2c4>
10009294:	01bfff84 	movi	r6,-2
10009298:	218c703a 	and	r6,r4,r6
1000929c:	b18d883a 	add	r6,r22,r6
100092a0:	31800117 	ldw	r6,4(r6)
100092a4:	3180004c 	andi	r6,r6,1
100092a8:	30004f1e 	bne	r6,zero,100093e8 <_realloc_r+0x1e0>
100092ac:	2148703a 	and	r4,r4,r5
100092b0:	a10b883a 	add	r5,r20,r4
100092b4:	28c0bf0e 	bge	r5,r3,100095b4 <_realloc_r+0x3ac>
100092b8:	1080004c 	andi	r2,r2,1
100092bc:	10004c1e 	bne	r2,zero,100093f0 <_realloc_r+0x1e8>
100092c0:	81fffe17 	ldw	r7,-8(r16)
100092c4:	00bfff04 	movi	r2,-4
100092c8:	a9cfc83a 	sub	r7,r21,r7
100092cc:	39400117 	ldw	r5,4(r7)
100092d0:	288a703a 	and	r5,r5,r2
100092d4:	b0000426 	beq	r22,zero,100092e8 <_realloc_r+0xe0>
100092d8:	a16f883a 	add	r23,r20,r5
100092dc:	b92f883a 	add	r23,r23,r4
100092e0:	4580bf26 	beq	r8,r22,100095e0 <_realloc_r+0x3d8>
100092e4:	b8c0930e 	bge	r23,r3,10009534 <_realloc_r+0x32c>
100092e8:	38004126 	beq	r7,zero,100093f0 <_realloc_r+0x1e8>
100092ec:	a16f883a 	add	r23,r20,r5
100092f0:	b8c03f16 	blt	r23,r3,100093f0 <_realloc_r+0x1e8>
100092f4:	38800317 	ldw	r2,12(r7)
100092f8:	38c00217 	ldw	r3,8(r7)
100092fc:	a1bfff04 	addi	r6,r20,-4
10009300:	31400968 	cmpgeui	r5,r6,37
10009304:	18800315 	stw	r2,12(r3)
10009308:	10c00215 	stw	r3,8(r2)
1000930c:	39000204 	addi	r4,r7,8
10009310:	3ded883a 	add	r22,r7,r23
10009314:	2800941e 	bne	r5,zero,10009568 <_realloc_r+0x360>
10009318:	30800530 	cmpltui	r2,r6,20
1000931c:	80c00017 	ldw	r3,0(r16)
10009320:	1000df1e 	bne	r2,zero,100096a0 <_realloc_r+0x498>
10009324:	38c00215 	stw	r3,8(r7)
10009328:	80c00117 	ldw	r3,4(r16)
1000932c:	30800728 	cmpgeui	r2,r6,28
10009330:	38c00315 	stw	r3,12(r7)
10009334:	1000dc1e 	bne	r2,zero,100096a8 <_realloc_r+0x4a0>
10009338:	80c00217 	ldw	r3,8(r16)
1000933c:	38800404 	addi	r2,r7,16
10009340:	84000204 	addi	r16,r16,8
10009344:	10c00015 	stw	r3,0(r2)
10009348:	80c00117 	ldw	r3,4(r16)
1000934c:	b829883a 	mov	r20,r23
10009350:	382b883a 	mov	r21,r7
10009354:	10c00115 	stw	r3,4(r2)
10009358:	80c00217 	ldw	r3,8(r16)
1000935c:	2021883a 	mov	r16,r4
10009360:	10c00215 	stw	r3,8(r2)
10009364:	a9800117 	ldw	r6,4(r21)
10009368:	a445c83a 	sub	r2,r20,r17
1000936c:	10c00430 	cmpltui	r3,r2,16
10009370:	3180004c 	andi	r6,r6,1
10009374:	18004926 	beq	r3,zero,1000949c <_realloc_r+0x294>
10009378:	a18cb03a 	or	r6,r20,r6
1000937c:	a9800115 	stw	r6,4(r21)
10009380:	b0800117 	ldw	r2,4(r22)
10009384:	10800054 	ori	r2,r2,1
10009388:	b0800115 	stw	r2,4(r22)
1000938c:	9809883a 	mov	r4,r19
10009390:	000fc280 	call	1000fc28 <__malloc_unlock>
10009394:	8025883a 	mov	r18,r16
10009398:	00000606 	br	100093b4 <_realloc_r+0x1ac>
1000939c:	04400404 	movi	r17,16
100093a0:	00c00404 	movi	r3,16
100093a4:	8cbfb02e 	bgeu	r17,r18,10009268 <_realloc_r+0x60>
100093a8:	00800304 	movi	r2,12
100093ac:	98800015 	stw	r2,0(r19)
100093b0:	0025883a 	mov	r18,zero
100093b4:	9005883a 	mov	r2,r18
100093b8:	dfc00a17 	ldw	ra,40(sp)
100093bc:	df000917 	ldw	fp,36(sp)
100093c0:	ddc00817 	ldw	r23,32(sp)
100093c4:	dd800717 	ldw	r22,28(sp)
100093c8:	dd400617 	ldw	r21,24(sp)
100093cc:	dd000517 	ldw	r20,20(sp)
100093d0:	dcc00417 	ldw	r19,16(sp)
100093d4:	dc800317 	ldw	r18,12(sp)
100093d8:	dc400217 	ldw	r17,8(sp)
100093dc:	dc000117 	ldw	r16,4(sp)
100093e0:	dec00b04 	addi	sp,sp,44
100093e4:	f800283a 	ret
100093e8:	1080004c 	andi	r2,r2,1
100093ec:	10006c26 	beq	r2,zero,100095a0 <_realloc_r+0x398>
100093f0:	900b883a 	mov	r5,r18
100093f4:	9809883a 	mov	r4,r19
100093f8:	000744c0 	call	1000744c <_malloc_r>
100093fc:	1025883a 	mov	r18,r2
10009400:	10001626 	beq	r2,zero,1000945c <_realloc_r+0x254>
10009404:	80bfff17 	ldw	r2,-4(r16)
10009408:	013fff84 	movi	r4,-2
1000940c:	90fffe04 	addi	r3,r18,-8
10009410:	1104703a 	and	r2,r2,r4
10009414:	a885883a 	add	r2,r21,r2
10009418:	10c05b26 	beq	r2,r3,10009588 <_realloc_r+0x380>
1000941c:	a1bfff04 	addi	r6,r20,-4
10009420:	30800968 	cmpgeui	r2,r6,37
10009424:	10006a1e 	bne	r2,zero,100095d0 <_realloc_r+0x3c8>
10009428:	30800530 	cmpltui	r2,r6,20
1000942c:	81000017 	ldw	r4,0(r16)
10009430:	10003726 	beq	r2,zero,10009510 <_realloc_r+0x308>
10009434:	9005883a 	mov	r2,r18
10009438:	8007883a 	mov	r3,r16
1000943c:	11000015 	stw	r4,0(r2)
10009440:	19000117 	ldw	r4,4(r3)
10009444:	11000115 	stw	r4,4(r2)
10009448:	18c00217 	ldw	r3,8(r3)
1000944c:	10c00215 	stw	r3,8(r2)
10009450:	800b883a 	mov	r5,r16
10009454:	9809883a 	mov	r4,r19
10009458:	00068e00 	call	100068e0 <_free_r>
1000945c:	9809883a 	mov	r4,r19
10009460:	000fc280 	call	1000fc28 <__malloc_unlock>
10009464:	003fd306 	br	100093b4 <_realloc_r+0x1ac>
10009468:	300b883a 	mov	r5,r6
1000946c:	dfc00a17 	ldw	ra,40(sp)
10009470:	df000917 	ldw	fp,36(sp)
10009474:	ddc00817 	ldw	r23,32(sp)
10009478:	dd800717 	ldw	r22,28(sp)
1000947c:	dd400617 	ldw	r21,24(sp)
10009480:	dd000517 	ldw	r20,20(sp)
10009484:	dcc00417 	ldw	r19,16(sp)
10009488:	dc800317 	ldw	r18,12(sp)
1000948c:	dc400217 	ldw	r17,8(sp)
10009490:	dc000117 	ldw	r16,4(sp)
10009494:	dec00b04 	addi	sp,sp,44
10009498:	000744c1 	jmpi	1000744c <_malloc_r>
1000949c:	344cb03a 	or	r6,r6,r17
100094a0:	a9800115 	stw	r6,4(r21)
100094a4:	ac4b883a 	add	r5,r21,r17
100094a8:	10800054 	ori	r2,r2,1
100094ac:	28800115 	stw	r2,4(r5)
100094b0:	b0800117 	ldw	r2,4(r22)
100094b4:	29400204 	addi	r5,r5,8
100094b8:	9809883a 	mov	r4,r19
100094bc:	10800054 	ori	r2,r2,1
100094c0:	b0800115 	stw	r2,4(r22)
100094c4:	00068e00 	call	100068e0 <_free_r>
100094c8:	003fb006 	br	1000938c <_realloc_r+0x184>
100094cc:	2148703a 	and	r4,r4,r5
100094d0:	a10b883a 	add	r5,r20,r4
100094d4:	89800404 	addi	r6,r17,16
100094d8:	29bf7716 	blt	r5,r6,100092b8 <_realloc_r+0xb0>
100094dc:	ac6b883a 	add	r21,r21,r17
100094e0:	2c45c83a 	sub	r2,r5,r17
100094e4:	e5400215 	stw	r21,8(fp)
100094e8:	10800054 	ori	r2,r2,1
100094ec:	a8800115 	stw	r2,4(r21)
100094f0:	80bfff17 	ldw	r2,-4(r16)
100094f4:	9809883a 	mov	r4,r19
100094f8:	8025883a 	mov	r18,r16
100094fc:	1080004c 	andi	r2,r2,1
10009500:	1462b03a 	or	r17,r2,r17
10009504:	847fff15 	stw	r17,-4(r16)
10009508:	000fc280 	call	1000fc28 <__malloc_unlock>
1000950c:	003fa906 	br	100093b4 <_realloc_r+0x1ac>
10009510:	91000015 	stw	r4,0(r18)
10009514:	80c00117 	ldw	r3,4(r16)
10009518:	30800728 	cmpgeui	r2,r6,28
1000951c:	90c00115 	stw	r3,4(r18)
10009520:	1000551e 	bne	r2,zero,10009678 <_realloc_r+0x470>
10009524:	81000217 	ldw	r4,8(r16)
10009528:	80c00204 	addi	r3,r16,8
1000952c:	90800204 	addi	r2,r18,8
10009530:	003fc206 	br	1000943c <_realloc_r+0x234>
10009534:	b0800317 	ldw	r2,12(r22)
10009538:	b0c00217 	ldw	r3,8(r22)
1000953c:	a1bfff04 	addi	r6,r20,-4
10009540:	31400968 	cmpgeui	r5,r6,37
10009544:	18800315 	stw	r2,12(r3)
10009548:	10c00215 	stw	r3,8(r2)
1000954c:	38c00217 	ldw	r3,8(r7)
10009550:	38800317 	ldw	r2,12(r7)
10009554:	39000204 	addi	r4,r7,8
10009558:	3ded883a 	add	r22,r7,r23
1000955c:	18800315 	stw	r2,12(r3)
10009560:	10c00215 	stw	r3,8(r2)
10009564:	283f6c26 	beq	r5,zero,10009318 <_realloc_r+0x110>
10009568:	800b883a 	mov	r5,r16
1000956c:	d9c00015 	stw	r7,0(sp)
10009570:	0007dfc0 	call	10007dfc <memmove>
10009574:	d9c00017 	ldw	r7,0(sp)
10009578:	1021883a 	mov	r16,r2
1000957c:	b829883a 	mov	r20,r23
10009580:	382b883a 	mov	r21,r7
10009584:	003f7706 	br	10009364 <_realloc_r+0x15c>
10009588:	90bfff17 	ldw	r2,-4(r18)
1000958c:	00ffff04 	movi	r3,-4
10009590:	10c4703a 	and	r2,r2,r3
10009594:	a0a9883a 	add	r20,r20,r2
10009598:	ad2d883a 	add	r22,r21,r20
1000959c:	003f7106 	br	10009364 <_realloc_r+0x15c>
100095a0:	81fffe17 	ldw	r7,-8(r16)
100095a4:	a9cfc83a 	sub	r7,r21,r7
100095a8:	38800117 	ldw	r2,4(r7)
100095ac:	114a703a 	and	r5,r2,r5
100095b0:	003f4d06 	br	100092e8 <_realloc_r+0xe0>
100095b4:	b0800317 	ldw	r2,12(r22)
100095b8:	b0c00217 	ldw	r3,8(r22)
100095bc:	2829883a 	mov	r20,r5
100095c0:	a96d883a 	add	r22,r21,r5
100095c4:	18800315 	stw	r2,12(r3)
100095c8:	10c00215 	stw	r3,8(r2)
100095cc:	003f6506 	br	10009364 <_realloc_r+0x15c>
100095d0:	800b883a 	mov	r5,r16
100095d4:	9009883a 	mov	r4,r18
100095d8:	0007dfc0 	call	10007dfc <memmove>
100095dc:	003f9c06 	br	10009450 <_realloc_r+0x248>
100095e0:	88800404 	addi	r2,r17,16
100095e4:	b8bf4016 	blt	r23,r2,100092e8 <_realloc_r+0xe0>
100095e8:	38800317 	ldw	r2,12(r7)
100095ec:	38c00217 	ldw	r3,8(r7)
100095f0:	a1bfff04 	addi	r6,r20,-4
100095f4:	31000968 	cmpgeui	r4,r6,37
100095f8:	18800315 	stw	r2,12(r3)
100095fc:	10c00215 	stw	r3,8(r2)
10009600:	3c800204 	addi	r18,r7,8
10009604:	20003b1e 	bne	r4,zero,100096f4 <_realloc_r+0x4ec>
10009608:	30800530 	cmpltui	r2,r6,20
1000960c:	80c00017 	ldw	r3,0(r16)
10009610:	1000361e 	bne	r2,zero,100096ec <_realloc_r+0x4e4>
10009614:	38c00215 	stw	r3,8(r7)
10009618:	80c00117 	ldw	r3,4(r16)
1000961c:	30800728 	cmpgeui	r2,r6,28
10009620:	38c00315 	stw	r3,12(r7)
10009624:	1000401e 	bne	r2,zero,10009728 <_realloc_r+0x520>
10009628:	80c00217 	ldw	r3,8(r16)
1000962c:	38800404 	addi	r2,r7,16
10009630:	84000204 	addi	r16,r16,8
10009634:	10c00015 	stw	r3,0(r2)
10009638:	80c00117 	ldw	r3,4(r16)
1000963c:	10c00115 	stw	r3,4(r2)
10009640:	80c00217 	ldw	r3,8(r16)
10009644:	10c00215 	stw	r3,8(r2)
10009648:	3c47883a 	add	r3,r7,r17
1000964c:	bc45c83a 	sub	r2,r23,r17
10009650:	e0c00215 	stw	r3,8(fp)
10009654:	10800054 	ori	r2,r2,1
10009658:	18800115 	stw	r2,4(r3)
1000965c:	38800117 	ldw	r2,4(r7)
10009660:	9809883a 	mov	r4,r19
10009664:	1080004c 	andi	r2,r2,1
10009668:	1462b03a 	or	r17,r2,r17
1000966c:	3c400115 	stw	r17,4(r7)
10009670:	000fc280 	call	1000fc28 <__malloc_unlock>
10009674:	003f4f06 	br	100093b4 <_realloc_r+0x1ac>
10009678:	80800217 	ldw	r2,8(r16)
1000967c:	31800920 	cmpeqi	r6,r6,36
10009680:	90800215 	stw	r2,8(r18)
10009684:	80800317 	ldw	r2,12(r16)
10009688:	90800315 	stw	r2,12(r18)
1000968c:	81000417 	ldw	r4,16(r16)
10009690:	30000f1e 	bne	r6,zero,100096d0 <_realloc_r+0x4c8>
10009694:	80c00404 	addi	r3,r16,16
10009698:	90800404 	addi	r2,r18,16
1000969c:	003f6706 	br	1000943c <_realloc_r+0x234>
100096a0:	2005883a 	mov	r2,r4
100096a4:	003f2706 	br	10009344 <_realloc_r+0x13c>
100096a8:	80800217 	ldw	r2,8(r16)
100096ac:	31800920 	cmpeqi	r6,r6,36
100096b0:	38800415 	stw	r2,16(r7)
100096b4:	80800317 	ldw	r2,12(r16)
100096b8:	38800515 	stw	r2,20(r7)
100096bc:	80c00417 	ldw	r3,16(r16)
100096c0:	3000121e 	bne	r6,zero,1000970c <_realloc_r+0x504>
100096c4:	38800604 	addi	r2,r7,24
100096c8:	84000404 	addi	r16,r16,16
100096cc:	003f1d06 	br	10009344 <_realloc_r+0x13c>
100096d0:	91000415 	stw	r4,16(r18)
100096d4:	81000517 	ldw	r4,20(r16)
100096d8:	80c00604 	addi	r3,r16,24
100096dc:	90800604 	addi	r2,r18,24
100096e0:	91000515 	stw	r4,20(r18)
100096e4:	81000617 	ldw	r4,24(r16)
100096e8:	003f5406 	br	1000943c <_realloc_r+0x234>
100096ec:	9005883a 	mov	r2,r18
100096f0:	003fd006 	br	10009634 <_realloc_r+0x42c>
100096f4:	800b883a 	mov	r5,r16
100096f8:	9009883a 	mov	r4,r18
100096fc:	d9c00015 	stw	r7,0(sp)
10009700:	0007dfc0 	call	10007dfc <memmove>
10009704:	d9c00017 	ldw	r7,0(sp)
10009708:	003fcf06 	br	10009648 <_realloc_r+0x440>
1000970c:	84000604 	addi	r16,r16,24
10009710:	38c00615 	stw	r3,24(r7)
10009714:	80ffff17 	ldw	r3,-4(r16)
10009718:	38800804 	addi	r2,r7,32
1000971c:	38c00715 	stw	r3,28(r7)
10009720:	80c00017 	ldw	r3,0(r16)
10009724:	003f0706 	br	10009344 <_realloc_r+0x13c>
10009728:	80800217 	ldw	r2,8(r16)
1000972c:	31800920 	cmpeqi	r6,r6,36
10009730:	38800415 	stw	r2,16(r7)
10009734:	80800317 	ldw	r2,12(r16)
10009738:	38800515 	stw	r2,20(r7)
1000973c:	80c00417 	ldw	r3,16(r16)
10009740:	3000031e 	bne	r6,zero,10009750 <_realloc_r+0x548>
10009744:	38800604 	addi	r2,r7,24
10009748:	84000404 	addi	r16,r16,16
1000974c:	003fb906 	br	10009634 <_realloc_r+0x42c>
10009750:	84000604 	addi	r16,r16,24
10009754:	38c00615 	stw	r3,24(r7)
10009758:	80ffff17 	ldw	r3,-4(r16)
1000975c:	38800804 	addi	r2,r7,32
10009760:	38c00715 	stw	r3,28(r7)
10009764:	80c00017 	ldw	r3,0(r16)
10009768:	003fb206 	br	10009634 <_realloc_r+0x42c>

1000976c <_sbrk_r>:
1000976c:	defffe04 	addi	sp,sp,-8
10009770:	dc000015 	stw	r16,0(sp)
10009774:	00840074 	movhi	r2,4097
10009778:	2021883a 	mov	r16,r4
1000977c:	2809883a 	mov	r4,r5
10009780:	dfc00115 	stw	ra,4(sp)
10009784:	1018ba15 	stw	zero,25320(r2)
10009788:	000fe000 	call	1000fe00 <sbrk>
1000978c:	10ffffd8 	cmpnei	r3,r2,-1
10009790:	18000426 	beq	r3,zero,100097a4 <_sbrk_r+0x38>
10009794:	dfc00117 	ldw	ra,4(sp)
10009798:	dc000017 	ldw	r16,0(sp)
1000979c:	dec00204 	addi	sp,sp,8
100097a0:	f800283a 	ret
100097a4:	00c40074 	movhi	r3,4097
100097a8:	18d8ba17 	ldw	r3,25320(r3)
100097ac:	183ff926 	beq	r3,zero,10009794 <_sbrk_r+0x28>
100097b0:	80c00015 	stw	r3,0(r16)
100097b4:	dfc00117 	ldw	ra,4(sp)
100097b8:	dc000017 	ldw	r16,0(sp)
100097bc:	dec00204 	addi	sp,sp,8
100097c0:	f800283a 	ret

100097c4 <__sread>:
100097c4:	defffe04 	addi	sp,sp,-8
100097c8:	dc000015 	stw	r16,0(sp)
100097cc:	2821883a 	mov	r16,r5
100097d0:	2940038f 	ldh	r5,14(r5)
100097d4:	dfc00115 	stw	ra,4(sp)
100097d8:	000b6800 	call	1000b680 <_read_r>
100097dc:	10000716 	blt	r2,zero,100097fc <__sread+0x38>
100097e0:	80c01417 	ldw	r3,80(r16)
100097e4:	1887883a 	add	r3,r3,r2
100097e8:	80c01415 	stw	r3,80(r16)
100097ec:	dfc00117 	ldw	ra,4(sp)
100097f0:	dc000017 	ldw	r16,0(sp)
100097f4:	dec00204 	addi	sp,sp,8
100097f8:	f800283a 	ret
100097fc:	80c0030b 	ldhu	r3,12(r16)
10009800:	18fbffcc 	andi	r3,r3,61439
10009804:	80c0030d 	sth	r3,12(r16)
10009808:	dfc00117 	ldw	ra,4(sp)
1000980c:	dc000017 	ldw	r16,0(sp)
10009810:	dec00204 	addi	sp,sp,8
10009814:	f800283a 	ret

10009818 <__seofread>:
10009818:	0005883a 	mov	r2,zero
1000981c:	f800283a 	ret

10009820 <__swrite>:
10009820:	2880030b 	ldhu	r2,12(r5)
10009824:	defffb04 	addi	sp,sp,-20
10009828:	dcc00315 	stw	r19,12(sp)
1000982c:	dc800215 	stw	r18,8(sp)
10009830:	dc400115 	stw	r17,4(sp)
10009834:	dc000015 	stw	r16,0(sp)
10009838:	dfc00415 	stw	ra,16(sp)
1000983c:	10c0400c 	andi	r3,r2,256
10009840:	2821883a 	mov	r16,r5
10009844:	2023883a 	mov	r17,r4
10009848:	2940038f 	ldh	r5,14(r5)
1000984c:	3025883a 	mov	r18,r6
10009850:	3827883a 	mov	r19,r7
10009854:	18000c1e 	bne	r3,zero,10009888 <__swrite+0x68>
10009858:	10bbffcc 	andi	r2,r2,61439
1000985c:	980f883a 	mov	r7,r19
10009860:	900d883a 	mov	r6,r18
10009864:	8809883a 	mov	r4,r17
10009868:	8080030d 	sth	r2,12(r16)
1000986c:	dfc00417 	ldw	ra,16(sp)
10009870:	dcc00317 	ldw	r19,12(sp)
10009874:	dc800217 	ldw	r18,8(sp)
10009878:	dc400117 	ldw	r17,4(sp)
1000987c:	dc000017 	ldw	r16,0(sp)
10009880:	dec00504 	addi	sp,sp,20
10009884:	000ae301 	jmpi	1000ae30 <_write_r>
10009888:	01c00084 	movi	r7,2
1000988c:	000d883a 	mov	r6,zero
10009890:	000b5cc0 	call	1000b5cc <_lseek_r>
10009894:	8080030b 	ldhu	r2,12(r16)
10009898:	8140038f 	ldh	r5,14(r16)
1000989c:	003fee06 	br	10009858 <__swrite+0x38>

100098a0 <__sseek>:
100098a0:	defffe04 	addi	sp,sp,-8
100098a4:	dc000015 	stw	r16,0(sp)
100098a8:	2821883a 	mov	r16,r5
100098ac:	2940038f 	ldh	r5,14(r5)
100098b0:	dfc00115 	stw	ra,4(sp)
100098b4:	000b5cc0 	call	1000b5cc <_lseek_r>
100098b8:	10ffffd8 	cmpnei	r3,r2,-1
100098bc:	18000826 	beq	r3,zero,100098e0 <__sseek+0x40>
100098c0:	80c0030b 	ldhu	r3,12(r16)
100098c4:	80801415 	stw	r2,80(r16)
100098c8:	18c40014 	ori	r3,r3,4096
100098cc:	80c0030d 	sth	r3,12(r16)
100098d0:	dfc00117 	ldw	ra,4(sp)
100098d4:	dc000017 	ldw	r16,0(sp)
100098d8:	dec00204 	addi	sp,sp,8
100098dc:	f800283a 	ret
100098e0:	80c0030b 	ldhu	r3,12(r16)
100098e4:	18fbffcc 	andi	r3,r3,61439
100098e8:	80c0030d 	sth	r3,12(r16)
100098ec:	dfc00117 	ldw	ra,4(sp)
100098f0:	dc000017 	ldw	r16,0(sp)
100098f4:	dec00204 	addi	sp,sp,8
100098f8:	f800283a 	ret

100098fc <__sclose>:
100098fc:	2940038f 	ldh	r5,14(r5)
10009900:	000ae941 	jmpi	1000ae94 <_close_r>

10009904 <__sprint_r.part.0>:
10009904:	28801917 	ldw	r2,100(r5)
10009908:	defff604 	addi	sp,sp,-40
1000990c:	dcc00315 	stw	r19,12(sp)
10009910:	dfc00915 	stw	ra,36(sp)
10009914:	df000815 	stw	fp,32(sp)
10009918:	ddc00715 	stw	r23,28(sp)
1000991c:	dd800615 	stw	r22,24(sp)
10009920:	dd400515 	stw	r21,20(sp)
10009924:	dd000415 	stw	r20,16(sp)
10009928:	dc800215 	stw	r18,8(sp)
1000992c:	dc400115 	stw	r17,4(sp)
10009930:	dc000015 	stw	r16,0(sp)
10009934:	1088000c 	andi	r2,r2,8192
10009938:	3027883a 	mov	r19,r6
1000993c:	10002c26 	beq	r2,zero,100099f0 <__sprint_r.part.0+0xec>
10009940:	30800217 	ldw	r2,8(r6)
10009944:	35000017 	ldw	r20,0(r6)
10009948:	2821883a 	mov	r16,r5
1000994c:	2023883a 	mov	r17,r4
10009950:	05bfff04 	movi	r22,-4
10009954:	10002426 	beq	r2,zero,100099e8 <__sprint_r.part.0+0xe4>
10009958:	a5400117 	ldw	r21,4(r20)
1000995c:	a5c00017 	ldw	r23,0(r20)
10009960:	a824d0ba 	srli	r18,r21,2
10009964:	90001b26 	beq	r18,zero,100099d4 <__sprint_r.part.0+0xd0>
10009968:	0039883a 	mov	fp,zero
1000996c:	00000206 	br	10009978 <__sprint_r.part.0+0x74>
10009970:	bdc00104 	addi	r23,r23,4
10009974:	97001626 	beq	r18,fp,100099d0 <__sprint_r.part.0+0xcc>
10009978:	b9400017 	ldw	r5,0(r23)
1000997c:	800d883a 	mov	r6,r16
10009980:	8809883a 	mov	r4,r17
10009984:	000b3840 	call	1000b384 <_fputwc_r>
10009988:	10bfffe0 	cmpeqi	r2,r2,-1
1000998c:	e7000044 	addi	fp,fp,1
10009990:	103ff726 	beq	r2,zero,10009970 <__sprint_r.part.0+0x6c>
10009994:	00bfffc4 	movi	r2,-1
10009998:	98000215 	stw	zero,8(r19)
1000999c:	98000115 	stw	zero,4(r19)
100099a0:	dfc00917 	ldw	ra,36(sp)
100099a4:	df000817 	ldw	fp,32(sp)
100099a8:	ddc00717 	ldw	r23,28(sp)
100099ac:	dd800617 	ldw	r22,24(sp)
100099b0:	dd400517 	ldw	r21,20(sp)
100099b4:	dd000417 	ldw	r20,16(sp)
100099b8:	dcc00317 	ldw	r19,12(sp)
100099bc:	dc800217 	ldw	r18,8(sp)
100099c0:	dc400117 	ldw	r17,4(sp)
100099c4:	dc000017 	ldw	r16,0(sp)
100099c8:	dec00a04 	addi	sp,sp,40
100099cc:	f800283a 	ret
100099d0:	98800217 	ldw	r2,8(r19)
100099d4:	adaa703a 	and	r21,r21,r22
100099d8:	1545c83a 	sub	r2,r2,r21
100099dc:	98800215 	stw	r2,8(r19)
100099e0:	a5000204 	addi	r20,r20,8
100099e4:	103fdc1e 	bne	r2,zero,10009958 <__sprint_r.part.0+0x54>
100099e8:	0005883a 	mov	r2,zero
100099ec:	003fea06 	br	10009998 <__sprint_r.part.0+0x94>
100099f0:	0006bdc0 	call	10006bdc <__sfvwrite_r>
100099f4:	003fe806 	br	10009998 <__sprint_r.part.0+0x94>

100099f8 <__sprint_r>:
100099f8:	30c00217 	ldw	r3,8(r6)
100099fc:	18000126 	beq	r3,zero,10009a04 <__sprint_r+0xc>
10009a00:	00099041 	jmpi	10009904 <__sprint_r.part.0>
10009a04:	30000115 	stw	zero,4(r6)
10009a08:	0005883a 	mov	r2,zero
10009a0c:	f800283a 	ret

10009a10 <___vfiprintf_internal_r>:
10009a10:	deffcf04 	addi	sp,sp,-196
10009a14:	dd802d15 	stw	r22,180(sp)
10009a18:	dd402c15 	stw	r21,176(sp)
10009a1c:	dd002b15 	stw	r20,172(sp)
10009a20:	dfc03015 	stw	ra,192(sp)
10009a24:	df002f15 	stw	fp,188(sp)
10009a28:	ddc02e15 	stw	r23,184(sp)
10009a2c:	dcc02a15 	stw	r19,168(sp)
10009a30:	dc802915 	stw	r18,164(sp)
10009a34:	dc402815 	stw	r17,160(sp)
10009a38:	dc002715 	stw	r16,156(sp)
10009a3c:	d9c00415 	stw	r7,16(sp)
10009a40:	202d883a 	mov	r22,r4
10009a44:	282b883a 	mov	r21,r5
10009a48:	3029883a 	mov	r20,r6
10009a4c:	20000226 	beq	r4,zero,10009a58 <___vfiprintf_internal_r+0x48>
10009a50:	20800e17 	ldw	r2,56(r4)
10009a54:	1001bd26 	beq	r2,zero,1000a14c <___vfiprintf_internal_r+0x73c>
10009a58:	a880030b 	ldhu	r2,12(r21)
10009a5c:	10c8000c 	andi	r3,r2,8192
10009a60:	1800061e 	bne	r3,zero,10009a7c <___vfiprintf_internal_r+0x6c>
10009a64:	a8c01917 	ldw	r3,100(r21)
10009a68:	0137ffc4 	movi	r4,-8193
10009a6c:	10880014 	ori	r2,r2,8192
10009a70:	1906703a 	and	r3,r3,r4
10009a74:	a880030d 	sth	r2,12(r21)
10009a78:	a8c01915 	stw	r3,100(r21)
10009a7c:	10c0020c 	andi	r3,r2,8
10009a80:	18010826 	beq	r3,zero,10009ea4 <___vfiprintf_internal_r+0x494>
10009a84:	a8c00417 	ldw	r3,16(r21)
10009a88:	18010626 	beq	r3,zero,10009ea4 <___vfiprintf_internal_r+0x494>
10009a8c:	1080068c 	andi	r2,r2,26
10009a90:	10800298 	cmpnei	r2,r2,10
10009a94:	10010b26 	beq	r2,zero,10009ec4 <___vfiprintf_internal_r+0x4b4>
10009a98:	dc801704 	addi	r18,sp,92
10009a9c:	dc800a15 	stw	r18,40(sp)
10009aa0:	d8000c15 	stw	zero,48(sp)
10009aa4:	d8000b15 	stw	zero,44(sp)
10009aa8:	9021883a 	mov	r16,r18
10009aac:	d8000515 	stw	zero,20(sp)
10009ab0:	d8000115 	stw	zero,4(sp)
10009ab4:	a0800007 	ldb	r2,0(r20)
10009ab8:	1000e826 	beq	r2,zero,10009e5c <___vfiprintf_internal_r+0x44c>
10009abc:	a023883a 	mov	r17,r20
10009ac0:	00000306 	br	10009ad0 <___vfiprintf_internal_r+0xc0>
10009ac4:	88800047 	ldb	r2,1(r17)
10009ac8:	8c400044 	addi	r17,r17,1
10009acc:	10013326 	beq	r2,zero,10009f9c <___vfiprintf_internal_r+0x58c>
10009ad0:	10800958 	cmpnei	r2,r2,37
10009ad4:	103ffb1e 	bne	r2,zero,10009ac4 <___vfiprintf_internal_r+0xb4>
10009ad8:	8d27c83a 	sub	r19,r17,r20
10009adc:	8d01311e 	bne	r17,r20,10009fa4 <___vfiprintf_internal_r+0x594>
10009ae0:	88800003 	ldbu	r2,0(r17)
10009ae4:	10803fcc 	andi	r2,r2,255
10009ae8:	1080201c 	xori	r2,r2,128
10009aec:	10bfe004 	addi	r2,r2,-128
10009af0:	1000da26 	beq	r2,zero,10009e5c <___vfiprintf_internal_r+0x44c>
10009af4:	88800047 	ldb	r2,1(r17)
10009af8:	8d000044 	addi	r20,r17,1
10009afc:	d8000945 	stb	zero,37(sp)
10009b00:	000b883a 	mov	r5,zero
10009b04:	000d883a 	mov	r6,zero
10009b08:	023fffc4 	movi	r8,-1
10009b0c:	0023883a 	mov	r17,zero
10009b10:	001b883a 	mov	r13,zero
10009b14:	a5000044 	addi	r20,r20,1
10009b18:	10fff804 	addi	r3,r2,-32
10009b1c:	19001668 	cmpgeui	r4,r3,89
10009b20:	20006c1e 	bne	r4,zero,10009cd4 <___vfiprintf_internal_r+0x2c4>
10009b24:	180690ba 	slli	r3,r3,2
10009b28:	01040074 	movhi	r4,4097
10009b2c:	1909883a 	add	r4,r3,r4
10009b30:	20e6ce17 	ldw	r3,-25800(r4)
10009b34:	1800683a 	jmp	r3
10009b38:	1000a474 	orhi	zero,r2,657
10009b3c:	10009cd4 	ori	zero,r2,627
10009b40:	10009cd4 	ori	zero,r2,627
10009b44:	1000a468 	cmpgeui	zero,r2,657
10009b48:	10009cd4 	ori	zero,r2,627
10009b4c:	10009cd4 	ori	zero,r2,627
10009b50:	10009cd4 	ori	zero,r2,627
10009b54:	10009cd4 	ori	zero,r2,627
10009b58:	10009cd4 	ori	zero,r2,627
10009b5c:	10009cd4 	ori	zero,r2,627
10009b60:	1000a440 	call	11000a44 <_gp+0xfe437c>
10009b64:	1000a430 	cmpltui	zero,r2,656
10009b68:	10009cd4 	ori	zero,r2,627
10009b6c:	1000a418 	cmpnei	zero,r2,656
10009b70:	1000a3cc 	andi	zero,r2,655
10009b74:	10009cd4 	ori	zero,r2,627
10009b78:	1000a3c0 	call	11000a3c <_gp+0xfe4374>
10009b7c:	10009c9c 	xori	zero,r2,626
10009b80:	10009c9c 	xori	zero,r2,626
10009b84:	10009c9c 	xori	zero,r2,626
10009b88:	10009c9c 	xori	zero,r2,626
10009b8c:	10009c9c 	xori	zero,r2,626
10009b90:	10009c9c 	xori	zero,r2,626
10009b94:	10009c9c 	xori	zero,r2,626
10009b98:	10009c9c 	xori	zero,r2,626
10009b9c:	10009c9c 	xori	zero,r2,626
10009ba0:	10009cd4 	ori	zero,r2,627
10009ba4:	10009cd4 	ori	zero,r2,627
10009ba8:	10009cd4 	ori	zero,r2,627
10009bac:	10009cd4 	ori	zero,r2,627
10009bb0:	10009cd4 	ori	zero,r2,627
10009bb4:	10009cd4 	ori	zero,r2,627
10009bb8:	10009cd4 	ori	zero,r2,627
10009bbc:	10009cd4 	ori	zero,r2,627
10009bc0:	10009cd4 	ori	zero,r2,627
10009bc4:	10009cd4 	ori	zero,r2,627
10009bc8:	1000a2bc 	xorhi	zero,r2,650
10009bcc:	10009cd4 	ori	zero,r2,627
10009bd0:	10009cd4 	ori	zero,r2,627
10009bd4:	10009cd4 	ori	zero,r2,627
10009bd8:	10009cd4 	ori	zero,r2,627
10009bdc:	10009cd4 	ori	zero,r2,627
10009be0:	10009cd4 	ori	zero,r2,627
10009be4:	10009cd4 	ori	zero,r2,627
10009be8:	10009cd4 	ori	zero,r2,627
10009bec:	10009cd4 	ori	zero,r2,627
10009bf0:	10009cd4 	ori	zero,r2,627
10009bf4:	10009f34 	orhi	zero,r2,636
10009bf8:	10009cd4 	ori	zero,r2,627
10009bfc:	10009cd4 	ori	zero,r2,627
10009c00:	10009cd4 	ori	zero,r2,627
10009c04:	10009cd4 	ori	zero,r2,627
10009c08:	10009cd4 	ori	zero,r2,627
10009c0c:	10009f0c 	andi	zero,r2,636
10009c10:	10009cd4 	ori	zero,r2,627
10009c14:	10009cd4 	ori	zero,r2,627
10009c18:	1000a4c8 	cmpgei	zero,r2,659
10009c1c:	10009cd4 	ori	zero,r2,627
10009c20:	10009cd4 	ori	zero,r2,627
10009c24:	10009cd4 	ori	zero,r2,627
10009c28:	10009cd4 	ori	zero,r2,627
10009c2c:	10009cd4 	ori	zero,r2,627
10009c30:	10009cd4 	ori	zero,r2,627
10009c34:	10009cd4 	ori	zero,r2,627
10009c38:	10009cd4 	ori	zero,r2,627
10009c3c:	10009cd4 	ori	zero,r2,627
10009c40:	10009cd4 	ori	zero,r2,627
10009c44:	1000a4a0 	cmpeqi	zero,r2,658
10009c48:	1000a154 	ori	zero,r2,645
10009c4c:	10009cd4 	ori	zero,r2,627
10009c50:	10009cd4 	ori	zero,r2,627
10009c54:	10009cd4 	ori	zero,r2,627
10009c58:	1000a1c8 	cmpgei	zero,r2,647
10009c5c:	1000a154 	ori	zero,r2,645
10009c60:	10009cd4 	ori	zero,r2,627
10009c64:	10009cd4 	ori	zero,r2,627
10009c68:	1000a54c 	andi	zero,r2,661
10009c6c:	10009cd4 	ori	zero,r2,627
10009c70:	1000a510 	cmplti	zero,r2,660
10009c74:	10009f38 	rdprs	zero,r2,636
10009c78:	1000a280 	call	11000a28 <_gp+0xfe4360>
10009c7c:	1000a274 	orhi	zero,r2,649
10009c80:	10009cd4 	ori	zero,r2,627
10009c84:	1000a21c 	xori	zero,r2,648
10009c88:	10009cd4 	ori	zero,r2,627
10009c8c:	10009f10 	cmplti	zero,r2,636
10009c90:	10009cd4 	ori	zero,r2,627
10009c94:	10009cd4 	ori	zero,r2,627
10009c98:	1000a1d4 	ori	zero,r2,647
10009c9c:	0023883a 	mov	r17,zero
10009ca0:	113ff404 	addi	r4,r2,-48
10009ca4:	880690ba 	slli	r3,r17,2
10009ca8:	a0800007 	ldb	r2,0(r20)
10009cac:	a5000044 	addi	r20,r20,1
10009cb0:	1c63883a 	add	r17,r3,r17
10009cb4:	8c63883a 	add	r17,r17,r17
10009cb8:	2463883a 	add	r17,r4,r17
10009cbc:	113ff404 	addi	r4,r2,-48
10009cc0:	20c002b0 	cmpltui	r3,r4,10
10009cc4:	183ff71e 	bne	r3,zero,10009ca4 <___vfiprintf_internal_r+0x294>
10009cc8:	10fff804 	addi	r3,r2,-32
10009ccc:	19001668 	cmpgeui	r4,r3,89
10009cd0:	203f9426 	beq	r4,zero,10009b24 <___vfiprintf_internal_r+0x114>
10009cd4:	29403fcc 	andi	r5,r5,255
10009cd8:	2803ed1e 	bne	r5,zero,1000ac90 <___vfiprintf_internal_r+0x1280>
10009cdc:	10005f26 	beq	r2,zero,10009e5c <___vfiprintf_internal_r+0x44c>
10009ce0:	d8800d05 	stb	r2,52(sp)
10009ce4:	d8000945 	stb	zero,37(sp)
10009ce8:	05c00044 	movi	r23,1
10009cec:	07000044 	movi	fp,1
10009cf0:	dcc00d04 	addi	r19,sp,52
10009cf4:	db400015 	stw	r13,0(sp)
10009cf8:	0011883a 	mov	r8,zero
10009cfc:	d8800017 	ldw	r2,0(sp)
10009d00:	1380008c 	andi	r14,r2,2
10009d04:	70000126 	beq	r14,zero,10009d0c <___vfiprintf_internal_r+0x2fc>
10009d08:	bdc00084 	addi	r23,r23,2
10009d0c:	d8800017 	ldw	r2,0(sp)
10009d10:	d9000b17 	ldw	r4,44(sp)
10009d14:	1340210c 	andi	r13,r2,132
10009d18:	21800044 	addi	r6,r4,1
10009d1c:	d8800c17 	ldw	r2,48(sp)
10009d20:	300b883a 	mov	r5,r6
10009d24:	6800021e 	bne	r13,zero,10009d30 <___vfiprintf_internal_r+0x320>
10009d28:	8dc7c83a 	sub	r3,r17,r23
10009d2c:	00c2e216 	blt	zero,r3,1000a8b8 <___vfiprintf_internal_r+0xea8>
10009d30:	d8c00947 	ldb	r3,37(sp)
10009d34:	81800204 	addi	r6,r16,8
10009d38:	18000d26 	beq	r3,zero,10009d70 <___vfiprintf_internal_r+0x360>
10009d3c:	d8c00944 	addi	r3,sp,37
10009d40:	10800044 	addi	r2,r2,1
10009d44:	80c00015 	stw	r3,0(r16)
10009d48:	00c00044 	movi	r3,1
10009d4c:	80c00115 	stw	r3,4(r16)
10009d50:	d8800c15 	stw	r2,48(sp)
10009d54:	d9400b15 	stw	r5,44(sp)
10009d58:	28c00208 	cmpgei	r3,r5,8
10009d5c:	18029a1e 	bne	r3,zero,1000a7c8 <___vfiprintf_internal_r+0xdb8>
10009d60:	2809883a 	mov	r4,r5
10009d64:	3021883a 	mov	r16,r6
10009d68:	29400044 	addi	r5,r5,1
10009d6c:	31800204 	addi	r6,r6,8
10009d70:	70001826 	beq	r14,zero,10009dd4 <___vfiprintf_internal_r+0x3c4>
10009d74:	d8c00984 	addi	r3,sp,38
10009d78:	10800084 	addi	r2,r2,2
10009d7c:	80c00015 	stw	r3,0(r16)
10009d80:	00c00084 	movi	r3,2
10009d84:	80c00115 	stw	r3,4(r16)
10009d88:	d8800c15 	stw	r2,48(sp)
10009d8c:	d9400b15 	stw	r5,44(sp)
10009d90:	28c00208 	cmpgei	r3,r5,8
10009d94:	1802a426 	beq	r3,zero,1000a828 <___vfiprintf_internal_r+0xe18>
10009d98:	10032226 	beq	r2,zero,1000aa24 <___vfiprintf_internal_r+0x1014>
10009d9c:	d9800a04 	addi	r6,sp,40
10009da0:	a80b883a 	mov	r5,r21
10009da4:	b009883a 	mov	r4,r22
10009da8:	da000315 	stw	r8,12(sp)
10009dac:	db400215 	stw	r13,8(sp)
10009db0:	00099040 	call	10009904 <__sprint_r.part.0>
10009db4:	10002b1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
10009db8:	d9000b17 	ldw	r4,44(sp)
10009dbc:	d8800c17 	ldw	r2,48(sp)
10009dc0:	da000317 	ldw	r8,12(sp)
10009dc4:	db400217 	ldw	r13,8(sp)
10009dc8:	d9801904 	addi	r6,sp,100
10009dcc:	21400044 	addi	r5,r4,1
10009dd0:	9021883a 	mov	r16,r18
10009dd4:	6b402018 	cmpnei	r13,r13,128
10009dd8:	6801e526 	beq	r13,zero,1000a570 <___vfiprintf_internal_r+0xb60>
10009ddc:	4711c83a 	sub	r8,r8,fp
10009de0:	02022416 	blt	zero,r8,1000a674 <___vfiprintf_internal_r+0xc64>
10009de4:	e085883a 	add	r2,fp,r2
10009de8:	d9400b15 	stw	r5,44(sp)
10009dec:	84c00015 	stw	r19,0(r16)
10009df0:	87000115 	stw	fp,4(r16)
10009df4:	d8800c15 	stw	r2,48(sp)
10009df8:	29400210 	cmplti	r5,r5,8
10009dfc:	2800081e 	bne	r5,zero,10009e20 <___vfiprintf_internal_r+0x410>
10009e00:	10009826 	beq	r2,zero,1000a064 <___vfiprintf_internal_r+0x654>
10009e04:	d9800a04 	addi	r6,sp,40
10009e08:	a80b883a 	mov	r5,r21
10009e0c:	b009883a 	mov	r4,r22
10009e10:	00099040 	call	10009904 <__sprint_r.part.0>
10009e14:	1000131e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
10009e18:	d8800c17 	ldw	r2,48(sp)
10009e1c:	900d883a 	mov	r6,r18
10009e20:	d8c00017 	ldw	r3,0(sp)
10009e24:	1cc0010c 	andi	r19,r3,4
10009e28:	98000226 	beq	r19,zero,10009e34 <___vfiprintf_internal_r+0x424>
10009e2c:	8de1c83a 	sub	r16,r17,r23
10009e30:	04009316 	blt	zero,r16,1000a080 <___vfiprintf_internal_r+0x670>
10009e34:	8dc0010e 	bge	r17,r23,10009e3c <___vfiprintf_internal_r+0x42c>
10009e38:	b823883a 	mov	r17,r23
10009e3c:	d8c00117 	ldw	r3,4(sp)
10009e40:	1c47883a 	add	r3,r3,r17
10009e44:	d8c00115 	stw	r3,4(sp)
10009e48:	1002551e 	bne	r2,zero,1000a7a0 <___vfiprintf_internal_r+0xd90>
10009e4c:	a0800007 	ldb	r2,0(r20)
10009e50:	d8000b15 	stw	zero,44(sp)
10009e54:	9021883a 	mov	r16,r18
10009e58:	103f181e 	bne	r2,zero,10009abc <___vfiprintf_internal_r+0xac>
10009e5c:	d8800c17 	ldw	r2,48(sp)
10009e60:	10038d1e 	bne	r2,zero,1000ac98 <___vfiprintf_internal_r+0x1288>
10009e64:	a880030b 	ldhu	r2,12(r21)
10009e68:	1080100c 	andi	r2,r2,64
10009e6c:	1003a51e 	bne	r2,zero,1000ad04 <___vfiprintf_internal_r+0x12f4>
10009e70:	d8800117 	ldw	r2,4(sp)
10009e74:	dfc03017 	ldw	ra,192(sp)
10009e78:	df002f17 	ldw	fp,188(sp)
10009e7c:	ddc02e17 	ldw	r23,184(sp)
10009e80:	dd802d17 	ldw	r22,180(sp)
10009e84:	dd402c17 	ldw	r21,176(sp)
10009e88:	dd002b17 	ldw	r20,172(sp)
10009e8c:	dcc02a17 	ldw	r19,168(sp)
10009e90:	dc802917 	ldw	r18,164(sp)
10009e94:	dc402817 	ldw	r17,160(sp)
10009e98:	dc002717 	ldw	r16,156(sp)
10009e9c:	dec03104 	addi	sp,sp,196
10009ea0:	f800283a 	ret
10009ea4:	a80b883a 	mov	r5,r21
10009ea8:	b009883a 	mov	r4,r22
10009eac:	00046400 	call	10004640 <__swsetup_r>
10009eb0:	1003941e 	bne	r2,zero,1000ad04 <___vfiprintf_internal_r+0x12f4>
10009eb4:	a880030b 	ldhu	r2,12(r21)
10009eb8:	1080068c 	andi	r2,r2,26
10009ebc:	10800298 	cmpnei	r2,r2,10
10009ec0:	103ef51e 	bne	r2,zero,10009a98 <___vfiprintf_internal_r+0x88>
10009ec4:	a880038f 	ldh	r2,14(r21)
10009ec8:	103ef316 	blt	r2,zero,10009a98 <___vfiprintf_internal_r+0x88>
10009ecc:	d9c00417 	ldw	r7,16(sp)
10009ed0:	a00d883a 	mov	r6,r20
10009ed4:	a80b883a 	mov	r5,r21
10009ed8:	b009883a 	mov	r4,r22
10009edc:	dfc03017 	ldw	ra,192(sp)
10009ee0:	df002f17 	ldw	fp,188(sp)
10009ee4:	ddc02e17 	ldw	r23,184(sp)
10009ee8:	dd802d17 	ldw	r22,180(sp)
10009eec:	dd402c17 	ldw	r21,176(sp)
10009ef0:	dd002b17 	ldw	r20,172(sp)
10009ef4:	dcc02a17 	ldw	r19,168(sp)
10009ef8:	dc802917 	ldw	r18,164(sp)
10009efc:	dc402817 	ldw	r17,160(sp)
10009f00:	dc002717 	ldw	r16,156(sp)
10009f04:	dec03104 	addi	sp,sp,196
10009f08:	000ad701 	jmpi	1000ad70 <__sbprintf>
10009f0c:	6b400414 	ori	r13,r13,16
10009f10:	6880080c 	andi	r2,r13,32
10009f14:	10004726 	beq	r2,zero,1000a034 <___vfiprintf_internal_r+0x624>
10009f18:	d8c00417 	ldw	r3,16(sp)
10009f1c:	00800044 	movi	r2,1
10009f20:	1dc00017 	ldw	r23,0(r3)
10009f24:	1f000117 	ldw	fp,4(r3)
10009f28:	18c00204 	addi	r3,r3,8
10009f2c:	d8c00415 	stw	r3,16(sp)
10009f30:	00000906 	br	10009f58 <___vfiprintf_internal_r+0x548>
10009f34:	6b400414 	ori	r13,r13,16
10009f38:	6880080c 	andi	r2,r13,32
10009f3c:	10003126 	beq	r2,zero,1000a004 <___vfiprintf_internal_r+0x5f4>
10009f40:	d8c00417 	ldw	r3,16(sp)
10009f44:	0005883a 	mov	r2,zero
10009f48:	1dc00017 	ldw	r23,0(r3)
10009f4c:	1f000117 	ldw	fp,4(r3)
10009f50:	18c00204 	addi	r3,r3,8
10009f54:	d8c00415 	stw	r3,16(sp)
10009f58:	d8000945 	stb	zero,37(sp)
10009f5c:	40ffffe0 	cmpeqi	r3,r8,-1
10009f60:	001d883a 	mov	r14,zero
10009f64:	1800f01e 	bne	r3,zero,1000a328 <___vfiprintf_internal_r+0x918>
10009f68:	04ffdfc4 	movi	r19,-129
10009f6c:	6cc8703a 	and	r4,r13,r19
10009f70:	bf06b03a 	or	r3,r23,fp
10009f74:	d9000015 	stw	r4,0(sp)
10009f78:	1802301e 	bne	r3,zero,1000a83c <___vfiprintf_internal_r+0xe2c>
10009f7c:	4001f31e 	bne	r8,zero,1000a74c <___vfiprintf_internal_r+0xd3c>
10009f80:	10029e1e 	bne	r2,zero,1000a9fc <___vfiprintf_internal_r+0xfec>
10009f84:	6f00004c 	andi	fp,r13,1
10009f88:	e002bc26 	beq	fp,zero,1000aa7c <___vfiprintf_internal_r+0x106c>
10009f8c:	00800c04 	movi	r2,48
10009f90:	d88016c5 	stb	r2,91(sp)
10009f94:	dcc016c4 	addi	r19,sp,91
10009f98:	00010006 	br	1000a39c <___vfiprintf_internal_r+0x98c>
10009f9c:	8d27c83a 	sub	r19,r17,r20
10009fa0:	8d3fae26 	beq	r17,r20,10009e5c <___vfiprintf_internal_r+0x44c>
10009fa4:	d8c00c17 	ldw	r3,48(sp)
10009fa8:	d8800b17 	ldw	r2,44(sp)
10009fac:	85000015 	stw	r20,0(r16)
10009fb0:	98c7883a 	add	r3,r19,r3
10009fb4:	10800044 	addi	r2,r2,1
10009fb8:	d8800b15 	stw	r2,44(sp)
10009fbc:	84c00115 	stw	r19,4(r16)
10009fc0:	d8c00c15 	stw	r3,48(sp)
10009fc4:	10800208 	cmpgei	r2,r2,8
10009fc8:	1000061e 	bne	r2,zero,10009fe4 <___vfiprintf_internal_r+0x5d4>
10009fcc:	84000204 	addi	r16,r16,8
10009fd0:	d8c00117 	ldw	r3,4(sp)
10009fd4:	88800003 	ldbu	r2,0(r17)
10009fd8:	1cc7883a 	add	r3,r3,r19
10009fdc:	d8c00115 	stw	r3,4(sp)
10009fe0:	003ec006 	br	10009ae4 <___vfiprintf_internal_r+0xd4>
10009fe4:	18028126 	beq	r3,zero,1000a9ec <___vfiprintf_internal_r+0xfdc>
10009fe8:	d9800a04 	addi	r6,sp,40
10009fec:	a80b883a 	mov	r5,r21
10009ff0:	b009883a 	mov	r4,r22
10009ff4:	00099040 	call	10009904 <__sprint_r.part.0>
10009ff8:	103f9a1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
10009ffc:	9021883a 	mov	r16,r18
1000a000:	003ff306 	br	10009fd0 <___vfiprintf_internal_r+0x5c0>
1000a004:	d9000417 	ldw	r4,16(sp)
1000a008:	6880040c 	andi	r2,r13,16
1000a00c:	20c00104 	addi	r3,r4,4
1000a010:	1002ac1e 	bne	r2,zero,1000aac4 <___vfiprintf_internal_r+0x10b4>
1000a014:	6880100c 	andi	r2,r13,64
1000a018:	1002fb26 	beq	r2,zero,1000ac08 <___vfiprintf_internal_r+0x11f8>
1000a01c:	d8800417 	ldw	r2,16(sp)
1000a020:	0039883a 	mov	fp,zero
1000a024:	d8c00415 	stw	r3,16(sp)
1000a028:	15c0000b 	ldhu	r23,0(r2)
1000a02c:	0005883a 	mov	r2,zero
1000a030:	003fc906 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000a034:	d9000417 	ldw	r4,16(sp)
1000a038:	6880040c 	andi	r2,r13,16
1000a03c:	20c00104 	addi	r3,r4,4
1000a040:	1002af1e 	bne	r2,zero,1000ab00 <___vfiprintf_internal_r+0x10f0>
1000a044:	6880100c 	andi	r2,r13,64
1000a048:	1002fb26 	beq	r2,zero,1000ac38 <___vfiprintf_internal_r+0x1228>
1000a04c:	d8800417 	ldw	r2,16(sp)
1000a050:	0039883a 	mov	fp,zero
1000a054:	d8c00415 	stw	r3,16(sp)
1000a058:	15c0000b 	ldhu	r23,0(r2)
1000a05c:	00800044 	movi	r2,1
1000a060:	003fbd06 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000a064:	d8c00017 	ldw	r3,0(sp)
1000a068:	d8000b15 	stw	zero,44(sp)
1000a06c:	1cc0010c 	andi	r19,r3,4
1000a070:	98024c26 	beq	r19,zero,1000a9a4 <___vfiprintf_internal_r+0xf94>
1000a074:	8de1c83a 	sub	r16,r17,r23
1000a078:	04024a0e 	bge	zero,r16,1000a9a4 <___vfiprintf_internal_r+0xf94>
1000a07c:	900d883a 	mov	r6,r18
1000a080:	80c00450 	cmplti	r3,r16,17
1000a084:	d9000b17 	ldw	r4,44(sp)
1000a088:	01c40074 	movhi	r7,4097
1000a08c:	18031a1e 	bne	r3,zero,1000acf8 <___vfiprintf_internal_r+0x12e8>
1000a090:	39c9c404 	addi	r7,r7,10000
1000a094:	04c00404 	movi	r19,16
1000a098:	00000606 	br	1000a0b4 <___vfiprintf_internal_r+0x6a4>
1000a09c:	21400084 	addi	r5,r4,2
1000a0a0:	31800204 	addi	r6,r6,8
1000a0a4:	1809883a 	mov	r4,r3
1000a0a8:	843ffc04 	addi	r16,r16,-16
1000a0ac:	80c00448 	cmpgei	r3,r16,17
1000a0b0:	18001726 	beq	r3,zero,1000a110 <___vfiprintf_internal_r+0x700>
1000a0b4:	20c00044 	addi	r3,r4,1
1000a0b8:	10800404 	addi	r2,r2,16
1000a0bc:	31c00015 	stw	r7,0(r6)
1000a0c0:	34c00115 	stw	r19,4(r6)
1000a0c4:	d8800c15 	stw	r2,48(sp)
1000a0c8:	d8c00b15 	stw	r3,44(sp)
1000a0cc:	19400208 	cmpgei	r5,r3,8
1000a0d0:	283ff226 	beq	r5,zero,1000a09c <___vfiprintf_internal_r+0x68c>
1000a0d4:	d9800a04 	addi	r6,sp,40
1000a0d8:	a80b883a 	mov	r5,r21
1000a0dc:	b009883a 	mov	r4,r22
1000a0e0:	10011f26 	beq	r2,zero,1000a560 <___vfiprintf_internal_r+0xb50>
1000a0e4:	d9c00015 	stw	r7,0(sp)
1000a0e8:	00099040 	call	10009904 <__sprint_r.part.0>
1000a0ec:	103f5d1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a0f0:	d9000b17 	ldw	r4,44(sp)
1000a0f4:	843ffc04 	addi	r16,r16,-16
1000a0f8:	80c00448 	cmpgei	r3,r16,17
1000a0fc:	d8800c17 	ldw	r2,48(sp)
1000a100:	d9c00017 	ldw	r7,0(sp)
1000a104:	900d883a 	mov	r6,r18
1000a108:	21400044 	addi	r5,r4,1
1000a10c:	183fe91e 	bne	r3,zero,1000a0b4 <___vfiprintf_internal_r+0x6a4>
1000a110:	1405883a 	add	r2,r2,r16
1000a114:	d9400b15 	stw	r5,44(sp)
1000a118:	31c00015 	stw	r7,0(r6)
1000a11c:	34000115 	stw	r16,4(r6)
1000a120:	d8800c15 	stw	r2,48(sp)
1000a124:	29400210 	cmplti	r5,r5,8
1000a128:	283f421e 	bne	r5,zero,10009e34 <___vfiprintf_internal_r+0x424>
1000a12c:	10021d26 	beq	r2,zero,1000a9a4 <___vfiprintf_internal_r+0xf94>
1000a130:	d9800a04 	addi	r6,sp,40
1000a134:	a80b883a 	mov	r5,r21
1000a138:	b009883a 	mov	r4,r22
1000a13c:	00099040 	call	10009904 <__sprint_r.part.0>
1000a140:	103f481e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a144:	d8800c17 	ldw	r2,48(sp)
1000a148:	003f3a06 	br	10009e34 <___vfiprintf_internal_r+0x424>
1000a14c:	000677c0 	call	1000677c <__sinit>
1000a150:	003e4106 	br	10009a58 <___vfiprintf_internal_r+0x48>
1000a154:	29403fcc 	andi	r5,r5,255
1000a158:	2802da1e 	bne	r5,zero,1000acc4 <___vfiprintf_internal_r+0x12b4>
1000a15c:	6880080c 	andi	r2,r13,32
1000a160:	10005b26 	beq	r2,zero,1000a2d0 <___vfiprintf_internal_r+0x8c0>
1000a164:	d8c00417 	ldw	r3,16(sp)
1000a168:	18800117 	ldw	r2,4(r3)
1000a16c:	1dc00017 	ldw	r23,0(r3)
1000a170:	18c00204 	addi	r3,r3,8
1000a174:	d8c00415 	stw	r3,16(sp)
1000a178:	1039883a 	mov	fp,r2
1000a17c:	10006016 	blt	r2,zero,1000a300 <___vfiprintf_internal_r+0x8f0>
1000a180:	40bfffd8 	cmpnei	r2,r8,-1
1000a184:	db800943 	ldbu	r14,37(sp)
1000a188:	10000626 	beq	r2,zero,1000a1a4 <___vfiprintf_internal_r+0x794>
1000a18c:	04ffdfc4 	movi	r19,-129
1000a190:	6cc6703a 	and	r3,r13,r19
1000a194:	bf04b03a 	or	r2,r23,fp
1000a198:	d8c00015 	stw	r3,0(sp)
1000a19c:	10021626 	beq	r2,zero,1000a9f8 <___vfiprintf_internal_r+0xfe8>
1000a1a0:	db400017 	ldw	r13,0(sp)
1000a1a4:	e001a71e 	bne	fp,zero,1000a844 <___vfiprintf_internal_r+0xe34>
1000a1a8:	b88002a8 	cmpgeui	r2,r23,10
1000a1ac:	1001a51e 	bne	r2,zero,1000a844 <___vfiprintf_internal_r+0xe34>
1000a1b0:	bdc00c04 	addi	r23,r23,48
1000a1b4:	ddc016c5 	stb	r23,91(sp)
1000a1b8:	db400015 	stw	r13,0(sp)
1000a1bc:	07000044 	movi	fp,1
1000a1c0:	dcc016c4 	addi	r19,sp,91
1000a1c4:	00007506 	br	1000a39c <___vfiprintf_internal_r+0x98c>
1000a1c8:	a0800007 	ldb	r2,0(r20)
1000a1cc:	6b401014 	ori	r13,r13,64
1000a1d0:	003e5006 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a1d4:	29403fcc 	andi	r5,r5,255
1000a1d8:	2802bc1e 	bne	r5,zero,1000accc <___vfiprintf_internal_r+0x12bc>
1000a1dc:	00c40074 	movhi	r3,4097
1000a1e0:	18c93904 	addi	r3,r3,9444
1000a1e4:	d8c00515 	stw	r3,20(sp)
1000a1e8:	68c0080c 	andi	r3,r13,32
1000a1ec:	1800bd26 	beq	r3,zero,1000a4e4 <___vfiprintf_internal_r+0xad4>
1000a1f0:	d8c00417 	ldw	r3,16(sp)
1000a1f4:	1dc00017 	ldw	r23,0(r3)
1000a1f8:	1f000117 	ldw	fp,4(r3)
1000a1fc:	18c00204 	addi	r3,r3,8
1000a200:	d8c00415 	stw	r3,16(sp)
1000a204:	68c0004c 	andi	r3,r13,1
1000a208:	18000226 	beq	r3,zero,1000a214 <___vfiprintf_internal_r+0x804>
1000a20c:	bf06b03a 	or	r3,r23,fp
1000a210:	1802261e 	bne	r3,zero,1000aaac <___vfiprintf_internal_r+0x109c>
1000a214:	00800084 	movi	r2,2
1000a218:	003f4f06 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000a21c:	d8800417 	ldw	r2,16(sp)
1000a220:	d8000945 	stb	zero,37(sp)
1000a224:	14c00017 	ldw	r19,0(r2)
1000a228:	10c00104 	addi	r3,r2,4
1000a22c:	98026926 	beq	r19,zero,1000abd4 <___vfiprintf_internal_r+0x11c4>
1000a230:	40bfffe0 	cmpeqi	r2,r8,-1
1000a234:	1002411e 	bne	r2,zero,1000ab3c <___vfiprintf_internal_r+0x112c>
1000a238:	400d883a 	mov	r6,r8
1000a23c:	000b883a 	mov	r5,zero
1000a240:	9809883a 	mov	r4,r19
1000a244:	d8c00315 	stw	r3,12(sp)
1000a248:	db400215 	stw	r13,8(sp)
1000a24c:	da000015 	stw	r8,0(sp)
1000a250:	0007c2c0 	call	10007c2c <memchr>
1000a254:	da000017 	ldw	r8,0(sp)
1000a258:	db400217 	ldw	r13,8(sp)
1000a25c:	d8c00317 	ldw	r3,12(sp)
1000a260:	10029426 	beq	r2,zero,1000acb4 <___vfiprintf_internal_r+0x12a4>
1000a264:	14f9c83a 	sub	fp,r2,r19
1000a268:	e02f883a 	mov	r23,fp
1000a26c:	d8c00415 	stw	r3,16(sp)
1000a270:	003ea006 	br	10009cf4 <___vfiprintf_internal_r+0x2e4>
1000a274:	a0800007 	ldb	r2,0(r20)
1000a278:	6b400814 	ori	r13,r13,32
1000a27c:	003e2506 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a280:	d8c00417 	ldw	r3,16(sp)
1000a284:	00800c04 	movi	r2,48
1000a288:	d8800985 	stb	r2,38(sp)
1000a28c:	00801e04 	movi	r2,120
1000a290:	01040074 	movhi	r4,4097
1000a294:	d88009c5 	stb	r2,39(sp)
1000a298:	18800104 	addi	r2,r3,4
1000a29c:	d8800415 	stw	r2,16(sp)
1000a2a0:	20893904 	addi	r2,r4,9444
1000a2a4:	d8800515 	stw	r2,20(sp)
1000a2a8:	1dc00017 	ldw	r23,0(r3)
1000a2ac:	0039883a 	mov	fp,zero
1000a2b0:	6b400094 	ori	r13,r13,2
1000a2b4:	00800084 	movi	r2,2
1000a2b8:	003f2706 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000a2bc:	29403fcc 	andi	r5,r5,255
1000a2c0:	2802841e 	bne	r5,zero,1000acd4 <___vfiprintf_internal_r+0x12c4>
1000a2c4:	6b400414 	ori	r13,r13,16
1000a2c8:	6880080c 	andi	r2,r13,32
1000a2cc:	103fa51e 	bne	r2,zero,1000a164 <___vfiprintf_internal_r+0x754>
1000a2d0:	d9000417 	ldw	r4,16(sp)
1000a2d4:	6880040c 	andi	r2,r13,16
1000a2d8:	20c00104 	addi	r3,r4,4
1000a2dc:	1001ee1e 	bne	r2,zero,1000aa98 <___vfiprintf_internal_r+0x1088>
1000a2e0:	6880100c 	andi	r2,r13,64
1000a2e4:	10024e26 	beq	r2,zero,1000ac20 <___vfiprintf_internal_r+0x1210>
1000a2e8:	d8800417 	ldw	r2,16(sp)
1000a2ec:	d8c00415 	stw	r3,16(sp)
1000a2f0:	15c0000f 	ldh	r23,0(r2)
1000a2f4:	b839d7fa 	srai	fp,r23,31
1000a2f8:	e005883a 	mov	r2,fp
1000a2fc:	103fa00e 	bge	r2,zero,1000a180 <___vfiprintf_internal_r+0x770>
1000a300:	b804c03a 	cmpne	r2,r23,zero
1000a304:	0739c83a 	sub	fp,zero,fp
1000a308:	e0b9c83a 	sub	fp,fp,r2
1000a30c:	00800b44 	movi	r2,45
1000a310:	d8800945 	stb	r2,37(sp)
1000a314:	40ffffe0 	cmpeqi	r3,r8,-1
1000a318:	05efc83a 	sub	r23,zero,r23
1000a31c:	03800b44 	movi	r14,45
1000a320:	00800044 	movi	r2,1
1000a324:	183f1026 	beq	r3,zero,10009f68 <___vfiprintf_internal_r+0x558>
1000a328:	10c00060 	cmpeqi	r3,r2,1
1000a32c:	183f9d1e 	bne	r3,zero,1000a1a4 <___vfiprintf_internal_r+0x794>
1000a330:	108000a0 	cmpeqi	r2,r2,2
1000a334:	10010a1e 	bne	r2,zero,1000a760 <___vfiprintf_internal_r+0xd50>
1000a338:	9027883a 	mov	r19,r18
1000a33c:	e008977a 	slli	r4,fp,29
1000a340:	b806d0fa 	srli	r3,r23,3
1000a344:	e038d0fa 	srli	fp,fp,3
1000a348:	b88001cc 	andi	r2,r23,7
1000a34c:	10800c04 	addi	r2,r2,48
1000a350:	20eeb03a 	or	r23,r4,r3
1000a354:	98bfffc5 	stb	r2,-1(r19)
1000a358:	bf06b03a 	or	r3,r23,fp
1000a35c:	980b883a 	mov	r5,r19
1000a360:	9cffffc4 	addi	r19,r19,-1
1000a364:	183ff51e 	bne	r3,zero,1000a33c <___vfiprintf_internal_r+0x92c>
1000a368:	68c0004c 	andi	r3,r13,1
1000a36c:	18010926 	beq	r3,zero,1000a794 <___vfiprintf_internal_r+0xd84>
1000a370:	10803fcc 	andi	r2,r2,255
1000a374:	1080201c 	xori	r2,r2,128
1000a378:	10bfe004 	addi	r2,r2,-128
1000a37c:	10800c18 	cmpnei	r2,r2,48
1000a380:	10010426 	beq	r2,zero,1000a794 <___vfiprintf_internal_r+0xd84>
1000a384:	297fff84 	addi	r5,r5,-2
1000a388:	00800c04 	movi	r2,48
1000a38c:	98bfffc5 	stb	r2,-1(r19)
1000a390:	9179c83a 	sub	fp,r18,r5
1000a394:	db400015 	stw	r13,0(sp)
1000a398:	2827883a 	mov	r19,r5
1000a39c:	402f883a 	mov	r23,r8
1000a3a0:	4700010e 	bge	r8,fp,1000a3a8 <___vfiprintf_internal_r+0x998>
1000a3a4:	e02f883a 	mov	r23,fp
1000a3a8:	73803fcc 	andi	r14,r14,255
1000a3ac:	7380201c 	xori	r14,r14,128
1000a3b0:	73bfe004 	addi	r14,r14,-128
1000a3b4:	703e5126 	beq	r14,zero,10009cfc <___vfiprintf_internal_r+0x2ec>
1000a3b8:	bdc00044 	addi	r23,r23,1
1000a3bc:	003e4f06 	br	10009cfc <___vfiprintf_internal_r+0x2ec>
1000a3c0:	a0800007 	ldb	r2,0(r20)
1000a3c4:	6b402014 	ori	r13,r13,128
1000a3c8:	003dd206 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a3cc:	a0800007 	ldb	r2,0(r20)
1000a3d0:	a0c00044 	addi	r3,r20,1
1000a3d4:	11000aa0 	cmpeqi	r4,r2,42
1000a3d8:	2002521e 	bne	r4,zero,1000ad24 <___vfiprintf_internal_r+0x1314>
1000a3dc:	113ff404 	addi	r4,r2,-48
1000a3e0:	21c002b0 	cmpltui	r7,r4,10
1000a3e4:	1829883a 	mov	r20,r3
1000a3e8:	0011883a 	mov	r8,zero
1000a3ec:	383dca26 	beq	r7,zero,10009b18 <___vfiprintf_internal_r+0x108>
1000a3f0:	400690ba 	slli	r3,r8,2
1000a3f4:	a0800007 	ldb	r2,0(r20)
1000a3f8:	a5000044 	addi	r20,r20,1
1000a3fc:	1a11883a 	add	r8,r3,r8
1000a400:	4211883a 	add	r8,r8,r8
1000a404:	4111883a 	add	r8,r8,r4
1000a408:	113ff404 	addi	r4,r2,-48
1000a40c:	20c002b0 	cmpltui	r3,r4,10
1000a410:	183ff71e 	bne	r3,zero,1000a3f0 <___vfiprintf_internal_r+0x9e0>
1000a414:	003dc006 	br	10009b18 <___vfiprintf_internal_r+0x108>
1000a418:	a0800003 	ldbu	r2,0(r20)
1000a41c:	10803fcc 	andi	r2,r2,255
1000a420:	1080201c 	xori	r2,r2,128
1000a424:	6b400114 	ori	r13,r13,4
1000a428:	10bfe004 	addi	r2,r2,-128
1000a42c:	003db906 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a430:	a0800007 	ldb	r2,0(r20)
1000a434:	01400044 	movi	r5,1
1000a438:	01800ac4 	movi	r6,43
1000a43c:	003db506 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a440:	d8c00417 	ldw	r3,16(sp)
1000a444:	a0800003 	ldbu	r2,0(r20)
1000a448:	1c400017 	ldw	r17,0(r3)
1000a44c:	18c00104 	addi	r3,r3,4
1000a450:	8801b716 	blt	r17,zero,1000ab30 <___vfiprintf_internal_r+0x1120>
1000a454:	d8c00415 	stw	r3,16(sp)
1000a458:	10803fcc 	andi	r2,r2,255
1000a45c:	1080201c 	xori	r2,r2,128
1000a460:	10bfe004 	addi	r2,r2,-128
1000a464:	003dab06 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a468:	a0800007 	ldb	r2,0(r20)
1000a46c:	6b400054 	ori	r13,r13,1
1000a470:	003da806 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a474:	30c03fcc 	andi	r3,r6,255
1000a478:	18c0201c 	xori	r3,r3,128
1000a47c:	18ffe004 	addi	r3,r3,-128
1000a480:	a0800003 	ldbu	r2,0(r20)
1000a484:	183ff41e 	bne	r3,zero,1000a458 <___vfiprintf_internal_r+0xa48>
1000a488:	10803fcc 	andi	r2,r2,255
1000a48c:	1080201c 	xori	r2,r2,128
1000a490:	01400044 	movi	r5,1
1000a494:	01800804 	movi	r6,32
1000a498:	10bfe004 	addi	r2,r2,-128
1000a49c:	003d9d06 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a4a0:	d8c00417 	ldw	r3,16(sp)
1000a4a4:	d8000945 	stb	zero,37(sp)
1000a4a8:	05c00044 	movi	r23,1
1000a4ac:	18800017 	ldw	r2,0(r3)
1000a4b0:	18c00104 	addi	r3,r3,4
1000a4b4:	d8c00415 	stw	r3,16(sp)
1000a4b8:	d8800d05 	stb	r2,52(sp)
1000a4bc:	07000044 	movi	fp,1
1000a4c0:	dcc00d04 	addi	r19,sp,52
1000a4c4:	003e0b06 	br	10009cf4 <___vfiprintf_internal_r+0x2e4>
1000a4c8:	29403fcc 	andi	r5,r5,255
1000a4cc:	2802061e 	bne	r5,zero,1000ace8 <___vfiprintf_internal_r+0x12d8>
1000a4d0:	00c40074 	movhi	r3,4097
1000a4d4:	18c93e04 	addi	r3,r3,9464
1000a4d8:	d8c00515 	stw	r3,20(sp)
1000a4dc:	68c0080c 	andi	r3,r13,32
1000a4e0:	183f431e 	bne	r3,zero,1000a1f0 <___vfiprintf_internal_r+0x7e0>
1000a4e4:	d9400417 	ldw	r5,16(sp)
1000a4e8:	68c0040c 	andi	r3,r13,16
1000a4ec:	29000104 	addi	r4,r5,4
1000a4f0:	18017f1e 	bne	r3,zero,1000aaf0 <___vfiprintf_internal_r+0x10e0>
1000a4f4:	68c0100c 	andi	r3,r13,64
1000a4f8:	1801be26 	beq	r3,zero,1000abf4 <___vfiprintf_internal_r+0x11e4>
1000a4fc:	d8c00417 	ldw	r3,16(sp)
1000a500:	0039883a 	mov	fp,zero
1000a504:	d9000415 	stw	r4,16(sp)
1000a508:	1dc0000b 	ldhu	r23,0(r3)
1000a50c:	003f3d06 	br	1000a204 <___vfiprintf_internal_r+0x7f4>
1000a510:	29403fcc 	andi	r5,r5,255
1000a514:	2801f61e 	bne	r5,zero,1000acf0 <___vfiprintf_internal_r+0x12e0>
1000a518:	d9000417 	ldw	r4,16(sp)
1000a51c:	6880080c 	andi	r2,r13,32
1000a520:	20c00017 	ldw	r3,0(r4)
1000a524:	21000104 	addi	r4,r4,4
1000a528:	10016b1e 	bne	r2,zero,1000aad8 <___vfiprintf_internal_r+0x10c8>
1000a52c:	6880040c 	andi	r2,r13,16
1000a530:	1001951e 	bne	r2,zero,1000ab88 <___vfiprintf_internal_r+0x1178>
1000a534:	6b40100c 	andi	r13,r13,64
1000a538:	68019326 	beq	r13,zero,1000ab88 <___vfiprintf_internal_r+0x1178>
1000a53c:	d8800117 	ldw	r2,4(sp)
1000a540:	d9000415 	stw	r4,16(sp)
1000a544:	1880000d 	sth	r2,0(r3)
1000a548:	003d5a06 	br	10009ab4 <___vfiprintf_internal_r+0xa4>
1000a54c:	a0800007 	ldb	r2,0(r20)
1000a550:	10c01b18 	cmpnei	r3,r2,108
1000a554:	18019826 	beq	r3,zero,1000abb8 <___vfiprintf_internal_r+0x11a8>
1000a558:	6b400414 	ori	r13,r13,16
1000a55c:	003d6d06 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000a560:	01400044 	movi	r5,1
1000a564:	0009883a 	mov	r4,zero
1000a568:	900d883a 	mov	r6,r18
1000a56c:	003ece06 	br	1000a0a8 <___vfiprintf_internal_r+0x698>
1000a570:	8dc7c83a 	sub	r3,r17,r23
1000a574:	00fe190e 	bge	zero,r3,10009ddc <___vfiprintf_internal_r+0x3cc>
1000a578:	19c00450 	cmplti	r7,r3,17
1000a57c:	3801e41e 	bne	r7,zero,1000ad10 <___vfiprintf_internal_r+0x1300>
1000a580:	01c40074 	movhi	r7,4097
1000a584:	39c9c004 	addi	r7,r7,9984
1000a588:	03400404 	movi	r13,16
1000a58c:	00000606 	br	1000a5a8 <___vfiprintf_internal_r+0xb98>
1000a590:	23800084 	addi	r14,r4,2
1000a594:	84000204 	addi	r16,r16,8
1000a598:	2809883a 	mov	r4,r5
1000a59c:	18fffc04 	addi	r3,r3,-16
1000a5a0:	19400448 	cmpgei	r5,r3,17
1000a5a4:	28001c26 	beq	r5,zero,1000a618 <___vfiprintf_internal_r+0xc08>
1000a5a8:	21400044 	addi	r5,r4,1
1000a5ac:	10800404 	addi	r2,r2,16
1000a5b0:	81c00015 	stw	r7,0(r16)
1000a5b4:	83400115 	stw	r13,4(r16)
1000a5b8:	d8800c15 	stw	r2,48(sp)
1000a5bc:	d9400b15 	stw	r5,44(sp)
1000a5c0:	29800208 	cmpgei	r6,r5,8
1000a5c4:	303ff226 	beq	r6,zero,1000a590 <___vfiprintf_internal_r+0xb80>
1000a5c8:	d9800a04 	addi	r6,sp,40
1000a5cc:	a80b883a 	mov	r5,r21
1000a5d0:	b009883a 	mov	r4,r22
1000a5d4:	10007826 	beq	r2,zero,1000a7b8 <___vfiprintf_internal_r+0xda8>
1000a5d8:	d9c00615 	stw	r7,24(sp)
1000a5dc:	d8c00315 	stw	r3,12(sp)
1000a5e0:	da000215 	stw	r8,8(sp)
1000a5e4:	00099040 	call	10009904 <__sprint_r.part.0>
1000a5e8:	103e1e1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a5ec:	d8c00317 	ldw	r3,12(sp)
1000a5f0:	d9000b17 	ldw	r4,44(sp)
1000a5f4:	d8800c17 	ldw	r2,48(sp)
1000a5f8:	18fffc04 	addi	r3,r3,-16
1000a5fc:	19400448 	cmpgei	r5,r3,17
1000a600:	d9c00617 	ldw	r7,24(sp)
1000a604:	da000217 	ldw	r8,8(sp)
1000a608:	9021883a 	mov	r16,r18
1000a60c:	23800044 	addi	r14,r4,1
1000a610:	03400404 	movi	r13,16
1000a614:	283fe41e 	bne	r5,zero,1000a5a8 <___vfiprintf_internal_r+0xb98>
1000a618:	83400204 	addi	r13,r16,8
1000a61c:	10c5883a 	add	r2,r2,r3
1000a620:	80c00115 	stw	r3,4(r16)
1000a624:	81c00015 	stw	r7,0(r16)
1000a628:	d8800c15 	stw	r2,48(sp)
1000a62c:	db800b15 	stw	r14,44(sp)
1000a630:	70c00208 	cmpgei	r3,r14,8
1000a634:	18011326 	beq	r3,zero,1000aa84 <___vfiprintf_internal_r+0x1074>
1000a638:	10018826 	beq	r2,zero,1000ac5c <___vfiprintf_internal_r+0x124c>
1000a63c:	d9800a04 	addi	r6,sp,40
1000a640:	a80b883a 	mov	r5,r21
1000a644:	b009883a 	mov	r4,r22
1000a648:	da000215 	stw	r8,8(sp)
1000a64c:	00099040 	call	10009904 <__sprint_r.part.0>
1000a650:	103e041e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a654:	da000217 	ldw	r8,8(sp)
1000a658:	d9000b17 	ldw	r4,44(sp)
1000a65c:	d8800c17 	ldw	r2,48(sp)
1000a660:	4711c83a 	sub	r8,r8,fp
1000a664:	d9801904 	addi	r6,sp,100
1000a668:	21400044 	addi	r5,r4,1
1000a66c:	9021883a 	mov	r16,r18
1000a670:	023ddc0e 	bge	zero,r8,10009de4 <___vfiprintf_internal_r+0x3d4>
1000a674:	40c00450 	cmplti	r3,r8,17
1000a678:	01c40074 	movhi	r7,4097
1000a67c:	1801741e 	bne	r3,zero,1000ac50 <___vfiprintf_internal_r+0x1240>
1000a680:	39c9c004 	addi	r7,r7,9984
1000a684:	03400404 	movi	r13,16
1000a688:	00000606 	br	1000a6a4 <___vfiprintf_internal_r+0xc94>
1000a68c:	21400084 	addi	r5,r4,2
1000a690:	84000204 	addi	r16,r16,8
1000a694:	1809883a 	mov	r4,r3
1000a698:	423ffc04 	addi	r8,r8,-16
1000a69c:	40c00448 	cmpgei	r3,r8,17
1000a6a0:	18001a26 	beq	r3,zero,1000a70c <___vfiprintf_internal_r+0xcfc>
1000a6a4:	20c00044 	addi	r3,r4,1
1000a6a8:	10800404 	addi	r2,r2,16
1000a6ac:	81c00015 	stw	r7,0(r16)
1000a6b0:	83400115 	stw	r13,4(r16)
1000a6b4:	d8800c15 	stw	r2,48(sp)
1000a6b8:	d8c00b15 	stw	r3,44(sp)
1000a6bc:	19400208 	cmpgei	r5,r3,8
1000a6c0:	283ff226 	beq	r5,zero,1000a68c <___vfiprintf_internal_r+0xc7c>
1000a6c4:	d9800a04 	addi	r6,sp,40
1000a6c8:	a80b883a 	mov	r5,r21
1000a6cc:	b009883a 	mov	r4,r22
1000a6d0:	10001a26 	beq	r2,zero,1000a73c <___vfiprintf_internal_r+0xd2c>
1000a6d4:	d9c00315 	stw	r7,12(sp)
1000a6d8:	da000215 	stw	r8,8(sp)
1000a6dc:	00099040 	call	10009904 <__sprint_r.part.0>
1000a6e0:	103de01e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a6e4:	da000217 	ldw	r8,8(sp)
1000a6e8:	d9000b17 	ldw	r4,44(sp)
1000a6ec:	d8800c17 	ldw	r2,48(sp)
1000a6f0:	423ffc04 	addi	r8,r8,-16
1000a6f4:	40c00448 	cmpgei	r3,r8,17
1000a6f8:	d9c00317 	ldw	r7,12(sp)
1000a6fc:	9021883a 	mov	r16,r18
1000a700:	21400044 	addi	r5,r4,1
1000a704:	03400404 	movi	r13,16
1000a708:	183fe61e 	bne	r3,zero,1000a6a4 <___vfiprintf_internal_r+0xc94>
1000a70c:	81000204 	addi	r4,r16,8
1000a710:	1205883a 	add	r2,r2,r8
1000a714:	81c00015 	stw	r7,0(r16)
1000a718:	82000115 	stw	r8,4(r16)
1000a71c:	d8800c15 	stw	r2,48(sp)
1000a720:	d9400b15 	stw	r5,44(sp)
1000a724:	28c00208 	cmpgei	r3,r5,8
1000a728:	1800a41e 	bne	r3,zero,1000a9bc <___vfiprintf_internal_r+0xfac>
1000a72c:	29400044 	addi	r5,r5,1
1000a730:	21800204 	addi	r6,r4,8
1000a734:	2021883a 	mov	r16,r4
1000a738:	003daa06 	br	10009de4 <___vfiprintf_internal_r+0x3d4>
1000a73c:	01400044 	movi	r5,1
1000a740:	0009883a 	mov	r4,zero
1000a744:	9021883a 	mov	r16,r18
1000a748:	003fd306 	br	1000a698 <___vfiprintf_internal_r+0xc88>
1000a74c:	10c00060 	cmpeqi	r3,r2,1
1000a750:	1801561e 	bne	r3,zero,1000acac <___vfiprintf_internal_r+0x129c>
1000a754:	108000a0 	cmpeqi	r2,r2,2
1000a758:	db400017 	ldw	r13,0(sp)
1000a75c:	103ef626 	beq	r2,zero,1000a338 <___vfiprintf_internal_r+0x928>
1000a760:	9027883a 	mov	r19,r18
1000a764:	d9000517 	ldw	r4,20(sp)
1000a768:	b88003cc 	andi	r2,r23,15
1000a76c:	e006973a 	slli	r3,fp,28
1000a770:	b82ed13a 	srli	r23,r23,4
1000a774:	2085883a 	add	r2,r4,r2
1000a778:	10800003 	ldbu	r2,0(r2)
1000a77c:	e038d13a 	srli	fp,fp,4
1000a780:	1deeb03a 	or	r23,r3,r23
1000a784:	98bfffc5 	stb	r2,-1(r19)
1000a788:	bf04b03a 	or	r2,r23,fp
1000a78c:	9cffffc4 	addi	r19,r19,-1
1000a790:	103ff41e 	bne	r2,zero,1000a764 <___vfiprintf_internal_r+0xd54>
1000a794:	94f9c83a 	sub	fp,r18,r19
1000a798:	db400015 	stw	r13,0(sp)
1000a79c:	003eff06 	br	1000a39c <___vfiprintf_internal_r+0x98c>
1000a7a0:	d9800a04 	addi	r6,sp,40
1000a7a4:	a80b883a 	mov	r5,r21
1000a7a8:	b009883a 	mov	r4,r22
1000a7ac:	00099040 	call	10009904 <__sprint_r.part.0>
1000a7b0:	103da626 	beq	r2,zero,10009e4c <___vfiprintf_internal_r+0x43c>
1000a7b4:	003dab06 	br	10009e64 <___vfiprintf_internal_r+0x454>
1000a7b8:	03800044 	movi	r14,1
1000a7bc:	0009883a 	mov	r4,zero
1000a7c0:	9021883a 	mov	r16,r18
1000a7c4:	003f7506 	br	1000a59c <___vfiprintf_internal_r+0xb8c>
1000a7c8:	10009026 	beq	r2,zero,1000aa0c <___vfiprintf_internal_r+0xffc>
1000a7cc:	d9800a04 	addi	r6,sp,40
1000a7d0:	a80b883a 	mov	r5,r21
1000a7d4:	b009883a 	mov	r4,r22
1000a7d8:	da000615 	stw	r8,24(sp)
1000a7dc:	db400315 	stw	r13,12(sp)
1000a7e0:	db800215 	stw	r14,8(sp)
1000a7e4:	00099040 	call	10009904 <__sprint_r.part.0>
1000a7e8:	103d9e1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a7ec:	d9000b17 	ldw	r4,44(sp)
1000a7f0:	d8800c17 	ldw	r2,48(sp)
1000a7f4:	da000617 	ldw	r8,24(sp)
1000a7f8:	db400317 	ldw	r13,12(sp)
1000a7fc:	db800217 	ldw	r14,8(sp)
1000a800:	d9801904 	addi	r6,sp,100
1000a804:	21400044 	addi	r5,r4,1
1000a808:	9021883a 	mov	r16,r18
1000a80c:	003d5806 	br	10009d70 <___vfiprintf_internal_r+0x360>
1000a810:	d8800984 	addi	r2,sp,38
1000a814:	d8801715 	stw	r2,92(sp)
1000a818:	00800084 	movi	r2,2
1000a81c:	d8801815 	stw	r2,96(sp)
1000a820:	d9801904 	addi	r6,sp,100
1000a824:	01400044 	movi	r5,1
1000a828:	3021883a 	mov	r16,r6
1000a82c:	2809883a 	mov	r4,r5
1000a830:	21400044 	addi	r5,r4,1
1000a834:	81800204 	addi	r6,r16,8
1000a838:	003d6606 	br	10009dd4 <___vfiprintf_internal_r+0x3c4>
1000a83c:	db400017 	ldw	r13,0(sp)
1000a840:	003eb906 	br	1000a328 <___vfiprintf_internal_r+0x918>
1000a844:	9027883a 	mov	r19,r18
1000a848:	b809883a 	mov	r4,r23
1000a84c:	e00b883a 	mov	r5,fp
1000a850:	01800284 	movi	r6,10
1000a854:	000f883a 	mov	r7,zero
1000a858:	db800315 	stw	r14,12(sp)
1000a85c:	da000215 	stw	r8,8(sp)
1000a860:	db400015 	stw	r13,0(sp)
1000a864:	000c5b80 	call	1000c5b8 <__umoddi3>
1000a868:	10800c04 	addi	r2,r2,48
1000a86c:	b809883a 	mov	r4,r23
1000a870:	e00b883a 	mov	r5,fp
1000a874:	98bfffc5 	stb	r2,-1(r19)
1000a878:	01800284 	movi	r6,10
1000a87c:	000f883a 	mov	r7,zero
1000a880:	000bf980 	call	1000bf98 <__udivdi3>
1000a884:	e009883a 	mov	r4,fp
1000a888:	b80b883a 	mov	r5,r23
1000a88c:	db400017 	ldw	r13,0(sp)
1000a890:	da000217 	ldw	r8,8(sp)
1000a894:	db800317 	ldw	r14,12(sp)
1000a898:	9cffffc4 	addi	r19,r19,-1
1000a89c:	102f883a 	mov	r23,r2
1000a8a0:	1839883a 	mov	fp,r3
1000a8a4:	203fe81e 	bne	r4,zero,1000a848 <___vfiprintf_internal_r+0xe38>
1000a8a8:	294002a8 	cmpgeui	r5,r5,10
1000a8ac:	283fe61e 	bne	r5,zero,1000a848 <___vfiprintf_internal_r+0xe38>
1000a8b0:	94f9c83a 	sub	fp,r18,r19
1000a8b4:	003eb906 	br	1000a39c <___vfiprintf_internal_r+0x98c>
1000a8b8:	19400450 	cmplti	r5,r3,17
1000a8bc:	01c40074 	movhi	r7,4097
1000a8c0:	2801061e 	bne	r5,zero,1000acdc <___vfiprintf_internal_r+0x12cc>
1000a8c4:	39c9c404 	addi	r7,r7,10000
1000a8c8:	03c00404 	movi	r15,16
1000a8cc:	00000706 	br	1000a8ec <___vfiprintf_internal_r+0xedc>
1000a8d0:	27c00084 	addi	ra,r4,2
1000a8d4:	84000204 	addi	r16,r16,8
1000a8d8:	3009883a 	mov	r4,r6
1000a8dc:	18fffc04 	addi	r3,r3,-16
1000a8e0:	19400448 	cmpgei	r5,r3,17
1000a8e4:	28002026 	beq	r5,zero,1000a968 <___vfiprintf_internal_r+0xf58>
1000a8e8:	21800044 	addi	r6,r4,1
1000a8ec:	10800404 	addi	r2,r2,16
1000a8f0:	81c00015 	stw	r7,0(r16)
1000a8f4:	83c00115 	stw	r15,4(r16)
1000a8f8:	d8800c15 	stw	r2,48(sp)
1000a8fc:	d9800b15 	stw	r6,44(sp)
1000a900:	31400208 	cmpgei	r5,r6,8
1000a904:	283ff226 	beq	r5,zero,1000a8d0 <___vfiprintf_internal_r+0xec0>
1000a908:	d9800a04 	addi	r6,sp,40
1000a90c:	a80b883a 	mov	r5,r21
1000a910:	b009883a 	mov	r4,r22
1000a914:	10001f26 	beq	r2,zero,1000a994 <___vfiprintf_internal_r+0xf84>
1000a918:	d9c00815 	stw	r7,32(sp)
1000a91c:	d8c00715 	stw	r3,28(sp)
1000a920:	da000615 	stw	r8,24(sp)
1000a924:	db400315 	stw	r13,12(sp)
1000a928:	db800215 	stw	r14,8(sp)
1000a92c:	00099040 	call	10009904 <__sprint_r.part.0>
1000a930:	103d4c1e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a934:	d8c00717 	ldw	r3,28(sp)
1000a938:	d9000b17 	ldw	r4,44(sp)
1000a93c:	d8800c17 	ldw	r2,48(sp)
1000a940:	18fffc04 	addi	r3,r3,-16
1000a944:	19400448 	cmpgei	r5,r3,17
1000a948:	d9c00817 	ldw	r7,32(sp)
1000a94c:	da000617 	ldw	r8,24(sp)
1000a950:	db400317 	ldw	r13,12(sp)
1000a954:	db800217 	ldw	r14,8(sp)
1000a958:	9021883a 	mov	r16,r18
1000a95c:	27c00044 	addi	ra,r4,1
1000a960:	03c00404 	movi	r15,16
1000a964:	283fe01e 	bne	r5,zero,1000a8e8 <___vfiprintf_internal_r+0xed8>
1000a968:	10c5883a 	add	r2,r2,r3
1000a96c:	80c00115 	stw	r3,4(r16)
1000a970:	81c00015 	stw	r7,0(r16)
1000a974:	d8800c15 	stw	r2,48(sp)
1000a978:	dfc00b15 	stw	ra,44(sp)
1000a97c:	f8c00208 	cmpgei	r3,ra,8
1000a980:	18002d1e 	bne	r3,zero,1000aa38 <___vfiprintf_internal_r+0x1028>
1000a984:	84000204 	addi	r16,r16,8
1000a988:	f9400044 	addi	r5,ra,1
1000a98c:	f809883a 	mov	r4,ra
1000a990:	003ce706 	br	10009d30 <___vfiprintf_internal_r+0x320>
1000a994:	0009883a 	mov	r4,zero
1000a998:	07c00044 	movi	ra,1
1000a99c:	9021883a 	mov	r16,r18
1000a9a0:	003fce06 	br	1000a8dc <___vfiprintf_internal_r+0xecc>
1000a9a4:	8dc0010e 	bge	r17,r23,1000a9ac <___vfiprintf_internal_r+0xf9c>
1000a9a8:	b823883a 	mov	r17,r23
1000a9ac:	d8800117 	ldw	r2,4(sp)
1000a9b0:	1445883a 	add	r2,r2,r17
1000a9b4:	d8800115 	stw	r2,4(sp)
1000a9b8:	003d2406 	br	10009e4c <___vfiprintf_internal_r+0x43c>
1000a9bc:	10007626 	beq	r2,zero,1000ab98 <___vfiprintf_internal_r+0x1188>
1000a9c0:	d9800a04 	addi	r6,sp,40
1000a9c4:	a80b883a 	mov	r5,r21
1000a9c8:	b009883a 	mov	r4,r22
1000a9cc:	00099040 	call	10009904 <__sprint_r.part.0>
1000a9d0:	103d241e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000a9d4:	d9400b17 	ldw	r5,44(sp)
1000a9d8:	d8800c17 	ldw	r2,48(sp)
1000a9dc:	d9801904 	addi	r6,sp,100
1000a9e0:	29400044 	addi	r5,r5,1
1000a9e4:	9021883a 	mov	r16,r18
1000a9e8:	003cfe06 	br	10009de4 <___vfiprintf_internal_r+0x3d4>
1000a9ec:	d8000b15 	stw	zero,44(sp)
1000a9f0:	9021883a 	mov	r16,r18
1000a9f4:	003d7606 	br	10009fd0 <___vfiprintf_internal_r+0x5c0>
1000a9f8:	4000ac1e 	bne	r8,zero,1000acac <___vfiprintf_internal_r+0x129c>
1000a9fc:	0011883a 	mov	r8,zero
1000aa00:	0039883a 	mov	fp,zero
1000aa04:	9027883a 	mov	r19,r18
1000aa08:	003e6406 	br	1000a39c <___vfiprintf_internal_r+0x98c>
1000aa0c:	7000411e 	bne	r14,zero,1000ab14 <___vfiprintf_internal_r+0x1104>
1000aa10:	0009883a 	mov	r4,zero
1000aa14:	d9801904 	addi	r6,sp,100
1000aa18:	01400044 	movi	r5,1
1000aa1c:	9021883a 	mov	r16,r18
1000aa20:	003cec06 	br	10009dd4 <___vfiprintf_internal_r+0x3c4>
1000aa24:	d9801904 	addi	r6,sp,100
1000aa28:	01400044 	movi	r5,1
1000aa2c:	0009883a 	mov	r4,zero
1000aa30:	9021883a 	mov	r16,r18
1000aa34:	003ce706 	br	10009dd4 <___vfiprintf_internal_r+0x3c4>
1000aa38:	10004a26 	beq	r2,zero,1000ab64 <___vfiprintf_internal_r+0x1154>
1000aa3c:	d9800a04 	addi	r6,sp,40
1000aa40:	a80b883a 	mov	r5,r21
1000aa44:	b009883a 	mov	r4,r22
1000aa48:	da000615 	stw	r8,24(sp)
1000aa4c:	db400315 	stw	r13,12(sp)
1000aa50:	db800215 	stw	r14,8(sp)
1000aa54:	00099040 	call	10009904 <__sprint_r.part.0>
1000aa58:	103d021e 	bne	r2,zero,10009e64 <___vfiprintf_internal_r+0x454>
1000aa5c:	d9000b17 	ldw	r4,44(sp)
1000aa60:	d8800c17 	ldw	r2,48(sp)
1000aa64:	da000617 	ldw	r8,24(sp)
1000aa68:	db400317 	ldw	r13,12(sp)
1000aa6c:	db800217 	ldw	r14,8(sp)
1000aa70:	9021883a 	mov	r16,r18
1000aa74:	21400044 	addi	r5,r4,1
1000aa78:	003cad06 	br	10009d30 <___vfiprintf_internal_r+0x320>
1000aa7c:	9027883a 	mov	r19,r18
1000aa80:	003e4606 	br	1000a39c <___vfiprintf_internal_r+0x98c>
1000aa84:	71400044 	addi	r5,r14,1
1000aa88:	69800204 	addi	r6,r13,8
1000aa8c:	7009883a 	mov	r4,r14
1000aa90:	6821883a 	mov	r16,r13
1000aa94:	003cd106 	br	10009ddc <___vfiprintf_internal_r+0x3cc>
1000aa98:	25c00017 	ldw	r23,0(r4)
1000aa9c:	d8c00415 	stw	r3,16(sp)
1000aaa0:	b839d7fa 	srai	fp,r23,31
1000aaa4:	e005883a 	mov	r2,fp
1000aaa8:	003db406 	br	1000a17c <___vfiprintf_internal_r+0x76c>
1000aaac:	00c00c04 	movi	r3,48
1000aab0:	d88009c5 	stb	r2,39(sp)
1000aab4:	d8c00985 	stb	r3,38(sp)
1000aab8:	6b400094 	ori	r13,r13,2
1000aabc:	00800084 	movi	r2,2
1000aac0:	003d2506 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000aac4:	25c00017 	ldw	r23,0(r4)
1000aac8:	0039883a 	mov	fp,zero
1000aacc:	d8c00415 	stw	r3,16(sp)
1000aad0:	0005883a 	mov	r2,zero
1000aad4:	003d2006 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000aad8:	d9400117 	ldw	r5,4(sp)
1000aadc:	d9000415 	stw	r4,16(sp)
1000aae0:	2805d7fa 	srai	r2,r5,31
1000aae4:	19400015 	stw	r5,0(r3)
1000aae8:	18800115 	stw	r2,4(r3)
1000aaec:	003bf106 	br	10009ab4 <___vfiprintf_internal_r+0xa4>
1000aaf0:	2dc00017 	ldw	r23,0(r5)
1000aaf4:	0039883a 	mov	fp,zero
1000aaf8:	d9000415 	stw	r4,16(sp)
1000aafc:	003dc106 	br	1000a204 <___vfiprintf_internal_r+0x7f4>
1000ab00:	25c00017 	ldw	r23,0(r4)
1000ab04:	0039883a 	mov	fp,zero
1000ab08:	d8c00415 	stw	r3,16(sp)
1000ab0c:	00800044 	movi	r2,1
1000ab10:	003d1106 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000ab14:	d8800984 	addi	r2,sp,38
1000ab18:	d8801715 	stw	r2,92(sp)
1000ab1c:	00800084 	movi	r2,2
1000ab20:	d8801815 	stw	r2,96(sp)
1000ab24:	dc001904 	addi	r16,sp,100
1000ab28:	01000044 	movi	r4,1
1000ab2c:	003f4006 	br	1000a830 <___vfiprintf_internal_r+0xe20>
1000ab30:	0463c83a 	sub	r17,zero,r17
1000ab34:	d8c00415 	stw	r3,16(sp)
1000ab38:	003e3806 	br	1000a41c <___vfiprintf_internal_r+0xa0c>
1000ab3c:	9809883a 	mov	r4,r19
1000ab40:	d8c00215 	stw	r3,8(sp)
1000ab44:	db400015 	stw	r13,0(sp)
1000ab48:	00023c80 	call	100023c8 <strlen>
1000ab4c:	d8c00217 	ldw	r3,8(sp)
1000ab50:	db400017 	ldw	r13,0(sp)
1000ab54:	1039883a 	mov	fp,r2
1000ab58:	102f883a 	mov	r23,r2
1000ab5c:	d8c00415 	stw	r3,16(sp)
1000ab60:	003c6406 	br	10009cf4 <___vfiprintf_internal_r+0x2e4>
1000ab64:	d8c00947 	ldb	r3,37(sp)
1000ab68:	18004326 	beq	r3,zero,1000ac78 <___vfiprintf_internal_r+0x1268>
1000ab6c:	d8800944 	addi	r2,sp,37
1000ab70:	d8801715 	stw	r2,92(sp)
1000ab74:	00800044 	movi	r2,1
1000ab78:	d8801815 	stw	r2,96(sp)
1000ab7c:	d9801904 	addi	r6,sp,100
1000ab80:	01400044 	movi	r5,1
1000ab84:	003c7606 	br	10009d60 <___vfiprintf_internal_r+0x350>
1000ab88:	d8800117 	ldw	r2,4(sp)
1000ab8c:	18800015 	stw	r2,0(r3)
1000ab90:	d9000415 	stw	r4,16(sp)
1000ab94:	003bc706 	br	10009ab4 <___vfiprintf_internal_r+0xa4>
1000ab98:	00c00044 	movi	r3,1
1000ab9c:	e005883a 	mov	r2,fp
1000aba0:	dcc01715 	stw	r19,92(sp)
1000aba4:	df001815 	stw	fp,96(sp)
1000aba8:	df000c15 	stw	fp,48(sp)
1000abac:	d8c00b15 	stw	r3,44(sp)
1000abb0:	d9801904 	addi	r6,sp,100
1000abb4:	003c9a06 	br	10009e20 <___vfiprintf_internal_r+0x410>
1000abb8:	a0800043 	ldbu	r2,1(r20)
1000abbc:	6b400814 	ori	r13,r13,32
1000abc0:	a5000044 	addi	r20,r20,1
1000abc4:	10803fcc 	andi	r2,r2,255
1000abc8:	1080201c 	xori	r2,r2,128
1000abcc:	10bfe004 	addi	r2,r2,-128
1000abd0:	003bd006 	br	10009b14 <___vfiprintf_internal_r+0x104>
1000abd4:	408001f0 	cmpltui	r2,r8,7
1000abd8:	4039883a 	mov	fp,r8
1000abdc:	10002426 	beq	r2,zero,1000ac70 <___vfiprintf_internal_r+0x1260>
1000abe0:	04c40074 	movhi	r19,4097
1000abe4:	e02f883a 	mov	r23,fp
1000abe8:	d8c00415 	stw	r3,16(sp)
1000abec:	9cc94304 	addi	r19,r19,9484
1000abf0:	003c4006 	br	10009cf4 <___vfiprintf_internal_r+0x2e4>
1000abf4:	d8c00417 	ldw	r3,16(sp)
1000abf8:	0039883a 	mov	fp,zero
1000abfc:	d9000415 	stw	r4,16(sp)
1000ac00:	1dc00017 	ldw	r23,0(r3)
1000ac04:	003d7f06 	br	1000a204 <___vfiprintf_internal_r+0x7f4>
1000ac08:	d8800417 	ldw	r2,16(sp)
1000ac0c:	0039883a 	mov	fp,zero
1000ac10:	d8c00415 	stw	r3,16(sp)
1000ac14:	15c00017 	ldw	r23,0(r2)
1000ac18:	0005883a 	mov	r2,zero
1000ac1c:	003cce06 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000ac20:	d8800417 	ldw	r2,16(sp)
1000ac24:	d8c00415 	stw	r3,16(sp)
1000ac28:	15c00017 	ldw	r23,0(r2)
1000ac2c:	b839d7fa 	srai	fp,r23,31
1000ac30:	e005883a 	mov	r2,fp
1000ac34:	003d5106 	br	1000a17c <___vfiprintf_internal_r+0x76c>
1000ac38:	d8800417 	ldw	r2,16(sp)
1000ac3c:	0039883a 	mov	fp,zero
1000ac40:	d8c00415 	stw	r3,16(sp)
1000ac44:	15c00017 	ldw	r23,0(r2)
1000ac48:	00800044 	movi	r2,1
1000ac4c:	003cc206 	br	10009f58 <___vfiprintf_internal_r+0x548>
1000ac50:	3009883a 	mov	r4,r6
1000ac54:	39c9c004 	addi	r7,r7,9984
1000ac58:	003ead06 	br	1000a710 <___vfiprintf_internal_r+0xd00>
1000ac5c:	d9801904 	addi	r6,sp,100
1000ac60:	01400044 	movi	r5,1
1000ac64:	0009883a 	mov	r4,zero
1000ac68:	9021883a 	mov	r16,r18
1000ac6c:	003c5b06 	br	10009ddc <___vfiprintf_internal_r+0x3cc>
1000ac70:	07000184 	movi	fp,6
1000ac74:	003fda06 	br	1000abe0 <___vfiprintf_internal_r+0x11d0>
1000ac78:	703ee51e 	bne	r14,zero,1000a810 <___vfiprintf_internal_r+0xe00>
1000ac7c:	0009883a 	mov	r4,zero
1000ac80:	d9801904 	addi	r6,sp,100
1000ac84:	01400044 	movi	r5,1
1000ac88:	9021883a 	mov	r16,r18
1000ac8c:	003c5306 	br	10009ddc <___vfiprintf_internal_r+0x3cc>
1000ac90:	d9800945 	stb	r6,37(sp)
1000ac94:	003c1106 	br	10009cdc <___vfiprintf_internal_r+0x2cc>
1000ac98:	d9800a04 	addi	r6,sp,40
1000ac9c:	a80b883a 	mov	r5,r21
1000aca0:	b009883a 	mov	r4,r22
1000aca4:	00099040 	call	10009904 <__sprint_r.part.0>
1000aca8:	003c6e06 	br	10009e64 <___vfiprintf_internal_r+0x454>
1000acac:	db400017 	ldw	r13,0(sp)
1000acb0:	003d3f06 	br	1000a1b0 <___vfiprintf_internal_r+0x7a0>
1000acb4:	402f883a 	mov	r23,r8
1000acb8:	d8c00415 	stw	r3,16(sp)
1000acbc:	4039883a 	mov	fp,r8
1000acc0:	003c0c06 	br	10009cf4 <___vfiprintf_internal_r+0x2e4>
1000acc4:	d9800945 	stb	r6,37(sp)
1000acc8:	003d2406 	br	1000a15c <___vfiprintf_internal_r+0x74c>
1000accc:	d9800945 	stb	r6,37(sp)
1000acd0:	003d4206 	br	1000a1dc <___vfiprintf_internal_r+0x7cc>
1000acd4:	d9800945 	stb	r6,37(sp)
1000acd8:	003d7a06 	br	1000a2c4 <___vfiprintf_internal_r+0x8b4>
1000acdc:	303f883a 	mov	ra,r6
1000ace0:	39c9c404 	addi	r7,r7,10000
1000ace4:	003f2006 	br	1000a968 <___vfiprintf_internal_r+0xf58>
1000ace8:	d9800945 	stb	r6,37(sp)
1000acec:	003df806 	br	1000a4d0 <___vfiprintf_internal_r+0xac0>
1000acf0:	d9800945 	stb	r6,37(sp)
1000acf4:	003e0806 	br	1000a518 <___vfiprintf_internal_r+0xb08>
1000acf8:	21400044 	addi	r5,r4,1
1000acfc:	39c9c404 	addi	r7,r7,10000
1000ad00:	003d0306 	br	1000a110 <___vfiprintf_internal_r+0x700>
1000ad04:	00bfffc4 	movi	r2,-1
1000ad08:	d8800115 	stw	r2,4(sp)
1000ad0c:	003c5806 	br	10009e70 <___vfiprintf_internal_r+0x460>
1000ad10:	01c40074 	movhi	r7,4097
1000ad14:	301b883a 	mov	r13,r6
1000ad18:	281d883a 	mov	r14,r5
1000ad1c:	39c9c004 	addi	r7,r7,9984
1000ad20:	003e3e06 	br	1000a61c <___vfiprintf_internal_r+0xc0c>
1000ad24:	d8800417 	ldw	r2,16(sp)
1000ad28:	12000017 	ldw	r8,0(r2)
1000ad2c:	11000104 	addi	r4,r2,4
1000ad30:	4000010e 	bge	r8,zero,1000ad38 <___vfiprintf_internal_r+0x1328>
1000ad34:	023fffc4 	movi	r8,-1
1000ad38:	a0800043 	ldbu	r2,1(r20)
1000ad3c:	d9000415 	stw	r4,16(sp)
1000ad40:	1829883a 	mov	r20,r3
1000ad44:	10803fcc 	andi	r2,r2,255
1000ad48:	1080201c 	xori	r2,r2,128
1000ad4c:	10bfe004 	addi	r2,r2,-128
1000ad50:	003b7006 	br	10009b14 <___vfiprintf_internal_r+0x104>

1000ad54 <__vfiprintf_internal>:
1000ad54:	00c40074 	movhi	r3,4097
1000ad58:	2005883a 	mov	r2,r4
1000ad5c:	1911b317 	ldw	r4,18124(r3)
1000ad60:	300f883a 	mov	r7,r6
1000ad64:	280d883a 	mov	r6,r5
1000ad68:	100b883a 	mov	r5,r2
1000ad6c:	0009a101 	jmpi	10009a10 <___vfiprintf_internal_r>

1000ad70 <__sbprintf>:
1000ad70:	2880030b 	ldhu	r2,12(r5)
1000ad74:	2b001917 	ldw	r12,100(r5)
1000ad78:	2ac0038b 	ldhu	r11,14(r5)
1000ad7c:	2a800717 	ldw	r10,28(r5)
1000ad80:	2a400917 	ldw	r9,36(r5)
1000ad84:	defee204 	addi	sp,sp,-1144
1000ad88:	da001a04 	addi	r8,sp,104
1000ad8c:	00c10004 	movi	r3,1024
1000ad90:	dc011a15 	stw	r16,1128(sp)
1000ad94:	10bfff4c 	andi	r2,r2,65533
1000ad98:	2821883a 	mov	r16,r5
1000ad9c:	d80b883a 	mov	r5,sp
1000ada0:	dc811c15 	stw	r18,1136(sp)
1000ada4:	dc411b15 	stw	r17,1132(sp)
1000ada8:	dfc11d15 	stw	ra,1140(sp)
1000adac:	2025883a 	mov	r18,r4
1000adb0:	d880030d 	sth	r2,12(sp)
1000adb4:	db001915 	stw	r12,100(sp)
1000adb8:	dac0038d 	sth	r11,14(sp)
1000adbc:	da800715 	stw	r10,28(sp)
1000adc0:	da400915 	stw	r9,36(sp)
1000adc4:	da000015 	stw	r8,0(sp)
1000adc8:	da000415 	stw	r8,16(sp)
1000adcc:	d8c00215 	stw	r3,8(sp)
1000add0:	d8c00515 	stw	r3,20(sp)
1000add4:	d8000615 	stw	zero,24(sp)
1000add8:	0009a100 	call	10009a10 <___vfiprintf_internal_r>
1000addc:	1023883a 	mov	r17,r2
1000ade0:	10000d0e 	bge	r2,zero,1000ae18 <__sbprintf+0xa8>
1000ade4:	d880030b 	ldhu	r2,12(sp)
1000ade8:	1080100c 	andi	r2,r2,64
1000adec:	10000326 	beq	r2,zero,1000adfc <__sbprintf+0x8c>
1000adf0:	8080030b 	ldhu	r2,12(r16)
1000adf4:	10801014 	ori	r2,r2,64
1000adf8:	8080030d 	sth	r2,12(r16)
1000adfc:	8805883a 	mov	r2,r17
1000ae00:	dfc11d17 	ldw	ra,1140(sp)
1000ae04:	dc811c17 	ldw	r18,1136(sp)
1000ae08:	dc411b17 	ldw	r17,1132(sp)
1000ae0c:	dc011a17 	ldw	r16,1128(sp)
1000ae10:	dec11e04 	addi	sp,sp,1144
1000ae14:	f800283a 	ret
1000ae18:	d80b883a 	mov	r5,sp
1000ae1c:	9009883a 	mov	r4,r18
1000ae20:	00063340 	call	10006334 <_fflush_r>
1000ae24:	103fef26 	beq	r2,zero,1000ade4 <__sbprintf+0x74>
1000ae28:	047fffc4 	movi	r17,-1
1000ae2c:	003fed06 	br	1000ade4 <__sbprintf+0x74>

1000ae30 <_write_r>:
1000ae30:	2807883a 	mov	r3,r5
1000ae34:	defffe04 	addi	sp,sp,-8
1000ae38:	dc000015 	stw	r16,0(sp)
1000ae3c:	300b883a 	mov	r5,r6
1000ae40:	00840074 	movhi	r2,4097
1000ae44:	380d883a 	mov	r6,r7
1000ae48:	2021883a 	mov	r16,r4
1000ae4c:	1809883a 	mov	r4,r3
1000ae50:	dfc00115 	stw	ra,4(sp)
1000ae54:	1018ba15 	stw	zero,25320(r2)
1000ae58:	000ff240 	call	1000ff24 <write>
1000ae5c:	10ffffd8 	cmpnei	r3,r2,-1
1000ae60:	18000426 	beq	r3,zero,1000ae74 <_write_r+0x44>
1000ae64:	dfc00117 	ldw	ra,4(sp)
1000ae68:	dc000017 	ldw	r16,0(sp)
1000ae6c:	dec00204 	addi	sp,sp,8
1000ae70:	f800283a 	ret
1000ae74:	00c40074 	movhi	r3,4097
1000ae78:	18d8ba17 	ldw	r3,25320(r3)
1000ae7c:	183ff926 	beq	r3,zero,1000ae64 <_write_r+0x34>
1000ae80:	80c00015 	stw	r3,0(r16)
1000ae84:	dfc00117 	ldw	ra,4(sp)
1000ae88:	dc000017 	ldw	r16,0(sp)
1000ae8c:	dec00204 	addi	sp,sp,8
1000ae90:	f800283a 	ret

1000ae94 <_close_r>:
1000ae94:	defffe04 	addi	sp,sp,-8
1000ae98:	dc000015 	stw	r16,0(sp)
1000ae9c:	00840074 	movhi	r2,4097
1000aea0:	2021883a 	mov	r16,r4
1000aea4:	2809883a 	mov	r4,r5
1000aea8:	dfc00115 	stw	ra,4(sp)
1000aeac:	1018ba15 	stw	zero,25320(r2)
1000aeb0:	000f4d40 	call	1000f4d4 <close>
1000aeb4:	10ffffd8 	cmpnei	r3,r2,-1
1000aeb8:	18000426 	beq	r3,zero,1000aecc <_close_r+0x38>
1000aebc:	dfc00117 	ldw	ra,4(sp)
1000aec0:	dc000017 	ldw	r16,0(sp)
1000aec4:	dec00204 	addi	sp,sp,8
1000aec8:	f800283a 	ret
1000aecc:	00c40074 	movhi	r3,4097
1000aed0:	18d8ba17 	ldw	r3,25320(r3)
1000aed4:	183ff926 	beq	r3,zero,1000aebc <_close_r+0x28>
1000aed8:	80c00015 	stw	r3,0(r16)
1000aedc:	dfc00117 	ldw	ra,4(sp)
1000aee0:	dc000017 	ldw	r16,0(sp)
1000aee4:	dec00204 	addi	sp,sp,8
1000aee8:	f800283a 	ret

1000aeec <__assert_func>:
1000aeec:	00840074 	movhi	r2,4097
1000aef0:	1211b317 	ldw	r8,18124(r2)
1000aef4:	defffc04 	addi	sp,sp,-16
1000aef8:	3807883a 	mov	r3,r7
1000aefc:	3005883a 	mov	r2,r6
1000af00:	dfc00315 	stw	ra,12(sp)
1000af04:	42400317 	ldw	r9,12(r8)
1000af08:	200f883a 	mov	r7,r4
1000af0c:	2811883a 	mov	r8,r5
1000af10:	180d883a 	mov	r6,r3
1000af14:	10000a26 	beq	r2,zero,1000af40 <__assert_func+0x54>
1000af18:	00c40074 	movhi	r3,4097
1000af1c:	18c9c804 	addi	r3,r3,10016
1000af20:	01440074 	movhi	r5,4097
1000af24:	2949cc04 	addi	r5,r5,10032
1000af28:	4809883a 	mov	r4,r9
1000af2c:	d8c00115 	stw	r3,4(sp)
1000af30:	da000015 	stw	r8,0(sp)
1000af34:	d8800215 	stw	r2,8(sp)
1000af38:	000b1e80 	call	1000b1e8 <fiprintf>
1000af3c:	000ba300 	call	1000ba30 <abort>
1000af40:	00c40074 	movhi	r3,4097
1000af44:	18c9cb04 	addi	r3,r3,10028
1000af48:	1805883a 	mov	r2,r3
1000af4c:	003ff406 	br	1000af20 <__assert_func+0x34>

1000af50 <__assert>:
1000af50:	deffff04 	addi	sp,sp,-4
1000af54:	300f883a 	mov	r7,r6
1000af58:	000d883a 	mov	r6,zero
1000af5c:	dfc00015 	stw	ra,0(sp)
1000af60:	000aeec0 	call	1000aeec <__assert_func>

1000af64 <_calloc_r>:
1000af64:	defffe04 	addi	sp,sp,-8
1000af68:	dc000015 	stw	r16,0(sp)
1000af6c:	2021883a 	mov	r16,r4
1000af70:	2809883a 	mov	r4,r5
1000af74:	300b883a 	mov	r5,r6
1000af78:	dfc00115 	stw	ra,4(sp)
1000af7c:	000cd300 	call	1000cd30 <__mulsi3>
1000af80:	8009883a 	mov	r4,r16
1000af84:	100b883a 	mov	r5,r2
1000af88:	000744c0 	call	1000744c <_malloc_r>
1000af8c:	1009883a 	mov	r4,r2
1000af90:	10000c26 	beq	r2,zero,1000afc4 <_calloc_r+0x60>
1000af94:	11bfff17 	ldw	r6,-4(r2)
1000af98:	00bfff04 	movi	r2,-4
1000af9c:	308c703a 	and	r6,r6,r2
1000afa0:	31bfff04 	addi	r6,r6,-4
1000afa4:	30800968 	cmpgeui	r2,r6,37
1000afa8:	1000151e 	bne	r2,zero,1000b000 <_calloc_r+0x9c>
1000afac:	30800530 	cmpltui	r2,r6,20
1000afb0:	10000926 	beq	r2,zero,1000afd8 <_calloc_r+0x74>
1000afb4:	2005883a 	mov	r2,r4
1000afb8:	10000015 	stw	zero,0(r2)
1000afbc:	10000115 	stw	zero,4(r2)
1000afc0:	10000215 	stw	zero,8(r2)
1000afc4:	2005883a 	mov	r2,r4
1000afc8:	dfc00117 	ldw	ra,4(sp)
1000afcc:	dc000017 	ldw	r16,0(sp)
1000afd0:	dec00204 	addi	sp,sp,8
1000afd4:	f800283a 	ret
1000afd8:	20000015 	stw	zero,0(r4)
1000afdc:	20000115 	stw	zero,4(r4)
1000afe0:	30800728 	cmpgeui	r2,r6,28
1000afe4:	10000a26 	beq	r2,zero,1000b010 <_calloc_r+0xac>
1000afe8:	20000215 	stw	zero,8(r4)
1000afec:	20000315 	stw	zero,12(r4)
1000aff0:	31800920 	cmpeqi	r6,r6,36
1000aff4:	3000081e 	bne	r6,zero,1000b018 <_calloc_r+0xb4>
1000aff8:	20800404 	addi	r2,r4,16
1000affc:	003fee06 	br	1000afb8 <_calloc_r+0x54>
1000b000:	000b883a 	mov	r5,zero
1000b004:	0007f280 	call	10007f28 <memset>
1000b008:	1009883a 	mov	r4,r2
1000b00c:	003fed06 	br	1000afc4 <_calloc_r+0x60>
1000b010:	20800204 	addi	r2,r4,8
1000b014:	003fe806 	br	1000afb8 <_calloc_r+0x54>
1000b018:	20000415 	stw	zero,16(r4)
1000b01c:	20800604 	addi	r2,r4,24
1000b020:	20000515 	stw	zero,20(r4)
1000b024:	003fe406 	br	1000afb8 <_calloc_r+0x54>

1000b028 <_fclose_r.part.0>:
1000b028:	defffc04 	addi	sp,sp,-16
1000b02c:	dc800215 	stw	r18,8(sp)
1000b030:	dc400115 	stw	r17,4(sp)
1000b034:	dc000015 	stw	r16,0(sp)
1000b038:	dfc00315 	stw	ra,12(sp)
1000b03c:	2821883a 	mov	r16,r5
1000b040:	2023883a 	mov	r17,r4
1000b044:	000610c0 	call	1000610c <__sflush_r>
1000b048:	80c00b17 	ldw	r3,44(r16)
1000b04c:	1025883a 	mov	r18,r2
1000b050:	18000426 	beq	r3,zero,1000b064 <_fclose_r.part.0+0x3c>
1000b054:	81400717 	ldw	r5,28(r16)
1000b058:	8809883a 	mov	r4,r17
1000b05c:	183ee83a 	callr	r3
1000b060:	10001916 	blt	r2,zero,1000b0c8 <_fclose_r.part.0+0xa0>
1000b064:	8080030b 	ldhu	r2,12(r16)
1000b068:	1080200c 	andi	r2,r2,128
1000b06c:	10001a1e 	bne	r2,zero,1000b0d8 <_fclose_r.part.0+0xb0>
1000b070:	81400c17 	ldw	r5,48(r16)
1000b074:	28000526 	beq	r5,zero,1000b08c <_fclose_r.part.0+0x64>
1000b078:	80801004 	addi	r2,r16,64
1000b07c:	28800226 	beq	r5,r2,1000b088 <_fclose_r.part.0+0x60>
1000b080:	8809883a 	mov	r4,r17
1000b084:	00068e00 	call	100068e0 <_free_r>
1000b088:	80000c15 	stw	zero,48(r16)
1000b08c:	81401117 	ldw	r5,68(r16)
1000b090:	28000326 	beq	r5,zero,1000b0a0 <_fclose_r.part.0+0x78>
1000b094:	8809883a 	mov	r4,r17
1000b098:	00068e00 	call	100068e0 <_free_r>
1000b09c:	80001115 	stw	zero,68(r16)
1000b0a0:	000678c0 	call	1000678c <__sfp_lock_acquire>
1000b0a4:	8000030d 	sth	zero,12(r16)
1000b0a8:	00067900 	call	10006790 <__sfp_lock_release>
1000b0ac:	9005883a 	mov	r2,r18
1000b0b0:	dfc00317 	ldw	ra,12(sp)
1000b0b4:	dc800217 	ldw	r18,8(sp)
1000b0b8:	dc400117 	ldw	r17,4(sp)
1000b0bc:	dc000017 	ldw	r16,0(sp)
1000b0c0:	dec00404 	addi	sp,sp,16
1000b0c4:	f800283a 	ret
1000b0c8:	8080030b 	ldhu	r2,12(r16)
1000b0cc:	04bfffc4 	movi	r18,-1
1000b0d0:	1080200c 	andi	r2,r2,128
1000b0d4:	103fe626 	beq	r2,zero,1000b070 <_fclose_r.part.0+0x48>
1000b0d8:	81400417 	ldw	r5,16(r16)
1000b0dc:	8809883a 	mov	r4,r17
1000b0e0:	00068e00 	call	100068e0 <_free_r>
1000b0e4:	003fe206 	br	1000b070 <_fclose_r.part.0+0x48>

1000b0e8 <_fclose_r>:
1000b0e8:	28001926 	beq	r5,zero,1000b150 <_fclose_r+0x68>
1000b0ec:	defffd04 	addi	sp,sp,-12
1000b0f0:	dc000115 	stw	r16,4(sp)
1000b0f4:	dfc00215 	stw	ra,8(sp)
1000b0f8:	2021883a 	mov	r16,r4
1000b0fc:	20000226 	beq	r4,zero,1000b108 <_fclose_r+0x20>
1000b100:	20800e17 	ldw	r2,56(r4)
1000b104:	10000c26 	beq	r2,zero,1000b138 <_fclose_r+0x50>
1000b108:	2880030f 	ldh	r2,12(r5)
1000b10c:	1000051e 	bne	r2,zero,1000b124 <_fclose_r+0x3c>
1000b110:	0005883a 	mov	r2,zero
1000b114:	dfc00217 	ldw	ra,8(sp)
1000b118:	dc000117 	ldw	r16,4(sp)
1000b11c:	dec00304 	addi	sp,sp,12
1000b120:	f800283a 	ret
1000b124:	8009883a 	mov	r4,r16
1000b128:	dfc00217 	ldw	ra,8(sp)
1000b12c:	dc000117 	ldw	r16,4(sp)
1000b130:	dec00304 	addi	sp,sp,12
1000b134:	000b0281 	jmpi	1000b028 <_fclose_r.part.0>
1000b138:	d9400015 	stw	r5,0(sp)
1000b13c:	000677c0 	call	1000677c <__sinit>
1000b140:	d9400017 	ldw	r5,0(sp)
1000b144:	2880030f 	ldh	r2,12(r5)
1000b148:	103ff126 	beq	r2,zero,1000b110 <_fclose_r+0x28>
1000b14c:	003ff506 	br	1000b124 <_fclose_r+0x3c>
1000b150:	0005883a 	mov	r2,zero
1000b154:	f800283a 	ret

1000b158 <fclose>:
1000b158:	20000826 	beq	r4,zero,1000b17c <fclose+0x24>
1000b15c:	00840074 	movhi	r2,4097
1000b160:	200b883a 	mov	r5,r4
1000b164:	1111b317 	ldw	r4,18124(r2)
1000b168:	20000226 	beq	r4,zero,1000b174 <fclose+0x1c>
1000b16c:	20800e17 	ldw	r2,56(r4)
1000b170:	10000526 	beq	r2,zero,1000b188 <fclose+0x30>
1000b174:	2880030f 	ldh	r2,12(r5)
1000b178:	1000021e 	bne	r2,zero,1000b184 <fclose+0x2c>
1000b17c:	0005883a 	mov	r2,zero
1000b180:	f800283a 	ret
1000b184:	000b0281 	jmpi	1000b028 <_fclose_r.part.0>
1000b188:	defffd04 	addi	sp,sp,-12
1000b18c:	d9400115 	stw	r5,4(sp)
1000b190:	d9000015 	stw	r4,0(sp)
1000b194:	dfc00215 	stw	ra,8(sp)
1000b198:	000677c0 	call	1000677c <__sinit>
1000b19c:	d9400117 	ldw	r5,4(sp)
1000b1a0:	d9000017 	ldw	r4,0(sp)
1000b1a4:	2880030f 	ldh	r2,12(r5)
1000b1a8:	10000326 	beq	r2,zero,1000b1b8 <fclose+0x60>
1000b1ac:	dfc00217 	ldw	ra,8(sp)
1000b1b0:	dec00304 	addi	sp,sp,12
1000b1b4:	000b0281 	jmpi	1000b028 <_fclose_r.part.0>
1000b1b8:	0005883a 	mov	r2,zero
1000b1bc:	dfc00217 	ldw	ra,8(sp)
1000b1c0:	dec00304 	addi	sp,sp,12
1000b1c4:	f800283a 	ret

1000b1c8 <_fiprintf_r>:
1000b1c8:	defffe04 	addi	sp,sp,-8
1000b1cc:	dfc00015 	stw	ra,0(sp)
1000b1d0:	d9c00115 	stw	r7,4(sp)
1000b1d4:	d9c00104 	addi	r7,sp,4
1000b1d8:	000b79c0 	call	1000b79c <_vfiprintf_r>
1000b1dc:	dfc00017 	ldw	ra,0(sp)
1000b1e0:	dec00204 	addi	sp,sp,8
1000b1e4:	f800283a 	ret

1000b1e8 <fiprintf>:
1000b1e8:	defffd04 	addi	sp,sp,-12
1000b1ec:	2005883a 	mov	r2,r4
1000b1f0:	dfc00015 	stw	ra,0(sp)
1000b1f4:	d9800115 	stw	r6,4(sp)
1000b1f8:	d9c00215 	stw	r7,8(sp)
1000b1fc:	00c40074 	movhi	r3,4097
1000b200:	1911b317 	ldw	r4,18124(r3)
1000b204:	280d883a 	mov	r6,r5
1000b208:	d9c00104 	addi	r7,sp,4
1000b20c:	100b883a 	mov	r5,r2
1000b210:	000b79c0 	call	1000b79c <_vfiprintf_r>
1000b214:	dfc00017 	ldw	ra,0(sp)
1000b218:	dec00304 	addi	sp,sp,12
1000b21c:	f800283a 	ret

1000b220 <__fputwc>:
1000b220:	defff904 	addi	sp,sp,-28
1000b224:	dcc00415 	stw	r19,16(sp)
1000b228:	dc800315 	stw	r18,12(sp)
1000b22c:	dc000115 	stw	r16,4(sp)
1000b230:	dfc00615 	stw	ra,24(sp)
1000b234:	dd000515 	stw	r20,20(sp)
1000b238:	dc400215 	stw	r17,8(sp)
1000b23c:	2025883a 	mov	r18,r4
1000b240:	2827883a 	mov	r19,r5
1000b244:	3021883a 	mov	r16,r6
1000b248:	000b54c0 	call	1000b54c <__locale_mb_cur_max>
1000b24c:	10800058 	cmpnei	r2,r2,1
1000b250:	1000071e 	bne	r2,zero,1000b270 <__fputwc+0x50>
1000b254:	98bfffc4 	addi	r2,r19,-1
1000b258:	10803fe8 	cmpgeui	r2,r2,255
1000b25c:	1000041e 	bne	r2,zero,1000b270 <__fputwc+0x50>
1000b260:	980b883a 	mov	r5,r19
1000b264:	dcc000c5 	stb	r19,3(sp)
1000b268:	05000044 	movi	r20,1
1000b26c:	00000a06 	br	1000b298 <__fputwc+0x78>
1000b270:	81c01704 	addi	r7,r16,92
1000b274:	980d883a 	mov	r6,r19
1000b278:	d94000c4 	addi	r5,sp,3
1000b27c:	9009883a 	mov	r4,r18
1000b280:	000b9000 	call	1000b900 <_wcrtomb_r>
1000b284:	1029883a 	mov	r20,r2
1000b288:	10bfffd8 	cmpnei	r2,r2,-1
1000b28c:	10003926 	beq	r2,zero,1000b374 <__fputwc+0x154>
1000b290:	a0001f26 	beq	r20,zero,1000b310 <__fputwc+0xf0>
1000b294:	d94000c3 	ldbu	r5,3(sp)
1000b298:	0023883a 	mov	r17,zero
1000b29c:	00000a06 	br	1000b2c8 <__fputwc+0xa8>
1000b2a0:	80800017 	ldw	r2,0(r16)
1000b2a4:	11400005 	stb	r5,0(r2)
1000b2a8:	80c00017 	ldw	r3,0(r16)
1000b2ac:	18c00044 	addi	r3,r3,1
1000b2b0:	80c00015 	stw	r3,0(r16)
1000b2b4:	8c400044 	addi	r17,r17,1
1000b2b8:	d88000c4 	addi	r2,sp,3
1000b2bc:	1447883a 	add	r3,r2,r17
1000b2c0:	8d00132e 	bgeu	r17,r20,1000b310 <__fputwc+0xf0>
1000b2c4:	19400003 	ldbu	r5,0(r3)
1000b2c8:	80c00217 	ldw	r3,8(r16)
1000b2cc:	18ffffc4 	addi	r3,r3,-1
1000b2d0:	80c00215 	stw	r3,8(r16)
1000b2d4:	183ff20e 	bge	r3,zero,1000b2a0 <__fputwc+0x80>
1000b2d8:	80800617 	ldw	r2,24(r16)
1000b2dc:	18801616 	blt	r3,r2,1000b338 <__fputwc+0x118>
1000b2e0:	80800017 	ldw	r2,0(r16)
1000b2e4:	11400005 	stb	r5,0(r2)
1000b2e8:	80800017 	ldw	r2,0(r16)
1000b2ec:	10c00003 	ldbu	r3,0(r2)
1000b2f0:	10800044 	addi	r2,r2,1
1000b2f4:	18c002a0 	cmpeqi	r3,r3,10
1000b2f8:	1800171e 	bne	r3,zero,1000b358 <__fputwc+0x138>
1000b2fc:	80800015 	stw	r2,0(r16)
1000b300:	8c400044 	addi	r17,r17,1
1000b304:	d88000c4 	addi	r2,sp,3
1000b308:	1447883a 	add	r3,r2,r17
1000b30c:	8d3fed36 	bltu	r17,r20,1000b2c4 <__fputwc+0xa4>
1000b310:	9829883a 	mov	r20,r19
1000b314:	a005883a 	mov	r2,r20
1000b318:	dfc00617 	ldw	ra,24(sp)
1000b31c:	dd000517 	ldw	r20,20(sp)
1000b320:	dcc00417 	ldw	r19,16(sp)
1000b324:	dc800317 	ldw	r18,12(sp)
1000b328:	dc400217 	ldw	r17,8(sp)
1000b32c:	dc000117 	ldw	r16,4(sp)
1000b330:	dec00704 	addi	sp,sp,28
1000b334:	f800283a 	ret
1000b338:	29403fcc 	andi	r5,r5,255
1000b33c:	800d883a 	mov	r6,r16
1000b340:	9009883a 	mov	r4,r18
1000b344:	000b7a00 	call	1000b7a0 <__swbuf_r>
1000b348:	10bfffe0 	cmpeqi	r2,r2,-1
1000b34c:	103fd926 	beq	r2,zero,1000b2b4 <__fputwc+0x94>
1000b350:	053fffc4 	movi	r20,-1
1000b354:	003fef06 	br	1000b314 <__fputwc+0xf4>
1000b358:	800d883a 	mov	r6,r16
1000b35c:	01400284 	movi	r5,10
1000b360:	9009883a 	mov	r4,r18
1000b364:	000b7a00 	call	1000b7a0 <__swbuf_r>
1000b368:	10bfffe0 	cmpeqi	r2,r2,-1
1000b36c:	103fd126 	beq	r2,zero,1000b2b4 <__fputwc+0x94>
1000b370:	003ff706 	br	1000b350 <__fputwc+0x130>
1000b374:	8080030b 	ldhu	r2,12(r16)
1000b378:	10801014 	ori	r2,r2,64
1000b37c:	8080030d 	sth	r2,12(r16)
1000b380:	003fe406 	br	1000b314 <__fputwc+0xf4>

1000b384 <_fputwc_r>:
1000b384:	3080030b 	ldhu	r2,12(r6)
1000b388:	10c8000c 	andi	r3,r2,8192
1000b38c:	1800051e 	bne	r3,zero,1000b3a4 <_fputwc_r+0x20>
1000b390:	30c01917 	ldw	r3,100(r6)
1000b394:	10880014 	ori	r2,r2,8192
1000b398:	3080030d 	sth	r2,12(r6)
1000b39c:	18880014 	ori	r2,r3,8192
1000b3a0:	30801915 	stw	r2,100(r6)
1000b3a4:	000b2201 	jmpi	1000b220 <__fputwc>

1000b3a8 <fputwc>:
1000b3a8:	defffc04 	addi	sp,sp,-16
1000b3ac:	00840074 	movhi	r2,4097
1000b3b0:	dc000215 	stw	r16,8(sp)
1000b3b4:	1411b317 	ldw	r16,18124(r2)
1000b3b8:	dfc00315 	stw	ra,12(sp)
1000b3bc:	280d883a 	mov	r6,r5
1000b3c0:	200b883a 	mov	r5,r4
1000b3c4:	80000226 	beq	r16,zero,1000b3d0 <fputwc+0x28>
1000b3c8:	80800e17 	ldw	r2,56(r16)
1000b3cc:	10000d26 	beq	r2,zero,1000b404 <fputwc+0x5c>
1000b3d0:	3080030b 	ldhu	r2,12(r6)
1000b3d4:	10c8000c 	andi	r3,r2,8192
1000b3d8:	1800051e 	bne	r3,zero,1000b3f0 <fputwc+0x48>
1000b3dc:	30c01917 	ldw	r3,100(r6)
1000b3e0:	10880014 	ori	r2,r2,8192
1000b3e4:	3080030d 	sth	r2,12(r6)
1000b3e8:	18880014 	ori	r2,r3,8192
1000b3ec:	30801915 	stw	r2,100(r6)
1000b3f0:	8009883a 	mov	r4,r16
1000b3f4:	dfc00317 	ldw	ra,12(sp)
1000b3f8:	dc000217 	ldw	r16,8(sp)
1000b3fc:	dec00404 	addi	sp,sp,16
1000b400:	000b2201 	jmpi	1000b220 <__fputwc>
1000b404:	d9000015 	stw	r4,0(sp)
1000b408:	8009883a 	mov	r4,r16
1000b40c:	d9800115 	stw	r6,4(sp)
1000b410:	000677c0 	call	1000677c <__sinit>
1000b414:	d9800117 	ldw	r6,4(sp)
1000b418:	d9400017 	ldw	r5,0(sp)
1000b41c:	003fec06 	br	1000b3d0 <fputwc+0x28>

1000b420 <_fstat_r>:
1000b420:	2807883a 	mov	r3,r5
1000b424:	defffe04 	addi	sp,sp,-8
1000b428:	dc000015 	stw	r16,0(sp)
1000b42c:	00840074 	movhi	r2,4097
1000b430:	300b883a 	mov	r5,r6
1000b434:	2021883a 	mov	r16,r4
1000b438:	1809883a 	mov	r4,r3
1000b43c:	dfc00115 	stw	ra,4(sp)
1000b440:	1018ba15 	stw	zero,25320(r2)
1000b444:	000f6500 	call	1000f650 <fstat>
1000b448:	10ffffd8 	cmpnei	r3,r2,-1
1000b44c:	18000426 	beq	r3,zero,1000b460 <_fstat_r+0x40>
1000b450:	dfc00117 	ldw	ra,4(sp)
1000b454:	dc000017 	ldw	r16,0(sp)
1000b458:	dec00204 	addi	sp,sp,8
1000b45c:	f800283a 	ret
1000b460:	00c40074 	movhi	r3,4097
1000b464:	18d8ba17 	ldw	r3,25320(r3)
1000b468:	183ff926 	beq	r3,zero,1000b450 <_fstat_r+0x30>
1000b46c:	80c00015 	stw	r3,0(r16)
1000b470:	dfc00117 	ldw	ra,4(sp)
1000b474:	dc000017 	ldw	r16,0(sp)
1000b478:	dec00204 	addi	sp,sp,8
1000b47c:	f800283a 	ret

1000b480 <_isatty_r>:
1000b480:	defffe04 	addi	sp,sp,-8
1000b484:	dc000015 	stw	r16,0(sp)
1000b488:	00840074 	movhi	r2,4097
1000b48c:	2021883a 	mov	r16,r4
1000b490:	2809883a 	mov	r4,r5
1000b494:	dfc00115 	stw	ra,4(sp)
1000b498:	1018ba15 	stw	zero,25320(r2)
1000b49c:	000f7680 	call	1000f768 <isatty>
1000b4a0:	10ffffd8 	cmpnei	r3,r2,-1
1000b4a4:	18000426 	beq	r3,zero,1000b4b8 <_isatty_r+0x38>
1000b4a8:	dfc00117 	ldw	ra,4(sp)
1000b4ac:	dc000017 	ldw	r16,0(sp)
1000b4b0:	dec00204 	addi	sp,sp,8
1000b4b4:	f800283a 	ret
1000b4b8:	00c40074 	movhi	r3,4097
1000b4bc:	18d8ba17 	ldw	r3,25320(r3)
1000b4c0:	183ff926 	beq	r3,zero,1000b4a8 <_isatty_r+0x28>
1000b4c4:	80c00015 	stw	r3,0(r16)
1000b4c8:	dfc00117 	ldw	ra,4(sp)
1000b4cc:	dc000017 	ldw	r16,0(sp)
1000b4d0:	dec00204 	addi	sp,sp,8
1000b4d4:	f800283a 	ret

1000b4d8 <_setlocale_r>:
1000b4d8:	30001626 	beq	r6,zero,1000b534 <_setlocale_r+0x5c>
1000b4dc:	01440074 	movhi	r5,4097
1000b4e0:	defffe04 	addi	sp,sp,-8
1000b4e4:	2949d904 	addi	r5,r5,10084
1000b4e8:	3009883a 	mov	r4,r6
1000b4ec:	dc000015 	stw	r16,0(sp)
1000b4f0:	dfc00115 	stw	ra,4(sp)
1000b4f4:	3021883a 	mov	r16,r6
1000b4f8:	000b6e40 	call	1000b6e4 <strcmp>
1000b4fc:	1000061e 	bne	r2,zero,1000b518 <_setlocale_r+0x40>
1000b500:	00840074 	movhi	r2,4097
1000b504:	1089d804 	addi	r2,r2,10080
1000b508:	dfc00117 	ldw	ra,4(sp)
1000b50c:	dc000017 	ldw	r16,0(sp)
1000b510:	dec00204 	addi	sp,sp,8
1000b514:	f800283a 	ret
1000b518:	80800003 	ldbu	r2,0(r16)
1000b51c:	10bfef44 	addi	r2,r2,-67
1000b520:	10000726 	beq	r2,zero,1000b540 <_setlocale_r+0x68>
1000b524:	80800003 	ldbu	r2,0(r16)
1000b528:	103ff526 	beq	r2,zero,1000b500 <_setlocale_r+0x28>
1000b52c:	0005883a 	mov	r2,zero
1000b530:	003ff506 	br	1000b508 <_setlocale_r+0x30>
1000b534:	00840074 	movhi	r2,4097
1000b538:	1089d804 	addi	r2,r2,10080
1000b53c:	f800283a 	ret
1000b540:	80800043 	ldbu	r2,1(r16)
1000b544:	103fee26 	beq	r2,zero,1000b500 <_setlocale_r+0x28>
1000b548:	003ff606 	br	1000b524 <_setlocale_r+0x4c>

1000b54c <__locale_mb_cur_max>:
1000b54c:	00840074 	movhi	r2,4097
1000b550:	108d1f07 	ldb	r2,13436(r2)
1000b554:	f800283a 	ret

1000b558 <setlocale>:
1000b558:	28001626 	beq	r5,zero,1000b5b4 <setlocale+0x5c>
1000b55c:	defffe04 	addi	sp,sp,-8
1000b560:	dc000015 	stw	r16,0(sp)
1000b564:	2821883a 	mov	r16,r5
1000b568:	01440074 	movhi	r5,4097
1000b56c:	2949d904 	addi	r5,r5,10084
1000b570:	8009883a 	mov	r4,r16
1000b574:	dfc00115 	stw	ra,4(sp)
1000b578:	000b6e40 	call	1000b6e4 <strcmp>
1000b57c:	1000061e 	bne	r2,zero,1000b598 <setlocale+0x40>
1000b580:	00840074 	movhi	r2,4097
1000b584:	1089d804 	addi	r2,r2,10080
1000b588:	dfc00117 	ldw	ra,4(sp)
1000b58c:	dc000017 	ldw	r16,0(sp)
1000b590:	dec00204 	addi	sp,sp,8
1000b594:	f800283a 	ret
1000b598:	80800003 	ldbu	r2,0(r16)
1000b59c:	10bfef44 	addi	r2,r2,-67
1000b5a0:	10000726 	beq	r2,zero,1000b5c0 <setlocale+0x68>
1000b5a4:	80800003 	ldbu	r2,0(r16)
1000b5a8:	103ff526 	beq	r2,zero,1000b580 <setlocale+0x28>
1000b5ac:	0005883a 	mov	r2,zero
1000b5b0:	003ff506 	br	1000b588 <setlocale+0x30>
1000b5b4:	00840074 	movhi	r2,4097
1000b5b8:	1089d804 	addi	r2,r2,10080
1000b5bc:	f800283a 	ret
1000b5c0:	80800043 	ldbu	r2,1(r16)
1000b5c4:	103fee26 	beq	r2,zero,1000b580 <setlocale+0x28>
1000b5c8:	003ff606 	br	1000b5a4 <setlocale+0x4c>

1000b5cc <_lseek_r>:
1000b5cc:	2807883a 	mov	r3,r5
1000b5d0:	defffe04 	addi	sp,sp,-8
1000b5d4:	dc000015 	stw	r16,0(sp)
1000b5d8:	300b883a 	mov	r5,r6
1000b5dc:	00840074 	movhi	r2,4097
1000b5e0:	380d883a 	mov	r6,r7
1000b5e4:	2021883a 	mov	r16,r4
1000b5e8:	1809883a 	mov	r4,r3
1000b5ec:	dfc00115 	stw	ra,4(sp)
1000b5f0:	1018ba15 	stw	zero,25320(r2)
1000b5f4:	000faa80 	call	1000faa8 <lseek>
1000b5f8:	10ffffd8 	cmpnei	r3,r2,-1
1000b5fc:	18000426 	beq	r3,zero,1000b610 <_lseek_r+0x44>
1000b600:	dfc00117 	ldw	ra,4(sp)
1000b604:	dc000017 	ldw	r16,0(sp)
1000b608:	dec00204 	addi	sp,sp,8
1000b60c:	f800283a 	ret
1000b610:	00c40074 	movhi	r3,4097
1000b614:	18d8ba17 	ldw	r3,25320(r3)
1000b618:	183ff926 	beq	r3,zero,1000b600 <_lseek_r+0x34>
1000b61c:	80c00015 	stw	r3,0(r16)
1000b620:	dfc00117 	ldw	ra,4(sp)
1000b624:	dc000017 	ldw	r16,0(sp)
1000b628:	dec00204 	addi	sp,sp,8
1000b62c:	f800283a 	ret

1000b630 <_mbtowc_r>:
1000b630:	00840074 	movhi	r2,4097
1000b634:	108d0e17 	ldw	r2,13368(r2)
1000b638:	1000683a 	jmp	r2

1000b63c <__ascii_mbtowc>:
1000b63c:	deffff04 	addi	sp,sp,-4
1000b640:	28000826 	beq	r5,zero,1000b664 <__ascii_mbtowc+0x28>
1000b644:	30000926 	beq	r6,zero,1000b66c <__ascii_mbtowc+0x30>
1000b648:	38000b26 	beq	r7,zero,1000b678 <__ascii_mbtowc+0x3c>
1000b64c:	30800003 	ldbu	r2,0(r6)
1000b650:	28800015 	stw	r2,0(r5)
1000b654:	30800003 	ldbu	r2,0(r6)
1000b658:	1004c03a 	cmpne	r2,r2,zero
1000b65c:	dec00104 	addi	sp,sp,4
1000b660:	f800283a 	ret
1000b664:	d80b883a 	mov	r5,sp
1000b668:	303ff71e 	bne	r6,zero,1000b648 <__ascii_mbtowc+0xc>
1000b66c:	0005883a 	mov	r2,zero
1000b670:	dec00104 	addi	sp,sp,4
1000b674:	f800283a 	ret
1000b678:	00bfff84 	movi	r2,-2
1000b67c:	003ff706 	br	1000b65c <__ascii_mbtowc+0x20>

1000b680 <_read_r>:
1000b680:	2807883a 	mov	r3,r5
1000b684:	defffe04 	addi	sp,sp,-8
1000b688:	dc000015 	stw	r16,0(sp)
1000b68c:	300b883a 	mov	r5,r6
1000b690:	00840074 	movhi	r2,4097
1000b694:	380d883a 	mov	r6,r7
1000b698:	2021883a 	mov	r16,r4
1000b69c:	1809883a 	mov	r4,r3
1000b6a0:	dfc00115 	stw	ra,4(sp)
1000b6a4:	1018ba15 	stw	zero,25320(r2)
1000b6a8:	000fc880 	call	1000fc88 <read>
1000b6ac:	10ffffd8 	cmpnei	r3,r2,-1
1000b6b0:	18000426 	beq	r3,zero,1000b6c4 <_read_r+0x44>
1000b6b4:	dfc00117 	ldw	ra,4(sp)
1000b6b8:	dc000017 	ldw	r16,0(sp)
1000b6bc:	dec00204 	addi	sp,sp,8
1000b6c0:	f800283a 	ret
1000b6c4:	00c40074 	movhi	r3,4097
1000b6c8:	18d8ba17 	ldw	r3,25320(r3)
1000b6cc:	183ff926 	beq	r3,zero,1000b6b4 <_read_r+0x34>
1000b6d0:	80c00015 	stw	r3,0(r16)
1000b6d4:	dfc00117 	ldw	ra,4(sp)
1000b6d8:	dc000017 	ldw	r16,0(sp)
1000b6dc:	dec00204 	addi	sp,sp,8
1000b6e0:	f800283a 	ret

1000b6e4 <strcmp>:
1000b6e4:	2144b03a 	or	r2,r4,r5
1000b6e8:	108000cc 	andi	r2,r2,3
1000b6ec:	1000141e 	bne	r2,zero,1000b740 <strcmp+0x5c>
1000b6f0:	20800017 	ldw	r2,0(r4)
1000b6f4:	28c00017 	ldw	r3,0(r5)
1000b6f8:	10c0111e 	bne	r2,r3,1000b740 <strcmp+0x5c>
1000b6fc:	01ffbff4 	movhi	r7,65279
1000b700:	01a02074 	movhi	r6,32897
1000b704:	39ffbfc4 	addi	r7,r7,-257
1000b708:	31a02004 	addi	r6,r6,-32640
1000b70c:	00000306 	br	1000b71c <strcmp+0x38>
1000b710:	20800017 	ldw	r2,0(r4)
1000b714:	28c00017 	ldw	r3,0(r5)
1000b718:	10c0091e 	bne	r2,r3,1000b740 <strcmp+0x5c>
1000b71c:	11c7883a 	add	r3,r2,r7
1000b720:	0084303a 	nor	r2,zero,r2
1000b724:	1884703a 	and	r2,r3,r2
1000b728:	1184703a 	and	r2,r2,r6
1000b72c:	21000104 	addi	r4,r4,4
1000b730:	29400104 	addi	r5,r5,4
1000b734:	103ff626 	beq	r2,zero,1000b710 <strcmp+0x2c>
1000b738:	0005883a 	mov	r2,zero
1000b73c:	f800283a 	ret
1000b740:	20c00003 	ldbu	r3,0(r4)
1000b744:	18803fcc 	andi	r2,r3,255
1000b748:	1080201c 	xori	r2,r2,128
1000b74c:	10bfe004 	addi	r2,r2,-128
1000b750:	1000071e 	bne	r2,zero,1000b770 <strcmp+0x8c>
1000b754:	00000a06 	br	1000b780 <strcmp+0x9c>
1000b758:	20c00003 	ldbu	r3,0(r4)
1000b75c:	29400044 	addi	r5,r5,1
1000b760:	18803fcc 	andi	r2,r3,255
1000b764:	1080201c 	xori	r2,r2,128
1000b768:	10bfe004 	addi	r2,r2,-128
1000b76c:	10000726 	beq	r2,zero,1000b78c <strcmp+0xa8>
1000b770:	29800007 	ldb	r6,0(r5)
1000b774:	21000044 	addi	r4,r4,1
1000b778:	30bff726 	beq	r6,r2,1000b758 <strcmp+0x74>
1000b77c:	18803fcc 	andi	r2,r3,255
1000b780:	28c00003 	ldbu	r3,0(r5)
1000b784:	10c5c83a 	sub	r2,r2,r3
1000b788:	f800283a 	ret
1000b78c:	28c00003 	ldbu	r3,0(r5)
1000b790:	0005883a 	mov	r2,zero
1000b794:	10c5c83a 	sub	r2,r2,r3
1000b798:	f800283a 	ret

1000b79c <_vfiprintf_r>:
1000b79c:	0009a101 	jmpi	10009a10 <___vfiprintf_internal_r>

1000b7a0 <__swbuf_r>:
1000b7a0:	defffb04 	addi	sp,sp,-20
1000b7a4:	dcc00315 	stw	r19,12(sp)
1000b7a8:	dc400115 	stw	r17,4(sp)
1000b7ac:	dc000015 	stw	r16,0(sp)
1000b7b0:	dfc00415 	stw	ra,16(sp)
1000b7b4:	dc800215 	stw	r18,8(sp)
1000b7b8:	2027883a 	mov	r19,r4
1000b7bc:	2823883a 	mov	r17,r5
1000b7c0:	3021883a 	mov	r16,r6
1000b7c4:	20000226 	beq	r4,zero,1000b7d0 <__swbuf_r+0x30>
1000b7c8:	20800e17 	ldw	r2,56(r4)
1000b7cc:	10003e26 	beq	r2,zero,1000b8c8 <__swbuf_r+0x128>
1000b7d0:	80800617 	ldw	r2,24(r16)
1000b7d4:	80c0030b 	ldhu	r3,12(r16)
1000b7d8:	80800215 	stw	r2,8(r16)
1000b7dc:	1880020c 	andi	r2,r3,8
1000b7e0:	10001f26 	beq	r2,zero,1000b860 <__swbuf_r+0xc0>
1000b7e4:	80800417 	ldw	r2,16(r16)
1000b7e8:	10001d26 	beq	r2,zero,1000b860 <__swbuf_r+0xc0>
1000b7ec:	1948000c 	andi	r5,r3,8192
1000b7f0:	8c803fcc 	andi	r18,r17,255
1000b7f4:	28002326 	beq	r5,zero,1000b884 <__swbuf_r+0xe4>
1000b7f8:	80c00017 	ldw	r3,0(r16)
1000b7fc:	81000517 	ldw	r4,20(r16)
1000b800:	1885c83a 	sub	r2,r3,r2
1000b804:	1100290e 	bge	r2,r4,1000b8ac <__swbuf_r+0x10c>
1000b808:	10800044 	addi	r2,r2,1
1000b80c:	81400217 	ldw	r5,8(r16)
1000b810:	19000044 	addi	r4,r3,1
1000b814:	81000015 	stw	r4,0(r16)
1000b818:	297fffc4 	addi	r5,r5,-1
1000b81c:	81400215 	stw	r5,8(r16)
1000b820:	1c400005 	stb	r17,0(r3)
1000b824:	80c00517 	ldw	r3,20(r16)
1000b828:	18802926 	beq	r3,r2,1000b8d0 <__swbuf_r+0x130>
1000b82c:	8080030b 	ldhu	r2,12(r16)
1000b830:	1080004c 	andi	r2,r2,1
1000b834:	10000226 	beq	r2,zero,1000b840 <__swbuf_r+0xa0>
1000b838:	90800298 	cmpnei	r2,r18,10
1000b83c:	10002426 	beq	r2,zero,1000b8d0 <__swbuf_r+0x130>
1000b840:	9005883a 	mov	r2,r18
1000b844:	dfc00417 	ldw	ra,16(sp)
1000b848:	dcc00317 	ldw	r19,12(sp)
1000b84c:	dc800217 	ldw	r18,8(sp)
1000b850:	dc400117 	ldw	r17,4(sp)
1000b854:	dc000017 	ldw	r16,0(sp)
1000b858:	dec00504 	addi	sp,sp,20
1000b85c:	f800283a 	ret
1000b860:	800b883a 	mov	r5,r16
1000b864:	9809883a 	mov	r4,r19
1000b868:	00046400 	call	10004640 <__swsetup_r>
1000b86c:	10001c1e 	bne	r2,zero,1000b8e0 <__swbuf_r+0x140>
1000b870:	80c0030b 	ldhu	r3,12(r16)
1000b874:	80800417 	ldw	r2,16(r16)
1000b878:	8c803fcc 	andi	r18,r17,255
1000b87c:	1948000c 	andi	r5,r3,8192
1000b880:	283fdd1e 	bne	r5,zero,1000b7f8 <__swbuf_r+0x58>
1000b884:	81001917 	ldw	r4,100(r16)
1000b888:	18c80014 	ori	r3,r3,8192
1000b88c:	0177ffc4 	movi	r5,-8193
1000b890:	2148703a 	and	r4,r4,r5
1000b894:	80c0030d 	sth	r3,12(r16)
1000b898:	80c00017 	ldw	r3,0(r16)
1000b89c:	81001915 	stw	r4,100(r16)
1000b8a0:	81000517 	ldw	r4,20(r16)
1000b8a4:	1885c83a 	sub	r2,r3,r2
1000b8a8:	113fd716 	blt	r2,r4,1000b808 <__swbuf_r+0x68>
1000b8ac:	800b883a 	mov	r5,r16
1000b8b0:	9809883a 	mov	r4,r19
1000b8b4:	00063340 	call	10006334 <_fflush_r>
1000b8b8:	1000091e 	bne	r2,zero,1000b8e0 <__swbuf_r+0x140>
1000b8bc:	80c00017 	ldw	r3,0(r16)
1000b8c0:	00800044 	movi	r2,1
1000b8c4:	003fd106 	br	1000b80c <__swbuf_r+0x6c>
1000b8c8:	000677c0 	call	1000677c <__sinit>
1000b8cc:	003fc006 	br	1000b7d0 <__swbuf_r+0x30>
1000b8d0:	800b883a 	mov	r5,r16
1000b8d4:	9809883a 	mov	r4,r19
1000b8d8:	00063340 	call	10006334 <_fflush_r>
1000b8dc:	103fd826 	beq	r2,zero,1000b840 <__swbuf_r+0xa0>
1000b8e0:	04bfffc4 	movi	r18,-1
1000b8e4:	003fd606 	br	1000b840 <__swbuf_r+0xa0>

1000b8e8 <__swbuf>:
1000b8e8:	00c40074 	movhi	r3,4097
1000b8ec:	2005883a 	mov	r2,r4
1000b8f0:	1911b317 	ldw	r4,18124(r3)
1000b8f4:	280d883a 	mov	r6,r5
1000b8f8:	100b883a 	mov	r5,r2
1000b8fc:	000b7a01 	jmpi	1000b7a0 <__swbuf_r>

1000b900 <_wcrtomb_r>:
1000b900:	defffa04 	addi	sp,sp,-24
1000b904:	dc400415 	stw	r17,16(sp)
1000b908:	dc000315 	stw	r16,12(sp)
1000b90c:	00840074 	movhi	r2,4097
1000b910:	dfc00515 	stw	ra,20(sp)
1000b914:	108d0d17 	ldw	r2,13364(r2)
1000b918:	2023883a 	mov	r17,r4
1000b91c:	3821883a 	mov	r16,r7
1000b920:	28000826 	beq	r5,zero,1000b944 <_wcrtomb_r+0x44>
1000b924:	103ee83a 	callr	r2
1000b928:	10ffffd8 	cmpnei	r3,r2,-1
1000b92c:	18000a26 	beq	r3,zero,1000b958 <_wcrtomb_r+0x58>
1000b930:	dfc00517 	ldw	ra,20(sp)
1000b934:	dc400417 	ldw	r17,16(sp)
1000b938:	dc000317 	ldw	r16,12(sp)
1000b93c:	dec00604 	addi	sp,sp,24
1000b940:	f800283a 	ret
1000b944:	000d883a 	mov	r6,zero
1000b948:	d9400084 	addi	r5,sp,2
1000b94c:	103ee83a 	callr	r2
1000b950:	10ffffd8 	cmpnei	r3,r2,-1
1000b954:	183ff61e 	bne	r3,zero,1000b930 <_wcrtomb_r+0x30>
1000b958:	00802284 	movi	r2,138
1000b95c:	80000015 	stw	zero,0(r16)
1000b960:	88800015 	stw	r2,0(r17)
1000b964:	00bfffc4 	movi	r2,-1
1000b968:	003ff106 	br	1000b930 <_wcrtomb_r+0x30>

1000b96c <wcrtomb>:
1000b96c:	defffa04 	addi	sp,sp,-24
1000b970:	00c40074 	movhi	r3,4097
1000b974:	dc400415 	stw	r17,16(sp)
1000b978:	dc000315 	stw	r16,12(sp)
1000b97c:	1c51b317 	ldw	r17,18124(r3)
1000b980:	dfc00515 	stw	ra,20(sp)
1000b984:	00c40074 	movhi	r3,4097
1000b988:	18cd0d17 	ldw	r3,13364(r3)
1000b98c:	3021883a 	mov	r16,r6
1000b990:	20000c26 	beq	r4,zero,1000b9c4 <wcrtomb+0x58>
1000b994:	280d883a 	mov	r6,r5
1000b998:	800f883a 	mov	r7,r16
1000b99c:	200b883a 	mov	r5,r4
1000b9a0:	8809883a 	mov	r4,r17
1000b9a4:	183ee83a 	callr	r3
1000b9a8:	10ffffd8 	cmpnei	r3,r2,-1
1000b9ac:	18000c26 	beq	r3,zero,1000b9e0 <wcrtomb+0x74>
1000b9b0:	dfc00517 	ldw	ra,20(sp)
1000b9b4:	dc400417 	ldw	r17,16(sp)
1000b9b8:	dc000317 	ldw	r16,12(sp)
1000b9bc:	dec00604 	addi	sp,sp,24
1000b9c0:	f800283a 	ret
1000b9c4:	300f883a 	mov	r7,r6
1000b9c8:	d9400084 	addi	r5,sp,2
1000b9cc:	000d883a 	mov	r6,zero
1000b9d0:	8809883a 	mov	r4,r17
1000b9d4:	183ee83a 	callr	r3
1000b9d8:	10ffffd8 	cmpnei	r3,r2,-1
1000b9dc:	183ff41e 	bne	r3,zero,1000b9b0 <wcrtomb+0x44>
1000b9e0:	00802284 	movi	r2,138
1000b9e4:	80000015 	stw	zero,0(r16)
1000b9e8:	88800015 	stw	r2,0(r17)
1000b9ec:	00bfffc4 	movi	r2,-1
1000b9f0:	003fef06 	br	1000b9b0 <wcrtomb+0x44>

1000b9f4 <_wctomb_r>:
1000b9f4:	00840074 	movhi	r2,4097
1000b9f8:	108d0d17 	ldw	r2,13364(r2)
1000b9fc:	1000683a 	jmp	r2

1000ba00 <__ascii_wctomb>:
1000ba00:	28000926 	beq	r5,zero,1000ba28 <__ascii_wctomb+0x28>
1000ba04:	30804030 	cmpltui	r2,r6,256
1000ba08:	10000326 	beq	r2,zero,1000ba18 <__ascii_wctomb+0x18>
1000ba0c:	29800005 	stb	r6,0(r5)
1000ba10:	00800044 	movi	r2,1
1000ba14:	f800283a 	ret
1000ba18:	00802284 	movi	r2,138
1000ba1c:	20800015 	stw	r2,0(r4)
1000ba20:	00bfffc4 	movi	r2,-1
1000ba24:	f800283a 	ret
1000ba28:	0005883a 	mov	r2,zero
1000ba2c:	f800283a 	ret

1000ba30 <abort>:
1000ba30:	deffff04 	addi	sp,sp,-4
1000ba34:	01000184 	movi	r4,6
1000ba38:	dfc00015 	stw	ra,0(sp)
1000ba3c:	000bcbc0 	call	1000bcbc <raise>
1000ba40:	01000044 	movi	r4,1
1000ba44:	000f5dc0 	call	1000f5dc <_exit>

1000ba48 <_init_signal_r>:
1000ba48:	2080b717 	ldw	r2,732(r4)
1000ba4c:	10000226 	beq	r2,zero,1000ba58 <_init_signal_r+0x10>
1000ba50:	0005883a 	mov	r2,zero
1000ba54:	f800283a 	ret
1000ba58:	defffe04 	addi	sp,sp,-8
1000ba5c:	01402004 	movi	r5,128
1000ba60:	dc000015 	stw	r16,0(sp)
1000ba64:	dfc00115 	stw	ra,4(sp)
1000ba68:	2021883a 	mov	r16,r4
1000ba6c:	000744c0 	call	1000744c <_malloc_r>
1000ba70:	8080b715 	stw	r2,732(r16)
1000ba74:	1009883a 	mov	r4,r2
1000ba78:	10000826 	beq	r2,zero,1000ba9c <_init_signal_r+0x54>
1000ba7c:	01802004 	movi	r6,128
1000ba80:	000b883a 	mov	r5,zero
1000ba84:	0007f280 	call	10007f28 <memset>
1000ba88:	0005883a 	mov	r2,zero
1000ba8c:	dfc00117 	ldw	ra,4(sp)
1000ba90:	dc000017 	ldw	r16,0(sp)
1000ba94:	dec00204 	addi	sp,sp,8
1000ba98:	f800283a 	ret
1000ba9c:	00bfffc4 	movi	r2,-1
1000baa0:	003ffa06 	br	1000ba8c <_init_signal_r+0x44>

1000baa4 <_signal_r>:
1000baa4:	defffc04 	addi	sp,sp,-16
1000baa8:	dc400115 	stw	r17,4(sp)
1000baac:	dfc00315 	stw	ra,12(sp)
1000bab0:	dc800215 	stw	r18,8(sp)
1000bab4:	dc000015 	stw	r16,0(sp)
1000bab8:	28800830 	cmpltui	r2,r5,32
1000babc:	2023883a 	mov	r17,r4
1000bac0:	10000e26 	beq	r2,zero,1000bafc <_signal_r+0x58>
1000bac4:	20c0b717 	ldw	r3,732(r4)
1000bac8:	2821883a 	mov	r16,r5
1000bacc:	3025883a 	mov	r18,r6
1000bad0:	18000e26 	beq	r3,zero,1000bb0c <_signal_r+0x68>
1000bad4:	802090ba 	slli	r16,r16,2
1000bad8:	1c21883a 	add	r16,r3,r16
1000badc:	80800017 	ldw	r2,0(r16)
1000bae0:	84800015 	stw	r18,0(r16)
1000bae4:	dfc00317 	ldw	ra,12(sp)
1000bae8:	dc800217 	ldw	r18,8(sp)
1000baec:	dc400117 	ldw	r17,4(sp)
1000baf0:	dc000017 	ldw	r16,0(sp)
1000baf4:	dec00404 	addi	sp,sp,16
1000baf8:	f800283a 	ret
1000bafc:	00800584 	movi	r2,22
1000bb00:	20800015 	stw	r2,0(r4)
1000bb04:	00bfffc4 	movi	r2,-1
1000bb08:	003ff606 	br	1000bae4 <_signal_r+0x40>
1000bb0c:	01402004 	movi	r5,128
1000bb10:	000744c0 	call	1000744c <_malloc_r>
1000bb14:	8880b715 	stw	r2,732(r17)
1000bb18:	10000626 	beq	r2,zero,1000bb34 <_signal_r+0x90>
1000bb1c:	01802004 	movi	r6,128
1000bb20:	000b883a 	mov	r5,zero
1000bb24:	1009883a 	mov	r4,r2
1000bb28:	0007f280 	call	10007f28 <memset>
1000bb2c:	1007883a 	mov	r3,r2
1000bb30:	003fe806 	br	1000bad4 <_signal_r+0x30>
1000bb34:	00bfffc4 	movi	r2,-1
1000bb38:	003fea06 	br	1000bae4 <_signal_r+0x40>

1000bb3c <_raise_r>:
1000bb3c:	28800830 	cmpltui	r2,r5,32
1000bb40:	10002b26 	beq	r2,zero,1000bbf0 <_raise_r+0xb4>
1000bb44:	2080b717 	ldw	r2,732(r4)
1000bb48:	defffd04 	addi	sp,sp,-12
1000bb4c:	dc000115 	stw	r16,4(sp)
1000bb50:	dfc00215 	stw	ra,8(sp)
1000bb54:	2821883a 	mov	r16,r5
1000bb58:	10001026 	beq	r2,zero,1000bb9c <_raise_r+0x60>
1000bb5c:	280690ba 	slli	r3,r5,2
1000bb60:	10c5883a 	add	r2,r2,r3
1000bb64:	10c00017 	ldw	r3,0(r2)
1000bb68:	18000c26 	beq	r3,zero,1000bb9c <_raise_r+0x60>
1000bb6c:	19400060 	cmpeqi	r5,r3,1
1000bb70:	28001a1e 	bne	r5,zero,1000bbdc <_raise_r+0xa0>
1000bb74:	197fffd8 	cmpnei	r5,r3,-1
1000bb78:	28001126 	beq	r5,zero,1000bbc0 <_raise_r+0x84>
1000bb7c:	10000015 	stw	zero,0(r2)
1000bb80:	8009883a 	mov	r4,r16
1000bb84:	183ee83a 	callr	r3
1000bb88:	0005883a 	mov	r2,zero
1000bb8c:	dfc00217 	ldw	ra,8(sp)
1000bb90:	dc000117 	ldw	r16,4(sp)
1000bb94:	dec00304 	addi	sp,sp,12
1000bb98:	f800283a 	ret
1000bb9c:	d9000015 	stw	r4,0(sp)
1000bba0:	000bf940 	call	1000bf94 <_getpid_r>
1000bba4:	d9000017 	ldw	r4,0(sp)
1000bba8:	800d883a 	mov	r6,r16
1000bbac:	100b883a 	mov	r5,r2
1000bbb0:	dfc00217 	ldw	ra,8(sp)
1000bbb4:	dc000117 	ldw	r16,4(sp)
1000bbb8:	dec00304 	addi	sp,sp,12
1000bbbc:	000bf341 	jmpi	1000bf34 <_kill_r>
1000bbc0:	00800584 	movi	r2,22
1000bbc4:	20800015 	stw	r2,0(r4)
1000bbc8:	00800044 	movi	r2,1
1000bbcc:	dfc00217 	ldw	ra,8(sp)
1000bbd0:	dc000117 	ldw	r16,4(sp)
1000bbd4:	dec00304 	addi	sp,sp,12
1000bbd8:	f800283a 	ret
1000bbdc:	0005883a 	mov	r2,zero
1000bbe0:	dfc00217 	ldw	ra,8(sp)
1000bbe4:	dc000117 	ldw	r16,4(sp)
1000bbe8:	dec00304 	addi	sp,sp,12
1000bbec:	f800283a 	ret
1000bbf0:	00800584 	movi	r2,22
1000bbf4:	20800015 	stw	r2,0(r4)
1000bbf8:	00bfffc4 	movi	r2,-1
1000bbfc:	f800283a 	ret

1000bc00 <__sigtramp_r>:
1000bc00:	28800830 	cmpltui	r2,r5,32
1000bc04:	10002b26 	beq	r2,zero,1000bcb4 <__sigtramp_r+0xb4>
1000bc08:	20c0b717 	ldw	r3,732(r4)
1000bc0c:	defffd04 	addi	sp,sp,-12
1000bc10:	dc400115 	stw	r17,4(sp)
1000bc14:	dc000015 	stw	r16,0(sp)
1000bc18:	dfc00215 	stw	ra,8(sp)
1000bc1c:	2821883a 	mov	r16,r5
1000bc20:	2023883a 	mov	r17,r4
1000bc24:	18001326 	beq	r3,zero,1000bc74 <__sigtramp_r+0x74>
1000bc28:	800490ba 	slli	r2,r16,2
1000bc2c:	1887883a 	add	r3,r3,r2
1000bc30:	18800017 	ldw	r2,0(r3)
1000bc34:	10000d26 	beq	r2,zero,1000bc6c <__sigtramp_r+0x6c>
1000bc38:	113fffe0 	cmpeqi	r4,r2,-1
1000bc3c:	2000191e 	bne	r4,zero,1000bca4 <__sigtramp_r+0xa4>
1000bc40:	11000060 	cmpeqi	r4,r2,1
1000bc44:	2000151e 	bne	r4,zero,1000bc9c <__sigtramp_r+0x9c>
1000bc48:	18000015 	stw	zero,0(r3)
1000bc4c:	8009883a 	mov	r4,r16
1000bc50:	103ee83a 	callr	r2
1000bc54:	0005883a 	mov	r2,zero
1000bc58:	dfc00217 	ldw	ra,8(sp)
1000bc5c:	dc400117 	ldw	r17,4(sp)
1000bc60:	dc000017 	ldw	r16,0(sp)
1000bc64:	dec00304 	addi	sp,sp,12
1000bc68:	f800283a 	ret
1000bc6c:	00800044 	movi	r2,1
1000bc70:	003ff906 	br	1000bc58 <__sigtramp_r+0x58>
1000bc74:	01402004 	movi	r5,128
1000bc78:	000744c0 	call	1000744c <_malloc_r>
1000bc7c:	8880b715 	stw	r2,732(r17)
1000bc80:	10000a26 	beq	r2,zero,1000bcac <__sigtramp_r+0xac>
1000bc84:	01802004 	movi	r6,128
1000bc88:	000b883a 	mov	r5,zero
1000bc8c:	1009883a 	mov	r4,r2
1000bc90:	0007f280 	call	10007f28 <memset>
1000bc94:	1007883a 	mov	r3,r2
1000bc98:	003fe306 	br	1000bc28 <__sigtramp_r+0x28>
1000bc9c:	008000c4 	movi	r2,3
1000bca0:	003fed06 	br	1000bc58 <__sigtramp_r+0x58>
1000bca4:	00800084 	movi	r2,2
1000bca8:	003feb06 	br	1000bc58 <__sigtramp_r+0x58>
1000bcac:	00bfffc4 	movi	r2,-1
1000bcb0:	003fe906 	br	1000bc58 <__sigtramp_r+0x58>
1000bcb4:	00bfffc4 	movi	r2,-1
1000bcb8:	f800283a 	ret

1000bcbc <raise>:
1000bcbc:	defffd04 	addi	sp,sp,-12
1000bcc0:	dc400115 	stw	r17,4(sp)
1000bcc4:	00c40074 	movhi	r3,4097
1000bcc8:	dfc00215 	stw	ra,8(sp)
1000bccc:	dc000015 	stw	r16,0(sp)
1000bcd0:	20800830 	cmpltui	r2,r4,32
1000bcd4:	1c51b317 	ldw	r17,18124(r3)
1000bcd8:	10002326 	beq	r2,zero,1000bd68 <raise+0xac>
1000bcdc:	8880b717 	ldw	r2,732(r17)
1000bce0:	2021883a 	mov	r16,r4
1000bce4:	10001026 	beq	r2,zero,1000bd28 <raise+0x6c>
1000bce8:	200690ba 	slli	r3,r4,2
1000bcec:	10c5883a 	add	r2,r2,r3
1000bcf0:	10c00017 	ldw	r3,0(r2)
1000bcf4:	18000c26 	beq	r3,zero,1000bd28 <raise+0x6c>
1000bcf8:	19400060 	cmpeqi	r5,r3,1
1000bcfc:	2800181e 	bne	r5,zero,1000bd60 <raise+0xa4>
1000bd00:	197fffd8 	cmpnei	r5,r3,-1
1000bd04:	28001226 	beq	r5,zero,1000bd50 <raise+0x94>
1000bd08:	10000015 	stw	zero,0(r2)
1000bd0c:	183ee83a 	callr	r3
1000bd10:	0005883a 	mov	r2,zero
1000bd14:	dfc00217 	ldw	ra,8(sp)
1000bd18:	dc400117 	ldw	r17,4(sp)
1000bd1c:	dc000017 	ldw	r16,0(sp)
1000bd20:	dec00304 	addi	sp,sp,12
1000bd24:	f800283a 	ret
1000bd28:	8809883a 	mov	r4,r17
1000bd2c:	000bf940 	call	1000bf94 <_getpid_r>
1000bd30:	800d883a 	mov	r6,r16
1000bd34:	100b883a 	mov	r5,r2
1000bd38:	8809883a 	mov	r4,r17
1000bd3c:	dfc00217 	ldw	ra,8(sp)
1000bd40:	dc400117 	ldw	r17,4(sp)
1000bd44:	dc000017 	ldw	r16,0(sp)
1000bd48:	dec00304 	addi	sp,sp,12
1000bd4c:	000bf341 	jmpi	1000bf34 <_kill_r>
1000bd50:	00800584 	movi	r2,22
1000bd54:	88800015 	stw	r2,0(r17)
1000bd58:	00800044 	movi	r2,1
1000bd5c:	003fed06 	br	1000bd14 <raise+0x58>
1000bd60:	0005883a 	mov	r2,zero
1000bd64:	003feb06 	br	1000bd14 <raise+0x58>
1000bd68:	00800584 	movi	r2,22
1000bd6c:	88800015 	stw	r2,0(r17)
1000bd70:	00bfffc4 	movi	r2,-1
1000bd74:	003fe706 	br	1000bd14 <raise+0x58>

1000bd78 <signal>:
1000bd78:	defffc04 	addi	sp,sp,-16
1000bd7c:	dc800215 	stw	r18,8(sp)
1000bd80:	00c40074 	movhi	r3,4097
1000bd84:	dfc00315 	stw	ra,12(sp)
1000bd88:	dc400115 	stw	r17,4(sp)
1000bd8c:	dc000015 	stw	r16,0(sp)
1000bd90:	20800830 	cmpltui	r2,r4,32
1000bd94:	1c91b317 	ldw	r18,18124(r3)
1000bd98:	10000e26 	beq	r2,zero,1000bdd4 <signal+0x5c>
1000bd9c:	2021883a 	mov	r16,r4
1000bda0:	9100b717 	ldw	r4,732(r18)
1000bda4:	2823883a 	mov	r17,r5
1000bda8:	20000e26 	beq	r4,zero,1000bde4 <signal+0x6c>
1000bdac:	802090ba 	slli	r16,r16,2
1000bdb0:	2421883a 	add	r16,r4,r16
1000bdb4:	80800017 	ldw	r2,0(r16)
1000bdb8:	84400015 	stw	r17,0(r16)
1000bdbc:	dfc00317 	ldw	ra,12(sp)
1000bdc0:	dc800217 	ldw	r18,8(sp)
1000bdc4:	dc400117 	ldw	r17,4(sp)
1000bdc8:	dc000017 	ldw	r16,0(sp)
1000bdcc:	dec00404 	addi	sp,sp,16
1000bdd0:	f800283a 	ret
1000bdd4:	00800584 	movi	r2,22
1000bdd8:	90800015 	stw	r2,0(r18)
1000bddc:	00bfffc4 	movi	r2,-1
1000bde0:	003ff606 	br	1000bdbc <signal+0x44>
1000bde4:	9009883a 	mov	r4,r18
1000bde8:	01402004 	movi	r5,128
1000bdec:	000744c0 	call	1000744c <_malloc_r>
1000bdf0:	9080b715 	stw	r2,732(r18)
1000bdf4:	1009883a 	mov	r4,r2
1000bdf8:	10000526 	beq	r2,zero,1000be10 <signal+0x98>
1000bdfc:	01802004 	movi	r6,128
1000be00:	000b883a 	mov	r5,zero
1000be04:	0007f280 	call	10007f28 <memset>
1000be08:	1009883a 	mov	r4,r2
1000be0c:	003fe706 	br	1000bdac <signal+0x34>
1000be10:	00bfffc4 	movi	r2,-1
1000be14:	003fe906 	br	1000bdbc <signal+0x44>

1000be18 <_init_signal>:
1000be18:	defffe04 	addi	sp,sp,-8
1000be1c:	00840074 	movhi	r2,4097
1000be20:	dc000015 	stw	r16,0(sp)
1000be24:	1411b317 	ldw	r16,18124(r2)
1000be28:	dfc00115 	stw	ra,4(sp)
1000be2c:	8080b717 	ldw	r2,732(r16)
1000be30:	10000526 	beq	r2,zero,1000be48 <_init_signal+0x30>
1000be34:	0005883a 	mov	r2,zero
1000be38:	dfc00117 	ldw	ra,4(sp)
1000be3c:	dc000017 	ldw	r16,0(sp)
1000be40:	dec00204 	addi	sp,sp,8
1000be44:	f800283a 	ret
1000be48:	8009883a 	mov	r4,r16
1000be4c:	01402004 	movi	r5,128
1000be50:	000744c0 	call	1000744c <_malloc_r>
1000be54:	8080b715 	stw	r2,732(r16)
1000be58:	1009883a 	mov	r4,r2
1000be5c:	10000426 	beq	r2,zero,1000be70 <_init_signal+0x58>
1000be60:	01802004 	movi	r6,128
1000be64:	000b883a 	mov	r5,zero
1000be68:	0007f280 	call	10007f28 <memset>
1000be6c:	003ff106 	br	1000be34 <_init_signal+0x1c>
1000be70:	00bfffc4 	movi	r2,-1
1000be74:	003ff006 	br	1000be38 <_init_signal+0x20>

1000be78 <__sigtramp>:
1000be78:	defffd04 	addi	sp,sp,-12
1000be7c:	dc400115 	stw	r17,4(sp)
1000be80:	00c40074 	movhi	r3,4097
1000be84:	dfc00215 	stw	ra,8(sp)
1000be88:	dc000015 	stw	r16,0(sp)
1000be8c:	20800830 	cmpltui	r2,r4,32
1000be90:	1c51b317 	ldw	r17,18124(r3)
1000be94:	10002526 	beq	r2,zero,1000bf2c <__sigtramp+0xb4>
1000be98:	88c0b717 	ldw	r3,732(r17)
1000be9c:	2021883a 	mov	r16,r4
1000bea0:	18001326 	beq	r3,zero,1000bef0 <__sigtramp+0x78>
1000bea4:	800890ba 	slli	r4,r16,2
1000bea8:	1907883a 	add	r3,r3,r4
1000beac:	18800017 	ldw	r2,0(r3)
1000beb0:	10000d26 	beq	r2,zero,1000bee8 <__sigtramp+0x70>
1000beb4:	113fffe0 	cmpeqi	r4,r2,-1
1000beb8:	20001a1e 	bne	r4,zero,1000bf24 <__sigtramp+0xac>
1000bebc:	11000060 	cmpeqi	r4,r2,1
1000bec0:	2000161e 	bne	r4,zero,1000bf1c <__sigtramp+0xa4>
1000bec4:	18000015 	stw	zero,0(r3)
1000bec8:	8009883a 	mov	r4,r16
1000becc:	103ee83a 	callr	r2
1000bed0:	0005883a 	mov	r2,zero
1000bed4:	dfc00217 	ldw	ra,8(sp)
1000bed8:	dc400117 	ldw	r17,4(sp)
1000bedc:	dc000017 	ldw	r16,0(sp)
1000bee0:	dec00304 	addi	sp,sp,12
1000bee4:	f800283a 	ret
1000bee8:	00800044 	movi	r2,1
1000beec:	003ff906 	br	1000bed4 <__sigtramp+0x5c>
1000bef0:	01402004 	movi	r5,128
1000bef4:	8809883a 	mov	r4,r17
1000bef8:	000744c0 	call	1000744c <_malloc_r>
1000befc:	8880b715 	stw	r2,732(r17)
1000bf00:	10000a26 	beq	r2,zero,1000bf2c <__sigtramp+0xb4>
1000bf04:	01802004 	movi	r6,128
1000bf08:	000b883a 	mov	r5,zero
1000bf0c:	1009883a 	mov	r4,r2
1000bf10:	0007f280 	call	10007f28 <memset>
1000bf14:	1007883a 	mov	r3,r2
1000bf18:	003fe206 	br	1000bea4 <__sigtramp+0x2c>
1000bf1c:	008000c4 	movi	r2,3
1000bf20:	003fec06 	br	1000bed4 <__sigtramp+0x5c>
1000bf24:	00800084 	movi	r2,2
1000bf28:	003fea06 	br	1000bed4 <__sigtramp+0x5c>
1000bf2c:	00bfffc4 	movi	r2,-1
1000bf30:	003fe806 	br	1000bed4 <__sigtramp+0x5c>

1000bf34 <_kill_r>:
1000bf34:	2807883a 	mov	r3,r5
1000bf38:	defffe04 	addi	sp,sp,-8
1000bf3c:	dc000015 	stw	r16,0(sp)
1000bf40:	00840074 	movhi	r2,4097
1000bf44:	300b883a 	mov	r5,r6
1000bf48:	2021883a 	mov	r16,r4
1000bf4c:	1809883a 	mov	r4,r3
1000bf50:	dfc00115 	stw	ra,4(sp)
1000bf54:	1018ba15 	stw	zero,25320(r2)
1000bf58:	000f8540 	call	1000f854 <kill>
1000bf5c:	10ffffd8 	cmpnei	r3,r2,-1
1000bf60:	18000426 	beq	r3,zero,1000bf74 <_kill_r+0x40>
1000bf64:	dfc00117 	ldw	ra,4(sp)
1000bf68:	dc000017 	ldw	r16,0(sp)
1000bf6c:	dec00204 	addi	sp,sp,8
1000bf70:	f800283a 	ret
1000bf74:	00c40074 	movhi	r3,4097
1000bf78:	18d8ba17 	ldw	r3,25320(r3)
1000bf7c:	183ff926 	beq	r3,zero,1000bf64 <_kill_r+0x30>
1000bf80:	80c00015 	stw	r3,0(r16)
1000bf84:	dfc00117 	ldw	ra,4(sp)
1000bf88:	dc000017 	ldw	r16,0(sp)
1000bf8c:	dec00204 	addi	sp,sp,8
1000bf90:	f800283a 	ret

1000bf94 <_getpid_r>:
1000bf94:	000f70c1 	jmpi	1000f70c <getpid>

1000bf98 <__udivdi3>:
1000bf98:	defff504 	addi	sp,sp,-44
1000bf9c:	dd000515 	stw	r20,20(sp)
1000bfa0:	dc800315 	stw	r18,12(sp)
1000bfa4:	dfc00a15 	stw	ra,40(sp)
1000bfa8:	df000915 	stw	fp,36(sp)
1000bfac:	ddc00815 	stw	r23,32(sp)
1000bfb0:	dd800715 	stw	r22,28(sp)
1000bfb4:	dd400615 	stw	r21,24(sp)
1000bfb8:	dcc00415 	stw	r19,16(sp)
1000bfbc:	dc400215 	stw	r17,8(sp)
1000bfc0:	dc000115 	stw	r16,4(sp)
1000bfc4:	2029883a 	mov	r20,r4
1000bfc8:	2825883a 	mov	r18,r5
1000bfcc:	3800461e 	bne	r7,zero,1000c0e8 <__udivdi3+0x150>
1000bfd0:	3823883a 	mov	r17,r7
1000bfd4:	3021883a 	mov	r16,r6
1000bfd8:	2027883a 	mov	r19,r4
1000bfdc:	2980622e 	bgeu	r5,r6,1000c168 <__udivdi3+0x1d0>
1000bfe0:	00bfffd4 	movui	r2,65535
1000bfe4:	282b883a 	mov	r21,r5
1000bfe8:	1180aa2e 	bgeu	r2,r6,1000c294 <__udivdi3+0x2fc>
1000bfec:	00804034 	movhi	r2,256
1000bff0:	30815a36 	bltu	r6,r2,1000c55c <__udivdi3+0x5c4>
1000bff4:	3006d63a 	srli	r3,r6,24
1000bff8:	04400604 	movi	r17,24
1000bffc:	00840074 	movhi	r2,4097
1000c000:	1885883a 	add	r2,r3,r2
1000c004:	108a7d03 	ldbu	r2,10740(r2)
1000c008:	00c00804 	movi	r3,32
1000c00c:	1463883a 	add	r17,r2,r17
1000c010:	1c45c83a 	sub	r2,r3,r17
1000c014:	1c400526 	beq	r3,r17,1000c02c <__udivdi3+0x94>
1000c018:	9086983a 	sll	r3,r18,r2
1000c01c:	a462d83a 	srl	r17,r20,r17
1000c020:	30a0983a 	sll	r16,r6,r2
1000c024:	a0a6983a 	sll	r19,r20,r2
1000c028:	88eab03a 	or	r21,r17,r3
1000c02c:	802cd43a 	srli	r22,r16,16
1000c030:	a809883a 	mov	r4,r21
1000c034:	853fffcc 	andi	r20,r16,65535
1000c038:	b00b883a 	mov	r5,r22
1000c03c:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c040:	a809883a 	mov	r4,r21
1000c044:	b00b883a 	mov	r5,r22
1000c048:	1025883a 	mov	r18,r2
1000c04c:	000cc700 	call	1000cc70 <__udivsi3>
1000c050:	a009883a 	mov	r4,r20
1000c054:	100b883a 	mov	r5,r2
1000c058:	102b883a 	mov	r21,r2
1000c05c:	000cd300 	call	1000cd30 <__mulsi3>
1000c060:	9024943a 	slli	r18,r18,16
1000c064:	9808d43a 	srli	r4,r19,16
1000c068:	9108b03a 	or	r4,r18,r4
1000c06c:	2080052e 	bgeu	r4,r2,1000c084 <__udivdi3+0xec>
1000c070:	2409883a 	add	r4,r4,r16
1000c074:	a8ffffc4 	addi	r3,r21,-1
1000c078:	24000136 	bltu	r4,r16,1000c080 <__udivdi3+0xe8>
1000c07c:	20814836 	bltu	r4,r2,1000c5a0 <__udivdi3+0x608>
1000c080:	182b883a 	mov	r21,r3
1000c084:	20a3c83a 	sub	r17,r4,r2
1000c088:	8809883a 	mov	r4,r17
1000c08c:	b00b883a 	mov	r5,r22
1000c090:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c094:	8809883a 	mov	r4,r17
1000c098:	1023883a 	mov	r17,r2
1000c09c:	b00b883a 	mov	r5,r22
1000c0a0:	8822943a 	slli	r17,r17,16
1000c0a4:	000cc700 	call	1000cc70 <__udivsi3>
1000c0a8:	100b883a 	mov	r5,r2
1000c0ac:	a009883a 	mov	r4,r20
1000c0b0:	9cffffcc 	andi	r19,r19,65535
1000c0b4:	1025883a 	mov	r18,r2
1000c0b8:	8ce6b03a 	or	r19,r17,r19
1000c0bc:	000cd300 	call	1000cd30 <__mulsi3>
1000c0c0:	9880052e 	bgeu	r19,r2,1000c0d8 <__udivdi3+0x140>
1000c0c4:	84e7883a 	add	r19,r16,r19
1000c0c8:	90ffffc4 	addi	r3,r18,-1
1000c0cc:	9c000136 	bltu	r19,r16,1000c0d4 <__udivdi3+0x13c>
1000c0d0:	98813136 	bltu	r19,r2,1000c598 <__udivdi3+0x600>
1000c0d4:	1825883a 	mov	r18,r3
1000c0d8:	a80c943a 	slli	r6,r21,16
1000c0dc:	0007883a 	mov	r3,zero
1000c0e0:	3484b03a 	or	r2,r6,r18
1000c0e4:	00000306 	br	1000c0f4 <__udivdi3+0x15c>
1000c0e8:	29c00e2e 	bgeu	r5,r7,1000c124 <__udivdi3+0x18c>
1000c0ec:	0007883a 	mov	r3,zero
1000c0f0:	0005883a 	mov	r2,zero
1000c0f4:	dfc00a17 	ldw	ra,40(sp)
1000c0f8:	df000917 	ldw	fp,36(sp)
1000c0fc:	ddc00817 	ldw	r23,32(sp)
1000c100:	dd800717 	ldw	r22,28(sp)
1000c104:	dd400617 	ldw	r21,24(sp)
1000c108:	dd000517 	ldw	r20,20(sp)
1000c10c:	dcc00417 	ldw	r19,16(sp)
1000c110:	dc800317 	ldw	r18,12(sp)
1000c114:	dc400217 	ldw	r17,8(sp)
1000c118:	dc000117 	ldw	r16,4(sp)
1000c11c:	dec00b04 	addi	sp,sp,44
1000c120:	f800283a 	ret
1000c124:	00bfffd4 	movui	r2,65535
1000c128:	11c05f2e 	bgeu	r2,r7,1000c2a8 <__udivdi3+0x310>
1000c12c:	00804034 	movhi	r2,256
1000c130:	3880fc36 	bltu	r7,r2,1000c524 <__udivdi3+0x58c>
1000c134:	3804d63a 	srli	r2,r7,24
1000c138:	01000604 	movi	r4,24
1000c13c:	00c40074 	movhi	r3,4097
1000c140:	10c7883a 	add	r3,r2,r3
1000c144:	188a7d03 	ldbu	r2,10740(r3)
1000c148:	00c00804 	movi	r3,32
1000c14c:	1105883a 	add	r2,r2,r4
1000c150:	18a3c83a 	sub	r17,r3,r2
1000c154:	1880901e 	bne	r3,r2,1000c398 <__udivdi3+0x400>
1000c158:	3c80f736 	bltu	r7,r18,1000c538 <__udivdi3+0x5a0>
1000c15c:	a185403a 	cmpgeu	r2,r20,r6
1000c160:	0007883a 	mov	r3,zero
1000c164:	003fe306 	br	1000c0f4 <__udivdi3+0x15c>
1000c168:	3000041e 	bne	r6,zero,1000c17c <__udivdi3+0x1e4>
1000c16c:	000b883a 	mov	r5,zero
1000c170:	01000044 	movi	r4,1
1000c174:	000cc700 	call	1000cc70 <__udivsi3>
1000c178:	1021883a 	mov	r16,r2
1000c17c:	00bfffd4 	movui	r2,65535
1000c180:	14003f2e 	bgeu	r2,r16,1000c280 <__udivdi3+0x2e8>
1000c184:	00804034 	movhi	r2,256
1000c188:	8080f136 	bltu	r16,r2,1000c550 <__udivdi3+0x5b8>
1000c18c:	8006d63a 	srli	r3,r16,24
1000c190:	04400604 	movi	r17,24
1000c194:	00840074 	movhi	r2,4097
1000c198:	1885883a 	add	r2,r3,r2
1000c19c:	108a7d03 	ldbu	r2,10740(r2)
1000c1a0:	00c00804 	movi	r3,32
1000c1a4:	1463883a 	add	r17,r2,r17
1000c1a8:	1c45c83a 	sub	r2,r3,r17
1000c1ac:	1c40431e 	bne	r3,r17,1000c2bc <__udivdi3+0x324>
1000c1b0:	802cd43a 	srli	r22,r16,16
1000c1b4:	9423c83a 	sub	r17,r18,r16
1000c1b8:	853fffcc 	andi	r20,r16,65535
1000c1bc:	00c00044 	movi	r3,1
1000c1c0:	b00b883a 	mov	r5,r22
1000c1c4:	8809883a 	mov	r4,r17
1000c1c8:	d8c00015 	stw	r3,0(sp)
1000c1cc:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c1d0:	b00b883a 	mov	r5,r22
1000c1d4:	8809883a 	mov	r4,r17
1000c1d8:	1025883a 	mov	r18,r2
1000c1dc:	000cc700 	call	1000cc70 <__udivsi3>
1000c1e0:	1009883a 	mov	r4,r2
1000c1e4:	a00b883a 	mov	r5,r20
1000c1e8:	102b883a 	mov	r21,r2
1000c1ec:	000cd300 	call	1000cd30 <__mulsi3>
1000c1f0:	9024943a 	slli	r18,r18,16
1000c1f4:	9808d43a 	srli	r4,r19,16
1000c1f8:	d8c00017 	ldw	r3,0(sp)
1000c1fc:	9108b03a 	or	r4,r18,r4
1000c200:	2080052e 	bgeu	r4,r2,1000c218 <__udivdi3+0x280>
1000c204:	2409883a 	add	r4,r4,r16
1000c208:	a97fffc4 	addi	r5,r21,-1
1000c20c:	24000136 	bltu	r4,r16,1000c214 <__udivdi3+0x27c>
1000c210:	2080e636 	bltu	r4,r2,1000c5ac <__udivdi3+0x614>
1000c214:	282b883a 	mov	r21,r5
1000c218:	20a3c83a 	sub	r17,r4,r2
1000c21c:	8809883a 	mov	r4,r17
1000c220:	b00b883a 	mov	r5,r22
1000c224:	d8c00015 	stw	r3,0(sp)
1000c228:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c22c:	8809883a 	mov	r4,r17
1000c230:	1023883a 	mov	r17,r2
1000c234:	b00b883a 	mov	r5,r22
1000c238:	8822943a 	slli	r17,r17,16
1000c23c:	000cc700 	call	1000cc70 <__udivsi3>
1000c240:	a00b883a 	mov	r5,r20
1000c244:	1009883a 	mov	r4,r2
1000c248:	9cffffcc 	andi	r19,r19,65535
1000c24c:	1025883a 	mov	r18,r2
1000c250:	8ce6b03a 	or	r19,r17,r19
1000c254:	000cd300 	call	1000cd30 <__mulsi3>
1000c258:	d8c00017 	ldw	r3,0(sp)
1000c25c:	9880052e 	bgeu	r19,r2,1000c274 <__udivdi3+0x2dc>
1000c260:	84e7883a 	add	r19,r16,r19
1000c264:	913fffc4 	addi	r4,r18,-1
1000c268:	9c000136 	bltu	r19,r16,1000c270 <__udivdi3+0x2d8>
1000c26c:	9880c836 	bltu	r19,r2,1000c590 <__udivdi3+0x5f8>
1000c270:	2025883a 	mov	r18,r4
1000c274:	a80c943a 	slli	r6,r21,16
1000c278:	3484b03a 	or	r2,r6,r18
1000c27c:	003f9d06 	br	1000c0f4 <__udivdi3+0x15c>
1000c280:	80804030 	cmpltui	r2,r16,256
1000c284:	1000b81e 	bne	r2,zero,1000c568 <__udivdi3+0x5d0>
1000c288:	8006d23a 	srli	r3,r16,8
1000c28c:	04400204 	movi	r17,8
1000c290:	003fc006 	br	1000c194 <__udivdi3+0x1fc>
1000c294:	30804030 	cmpltui	r2,r6,256
1000c298:	1000a51e 	bne	r2,zero,1000c530 <__udivdi3+0x598>
1000c29c:	3006d23a 	srli	r3,r6,8
1000c2a0:	04400204 	movi	r17,8
1000c2a4:	003f5506 	br	1000bffc <__udivdi3+0x64>
1000c2a8:	38804030 	cmpltui	r2,r7,256
1000c2ac:	1000a51e 	bne	r2,zero,1000c544 <__udivdi3+0x5ac>
1000c2b0:	3804d23a 	srli	r2,r7,8
1000c2b4:	01000204 	movi	r4,8
1000c2b8:	003fa006 	br	1000c13c <__udivdi3+0x1a4>
1000c2bc:	80a0983a 	sll	r16,r16,r2
1000c2c0:	946ed83a 	srl	r23,r18,r17
1000c2c4:	9086983a 	sll	r3,r18,r2
1000c2c8:	802cd43a 	srli	r22,r16,16
1000c2cc:	a462d83a 	srl	r17,r20,r17
1000c2d0:	b809883a 	mov	r4,r23
1000c2d4:	b00b883a 	mov	r5,r22
1000c2d8:	88eab03a 	or	r21,r17,r3
1000c2dc:	a0a6983a 	sll	r19,r20,r2
1000c2e0:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c2e4:	b809883a 	mov	r4,r23
1000c2e8:	b00b883a 	mov	r5,r22
1000c2ec:	1025883a 	mov	r18,r2
1000c2f0:	853fffcc 	andi	r20,r16,65535
1000c2f4:	000cc700 	call	1000cc70 <__udivsi3>
1000c2f8:	a009883a 	mov	r4,r20
1000c2fc:	100b883a 	mov	r5,r2
1000c300:	102f883a 	mov	r23,r2
1000c304:	000cd300 	call	1000cd30 <__mulsi3>
1000c308:	9024943a 	slli	r18,r18,16
1000c30c:	a808d43a 	srli	r4,r21,16
1000c310:	9108b03a 	or	r4,r18,r4
1000c314:	2080062e 	bgeu	r4,r2,1000c330 <__udivdi3+0x398>
1000c318:	2409883a 	add	r4,r4,r16
1000c31c:	b8ffffc4 	addi	r3,r23,-1
1000c320:	24009936 	bltu	r4,r16,1000c588 <__udivdi3+0x5f0>
1000c324:	2080982e 	bgeu	r4,r2,1000c588 <__udivdi3+0x5f0>
1000c328:	bdffff84 	addi	r23,r23,-2
1000c32c:	2409883a 	add	r4,r4,r16
1000c330:	20a3c83a 	sub	r17,r4,r2
1000c334:	8809883a 	mov	r4,r17
1000c338:	b00b883a 	mov	r5,r22
1000c33c:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c340:	1025883a 	mov	r18,r2
1000c344:	8809883a 	mov	r4,r17
1000c348:	b00b883a 	mov	r5,r22
1000c34c:	9024943a 	slli	r18,r18,16
1000c350:	000cc700 	call	1000cc70 <__udivsi3>
1000c354:	100b883a 	mov	r5,r2
1000c358:	a009883a 	mov	r4,r20
1000c35c:	ac7fffcc 	andi	r17,r21,65535
1000c360:	1039883a 	mov	fp,r2
1000c364:	9462b03a 	or	r17,r18,r17
1000c368:	000cd300 	call	1000cd30 <__mulsi3>
1000c36c:	8880062e 	bgeu	r17,r2,1000c388 <__udivdi3+0x3f0>
1000c370:	8c23883a 	add	r17,r17,r16
1000c374:	e0ffffc4 	addi	r3,fp,-1
1000c378:	8c007f36 	bltu	r17,r16,1000c578 <__udivdi3+0x5e0>
1000c37c:	88807e2e 	bgeu	r17,r2,1000c578 <__udivdi3+0x5e0>
1000c380:	e73fff84 	addi	fp,fp,-2
1000c384:	8c23883a 	add	r17,r17,r16
1000c388:	b806943a 	slli	r3,r23,16
1000c38c:	88a3c83a 	sub	r17,r17,r2
1000c390:	1f06b03a 	or	r3,r3,fp
1000c394:	003f8a06 	br	1000c1c0 <__udivdi3+0x228>
1000c398:	30a6d83a 	srl	r19,r6,r2
1000c39c:	3c4e983a 	sll	r7,r7,r17
1000c3a0:	90a0d83a 	srl	r16,r18,r2
1000c3a4:	9446983a 	sll	r3,r18,r17
1000c3a8:	99e6b03a 	or	r19,r19,r7
1000c3ac:	a084d83a 	srl	r2,r20,r2
1000c3b0:	9838d43a 	srli	fp,r19,16
1000c3b4:	8009883a 	mov	r4,r16
1000c3b8:	10eab03a 	or	r21,r2,r3
1000c3bc:	e00b883a 	mov	r5,fp
1000c3c0:	346c983a 	sll	r22,r6,r17
1000c3c4:	dd400015 	stw	r21,0(sp)
1000c3c8:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c3cc:	8009883a 	mov	r4,r16
1000c3d0:	e00b883a 	mov	r5,fp
1000c3d4:	102f883a 	mov	r23,r2
1000c3d8:	9cbfffcc 	andi	r18,r19,65535
1000c3dc:	000cc700 	call	1000cc70 <__udivsi3>
1000c3e0:	9009883a 	mov	r4,r18
1000c3e4:	100b883a 	mov	r5,r2
1000c3e8:	1021883a 	mov	r16,r2
1000c3ec:	000cd300 	call	1000cd30 <__mulsi3>
1000c3f0:	b82e943a 	slli	r23,r23,16
1000c3f4:	a808d43a 	srli	r4,r21,16
1000c3f8:	b908b03a 	or	r4,r23,r4
1000c3fc:	2080062e 	bgeu	r4,r2,1000c418 <__udivdi3+0x480>
1000c400:	24c9883a 	add	r4,r4,r19
1000c404:	817fffc4 	addi	r5,r16,-1
1000c408:	24c05d36 	bltu	r4,r19,1000c580 <__udivdi3+0x5e8>
1000c40c:	20805c2e 	bgeu	r4,r2,1000c580 <__udivdi3+0x5e8>
1000c410:	843fff84 	addi	r16,r16,-2
1000c414:	24c9883a 	add	r4,r4,r19
1000c418:	20abc83a 	sub	r21,r4,r2
1000c41c:	a809883a 	mov	r4,r21
1000c420:	e00b883a 	mov	r5,fp
1000c424:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c428:	a809883a 	mov	r4,r21
1000c42c:	e00b883a 	mov	r5,fp
1000c430:	102b883a 	mov	r21,r2
1000c434:	000cc700 	call	1000cc70 <__udivsi3>
1000c438:	9009883a 	mov	r4,r18
1000c43c:	100b883a 	mov	r5,r2
1000c440:	102f883a 	mov	r23,r2
1000c444:	000cd300 	call	1000cd30 <__mulsi3>
1000c448:	d8c00017 	ldw	r3,0(sp)
1000c44c:	a82a943a 	slli	r21,r21,16
1000c450:	100d883a 	mov	r6,r2
1000c454:	1cbfffcc 	andi	r18,r3,65535
1000c458:	aca4b03a 	or	r18,r21,r18
1000c45c:	9080062e 	bgeu	r18,r2,1000c478 <__udivdi3+0x4e0>
1000c460:	94e5883a 	add	r18,r18,r19
1000c464:	b8bfffc4 	addi	r2,r23,-1
1000c468:	94c04136 	bltu	r18,r19,1000c570 <__udivdi3+0x5d8>
1000c46c:	9180402e 	bgeu	r18,r6,1000c570 <__udivdi3+0x5d8>
1000c470:	bdffff84 	addi	r23,r23,-2
1000c474:	94e5883a 	add	r18,r18,r19
1000c478:	8004943a 	slli	r2,r16,16
1000c47c:	bd7fffcc 	andi	r21,r23,65535
1000c480:	b73fffcc 	andi	fp,r22,65535
1000c484:	15e0b03a 	or	r16,r2,r23
1000c488:	8026d43a 	srli	r19,r16,16
1000c48c:	a809883a 	mov	r4,r21
1000c490:	e00b883a 	mov	r5,fp
1000c494:	91a5c83a 	sub	r18,r18,r6
1000c498:	b02cd43a 	srli	r22,r22,16
1000c49c:	000cd300 	call	1000cd30 <__mulsi3>
1000c4a0:	9809883a 	mov	r4,r19
1000c4a4:	e00b883a 	mov	r5,fp
1000c4a8:	102f883a 	mov	r23,r2
1000c4ac:	000cd300 	call	1000cd30 <__mulsi3>
1000c4b0:	9809883a 	mov	r4,r19
1000c4b4:	b00b883a 	mov	r5,r22
1000c4b8:	1027883a 	mov	r19,r2
1000c4bc:	000cd300 	call	1000cd30 <__mulsi3>
1000c4c0:	a809883a 	mov	r4,r21
1000c4c4:	b00b883a 	mov	r5,r22
1000c4c8:	102b883a 	mov	r21,r2
1000c4cc:	000cd300 	call	1000cd30 <__mulsi3>
1000c4d0:	b806d43a 	srli	r3,r23,16
1000c4d4:	14c5883a 	add	r2,r2,r19
1000c4d8:	1887883a 	add	r3,r3,r2
1000c4dc:	1cc0022e 	bgeu	r3,r19,1000c4e8 <__udivdi3+0x550>
1000c4e0:	00800074 	movhi	r2,1
1000c4e4:	a8ab883a 	add	r21,r21,r2
1000c4e8:	1804d43a 	srli	r2,r3,16
1000c4ec:	156b883a 	add	r21,r2,r21
1000c4f0:	95400936 	bltu	r18,r21,1000c518 <__udivdi3+0x580>
1000c4f4:	95400326 	beq	r18,r21,1000c504 <__udivdi3+0x56c>
1000c4f8:	8005883a 	mov	r2,r16
1000c4fc:	0007883a 	mov	r3,zero
1000c500:	003efc06 	br	1000c0f4 <__udivdi3+0x15c>
1000c504:	1806943a 	slli	r3,r3,16
1000c508:	a44c983a 	sll	r6,r20,r17
1000c50c:	bdffffcc 	andi	r23,r23,65535
1000c510:	1dc7883a 	add	r3,r3,r23
1000c514:	30fff82e 	bgeu	r6,r3,1000c4f8 <__udivdi3+0x560>
1000c518:	80bfffc4 	addi	r2,r16,-1
1000c51c:	0007883a 	mov	r3,zero
1000c520:	003ef406 	br	1000c0f4 <__udivdi3+0x15c>
1000c524:	3804d43a 	srli	r2,r7,16
1000c528:	01000404 	movi	r4,16
1000c52c:	003f0306 	br	1000c13c <__udivdi3+0x1a4>
1000c530:	3007883a 	mov	r3,r6
1000c534:	003eb106 	br	1000bffc <__udivdi3+0x64>
1000c538:	0007883a 	mov	r3,zero
1000c53c:	00800044 	movi	r2,1
1000c540:	003eec06 	br	1000c0f4 <__udivdi3+0x15c>
1000c544:	3805883a 	mov	r2,r7
1000c548:	0009883a 	mov	r4,zero
1000c54c:	003efb06 	br	1000c13c <__udivdi3+0x1a4>
1000c550:	8006d43a 	srli	r3,r16,16
1000c554:	04400404 	movi	r17,16
1000c558:	003f0e06 	br	1000c194 <__udivdi3+0x1fc>
1000c55c:	3006d43a 	srli	r3,r6,16
1000c560:	04400404 	movi	r17,16
1000c564:	003ea506 	br	1000bffc <__udivdi3+0x64>
1000c568:	8007883a 	mov	r3,r16
1000c56c:	003f0906 	br	1000c194 <__udivdi3+0x1fc>
1000c570:	102f883a 	mov	r23,r2
1000c574:	003fc006 	br	1000c478 <__udivdi3+0x4e0>
1000c578:	1839883a 	mov	fp,r3
1000c57c:	003f8206 	br	1000c388 <__udivdi3+0x3f0>
1000c580:	2821883a 	mov	r16,r5
1000c584:	003fa406 	br	1000c418 <__udivdi3+0x480>
1000c588:	182f883a 	mov	r23,r3
1000c58c:	003f6806 	br	1000c330 <__udivdi3+0x398>
1000c590:	94bfff84 	addi	r18,r18,-2
1000c594:	003f3706 	br	1000c274 <__udivdi3+0x2dc>
1000c598:	94bfff84 	addi	r18,r18,-2
1000c59c:	003ece06 	br	1000c0d8 <__udivdi3+0x140>
1000c5a0:	ad7fff84 	addi	r21,r21,-2
1000c5a4:	2409883a 	add	r4,r4,r16
1000c5a8:	003eb606 	br	1000c084 <__udivdi3+0xec>
1000c5ac:	ad7fff84 	addi	r21,r21,-2
1000c5b0:	2409883a 	add	r4,r4,r16
1000c5b4:	003f1806 	br	1000c218 <__udivdi3+0x280>

1000c5b8 <__umoddi3>:
1000c5b8:	defff304 	addi	sp,sp,-52
1000c5bc:	dc400415 	stw	r17,16(sp)
1000c5c0:	dc000315 	stw	r16,12(sp)
1000c5c4:	dfc00c15 	stw	ra,48(sp)
1000c5c8:	df000b15 	stw	fp,44(sp)
1000c5cc:	ddc00a15 	stw	r23,40(sp)
1000c5d0:	dd800915 	stw	r22,36(sp)
1000c5d4:	dd400815 	stw	r21,32(sp)
1000c5d8:	dd000715 	stw	r20,28(sp)
1000c5dc:	dcc00615 	stw	r19,24(sp)
1000c5e0:	dc800515 	stw	r18,20(sp)
1000c5e4:	2823883a 	mov	r17,r5
1000c5e8:	2021883a 	mov	r16,r4
1000c5ec:	38003b1e 	bne	r7,zero,1000c6dc <__umoddi3+0x124>
1000c5f0:	3825883a 	mov	r18,r7
1000c5f4:	3029883a 	mov	r20,r6
1000c5f8:	2027883a 	mov	r19,r4
1000c5fc:	29805b2e 	bgeu	r5,r6,1000c76c <__umoddi3+0x1b4>
1000c600:	00bfffd4 	movui	r2,65535
1000c604:	282d883a 	mov	r22,r5
1000c608:	11809a2e 	bgeu	r2,r6,1000c874 <__umoddi3+0x2bc>
1000c60c:	00804034 	movhi	r2,256
1000c610:	30814436 	bltu	r6,r2,1000cb24 <__umoddi3+0x56c>
1000c614:	3006d63a 	srli	r3,r6,24
1000c618:	04800604 	movi	r18,24
1000c61c:	00840074 	movhi	r2,4097
1000c620:	1885883a 	add	r2,r3,r2
1000c624:	108a7d03 	ldbu	r2,10740(r2)
1000c628:	00c00804 	movi	r3,32
1000c62c:	1485883a 	add	r2,r2,r18
1000c630:	18a5c83a 	sub	r18,r3,r2
1000c634:	18800526 	beq	r3,r2,1000c64c <__umoddi3+0x94>
1000c638:	8ca2983a 	sll	r17,r17,r18
1000c63c:	8084d83a 	srl	r2,r16,r2
1000c640:	34a8983a 	sll	r20,r6,r18
1000c644:	84a6983a 	sll	r19,r16,r18
1000c648:	146cb03a 	or	r22,r2,r17
1000c64c:	a02ed43a 	srli	r23,r20,16
1000c650:	b009883a 	mov	r4,r22
1000c654:	a57fffcc 	andi	r21,r20,65535
1000c658:	b80b883a 	mov	r5,r23
1000c65c:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c660:	b80b883a 	mov	r5,r23
1000c664:	b009883a 	mov	r4,r22
1000c668:	1023883a 	mov	r17,r2
1000c66c:	000cc700 	call	1000cc70 <__udivsi3>
1000c670:	a809883a 	mov	r4,r21
1000c674:	100b883a 	mov	r5,r2
1000c678:	000cd300 	call	1000cd30 <__mulsi3>
1000c67c:	8822943a 	slli	r17,r17,16
1000c680:	9808d43a 	srli	r4,r19,16
1000c684:	8908b03a 	or	r4,r17,r4
1000c688:	2080042e 	bgeu	r4,r2,1000c69c <__umoddi3+0xe4>
1000c68c:	2509883a 	add	r4,r4,r20
1000c690:	25000236 	bltu	r4,r20,1000c69c <__umoddi3+0xe4>
1000c694:	2080012e 	bgeu	r4,r2,1000c69c <__umoddi3+0xe4>
1000c698:	2509883a 	add	r4,r4,r20
1000c69c:	20a1c83a 	sub	r16,r4,r2
1000c6a0:	b80b883a 	mov	r5,r23
1000c6a4:	8009883a 	mov	r4,r16
1000c6a8:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c6ac:	b80b883a 	mov	r5,r23
1000c6b0:	8009883a 	mov	r4,r16
1000c6b4:	1023883a 	mov	r17,r2
1000c6b8:	000cc700 	call	1000cc70 <__udivsi3>
1000c6bc:	8822943a 	slli	r17,r17,16
1000c6c0:	100b883a 	mov	r5,r2
1000c6c4:	a809883a 	mov	r4,r21
1000c6c8:	000cd300 	call	1000cd30 <__mulsi3>
1000c6cc:	98ffffcc 	andi	r3,r19,65535
1000c6d0:	88c6b03a 	or	r3,r17,r3
1000c6d4:	18805e2e 	bgeu	r3,r2,1000c850 <__umoddi3+0x298>
1000c6d8:	00005906 	br	1000c840 <__umoddi3+0x288>
1000c6dc:	2005883a 	mov	r2,r4
1000c6e0:	29c00d2e 	bgeu	r5,r7,1000c718 <__umoddi3+0x160>
1000c6e4:	2807883a 	mov	r3,r5
1000c6e8:	dfc00c17 	ldw	ra,48(sp)
1000c6ec:	df000b17 	ldw	fp,44(sp)
1000c6f0:	ddc00a17 	ldw	r23,40(sp)
1000c6f4:	dd800917 	ldw	r22,36(sp)
1000c6f8:	dd400817 	ldw	r21,32(sp)
1000c6fc:	dd000717 	ldw	r20,28(sp)
1000c700:	dcc00617 	ldw	r19,24(sp)
1000c704:	dc800517 	ldw	r18,20(sp)
1000c708:	dc400417 	ldw	r17,16(sp)
1000c70c:	dc000317 	ldw	r16,12(sp)
1000c710:	dec00d04 	addi	sp,sp,52
1000c714:	f800283a 	ret
1000c718:	013fffd4 	movui	r4,65535
1000c71c:	2807883a 	mov	r3,r5
1000c720:	21c0592e 	bgeu	r4,r7,1000c888 <__umoddi3+0x2d0>
1000c724:	01004034 	movhi	r4,256
1000c728:	39010336 	bltu	r7,r4,1000cb38 <__umoddi3+0x580>
1000c72c:	3808d63a 	srli	r4,r7,24
1000c730:	02000604 	movi	r8,24
1000c734:	01440074 	movhi	r5,4097
1000c738:	214b883a 	add	r5,r4,r5
1000c73c:	2d0a7d03 	ldbu	r20,10740(r5)
1000c740:	01000804 	movi	r4,32
1000c744:	a229883a 	add	r20,r20,r8
1000c748:	252bc83a 	sub	r21,r4,r20
1000c74c:	2500531e 	bne	r4,r20,1000c89c <__umoddi3+0x2e4>
1000c750:	3c400136 	bltu	r7,r17,1000c758 <__umoddi3+0x1a0>
1000c754:	81bfe436 	bltu	r16,r6,1000c6e8 <__umoddi3+0x130>
1000c758:	8185c83a 	sub	r2,r16,r6
1000c75c:	89cfc83a 	sub	r7,r17,r7
1000c760:	8087803a 	cmpltu	r3,r16,r2
1000c764:	38c7c83a 	sub	r3,r7,r3
1000c768:	003fdf06 	br	1000c6e8 <__umoddi3+0x130>
1000c76c:	3000041e 	bne	r6,zero,1000c780 <__umoddi3+0x1c8>
1000c770:	000b883a 	mov	r5,zero
1000c774:	01000044 	movi	r4,1
1000c778:	000cc700 	call	1000cc70 <__udivsi3>
1000c77c:	1029883a 	mov	r20,r2
1000c780:	00bfffd4 	movui	r2,65535
1000c784:	1500362e 	bgeu	r2,r20,1000c860 <__umoddi3+0x2a8>
1000c788:	00804034 	movhi	r2,256
1000c78c:	a080ed36 	bltu	r20,r2,1000cb44 <__umoddi3+0x58c>
1000c790:	a006d63a 	srli	r3,r20,24
1000c794:	04800604 	movi	r18,24
1000c798:	00840074 	movhi	r2,4097
1000c79c:	1885883a 	add	r2,r3,r2
1000c7a0:	158a7d03 	ldbu	r22,10740(r2)
1000c7a4:	00800804 	movi	r2,32
1000c7a8:	b4ad883a 	add	r22,r22,r18
1000c7ac:	15a5c83a 	sub	r18,r2,r22
1000c7b0:	1580a51e 	bne	r2,r22,1000ca48 <__umoddi3+0x490>
1000c7b4:	a02ed43a 	srli	r23,r20,16
1000c7b8:	8d23c83a 	sub	r17,r17,r20
1000c7bc:	a57fffcc 	andi	r21,r20,65535
1000c7c0:	8809883a 	mov	r4,r17
1000c7c4:	b80b883a 	mov	r5,r23
1000c7c8:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c7cc:	8809883a 	mov	r4,r17
1000c7d0:	b80b883a 	mov	r5,r23
1000c7d4:	1023883a 	mov	r17,r2
1000c7d8:	000cc700 	call	1000cc70 <__udivsi3>
1000c7dc:	1009883a 	mov	r4,r2
1000c7e0:	a80b883a 	mov	r5,r21
1000c7e4:	000cd300 	call	1000cd30 <__mulsi3>
1000c7e8:	8822943a 	slli	r17,r17,16
1000c7ec:	9808d43a 	srli	r4,r19,16
1000c7f0:	8908b03a 	or	r4,r17,r4
1000c7f4:	2080032e 	bgeu	r4,r2,1000c804 <__umoddi3+0x24c>
1000c7f8:	2509883a 	add	r4,r4,r20
1000c7fc:	25000136 	bltu	r4,r20,1000c804 <__umoddi3+0x24c>
1000c800:	2080dc36 	bltu	r4,r2,1000cb74 <__umoddi3+0x5bc>
1000c804:	20a1c83a 	sub	r16,r4,r2
1000c808:	b80b883a 	mov	r5,r23
1000c80c:	8009883a 	mov	r4,r16
1000c810:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c814:	b80b883a 	mov	r5,r23
1000c818:	8009883a 	mov	r4,r16
1000c81c:	1023883a 	mov	r17,r2
1000c820:	8822943a 	slli	r17,r17,16
1000c824:	000cc700 	call	1000cc70 <__udivsi3>
1000c828:	a80b883a 	mov	r5,r21
1000c82c:	1009883a 	mov	r4,r2
1000c830:	000cd300 	call	1000cd30 <__mulsi3>
1000c834:	9cffffcc 	andi	r19,r19,65535
1000c838:	8cc6b03a 	or	r3,r17,r19
1000c83c:	1880042e 	bgeu	r3,r2,1000c850 <__umoddi3+0x298>
1000c840:	1d07883a 	add	r3,r3,r20
1000c844:	1d000236 	bltu	r3,r20,1000c850 <__umoddi3+0x298>
1000c848:	1880012e 	bgeu	r3,r2,1000c850 <__umoddi3+0x298>
1000c84c:	1d07883a 	add	r3,r3,r20
1000c850:	1885c83a 	sub	r2,r3,r2
1000c854:	1484d83a 	srl	r2,r2,r18
1000c858:	0007883a 	mov	r3,zero
1000c85c:	003fa206 	br	1000c6e8 <__umoddi3+0x130>
1000c860:	a0804030 	cmpltui	r2,r20,256
1000c864:	1000ba1e 	bne	r2,zero,1000cb50 <__umoddi3+0x598>
1000c868:	a006d23a 	srli	r3,r20,8
1000c86c:	04800204 	movi	r18,8
1000c870:	003fc906 	br	1000c798 <__umoddi3+0x1e0>
1000c874:	30804030 	cmpltui	r2,r6,256
1000c878:	1000ad1e 	bne	r2,zero,1000cb30 <__umoddi3+0x578>
1000c87c:	3006d23a 	srli	r3,r6,8
1000c880:	04800204 	movi	r18,8
1000c884:	003f6506 	br	1000c61c <__umoddi3+0x64>
1000c888:	39004030 	cmpltui	r4,r7,256
1000c88c:	2000b21e 	bne	r4,zero,1000cb58 <__umoddi3+0x5a0>
1000c890:	3808d23a 	srli	r4,r7,8
1000c894:	02000204 	movi	r8,8
1000c898:	003fa606 	br	1000c734 <__umoddi3+0x17c>
1000c89c:	3d4e983a 	sll	r7,r7,r21
1000c8a0:	3508d83a 	srl	r4,r6,r20
1000c8a4:	8d2cd83a 	srl	r22,r17,r20
1000c8a8:	8504d83a 	srl	r2,r16,r20
1000c8ac:	21e4b03a 	or	r18,r4,r7
1000c8b0:	8d62983a 	sll	r17,r17,r21
1000c8b4:	9026d43a 	srli	r19,r18,16
1000c8b8:	354c983a 	sll	r6,r6,r21
1000c8bc:	1444b03a 	or	r2,r2,r17
1000c8c0:	b009883a 	mov	r4,r22
1000c8c4:	980b883a 	mov	r5,r19
1000c8c8:	d9800115 	stw	r6,4(sp)
1000c8cc:	d8800015 	stw	r2,0(sp)
1000c8d0:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c8d4:	980b883a 	mov	r5,r19
1000c8d8:	b009883a 	mov	r4,r22
1000c8dc:	102f883a 	mov	r23,r2
1000c8e0:	947fffcc 	andi	r17,r18,65535
1000c8e4:	000cc700 	call	1000cc70 <__udivsi3>
1000c8e8:	8809883a 	mov	r4,r17
1000c8ec:	100b883a 	mov	r5,r2
1000c8f0:	1039883a 	mov	fp,r2
1000c8f4:	000cd300 	call	1000cd30 <__mulsi3>
1000c8f8:	d8c00017 	ldw	r3,0(sp)
1000c8fc:	b82e943a 	slli	r23,r23,16
1000c900:	8560983a 	sll	r16,r16,r21
1000c904:	1808d43a 	srli	r4,r3,16
1000c908:	b908b03a 	or	r4,r23,r4
1000c90c:	2080062e 	bgeu	r4,r2,1000c928 <__umoddi3+0x370>
1000c910:	2489883a 	add	r4,r4,r18
1000c914:	e17fffc4 	addi	r5,fp,-1
1000c918:	24809436 	bltu	r4,r18,1000cb6c <__umoddi3+0x5b4>
1000c91c:	2080932e 	bgeu	r4,r2,1000cb6c <__umoddi3+0x5b4>
1000c920:	e73fff84 	addi	fp,fp,-2
1000c924:	2489883a 	add	r4,r4,r18
1000c928:	20adc83a 	sub	r22,r4,r2
1000c92c:	980b883a 	mov	r5,r19
1000c930:	b009883a 	mov	r4,r22
1000c934:	000ccd40 	call	1000ccd4 <__umodsi3>
1000c938:	980b883a 	mov	r5,r19
1000c93c:	b009883a 	mov	r4,r22
1000c940:	102f883a 	mov	r23,r2
1000c944:	000cc700 	call	1000cc70 <__udivsi3>
1000c948:	100b883a 	mov	r5,r2
1000c94c:	8809883a 	mov	r4,r17
1000c950:	d8800215 	stw	r2,8(sp)
1000c954:	000cd300 	call	1000cd30 <__mulsi3>
1000c958:	d8c00017 	ldw	r3,0(sp)
1000c95c:	b82e943a 	slli	r23,r23,16
1000c960:	d9400217 	ldw	r5,8(sp)
1000c964:	1c7fffcc 	andi	r17,r3,65535
1000c968:	bc62b03a 	or	r17,r23,r17
1000c96c:	8880062e 	bgeu	r17,r2,1000c988 <__umoddi3+0x3d0>
1000c970:	8ca3883a 	add	r17,r17,r18
1000c974:	28ffffc4 	addi	r3,r5,-1
1000c978:	8c807a36 	bltu	r17,r18,1000cb64 <__umoddi3+0x5ac>
1000c97c:	8880792e 	bgeu	r17,r2,1000cb64 <__umoddi3+0x5ac>
1000c980:	297fff84 	addi	r5,r5,-2
1000c984:	8ca3883a 	add	r17,r17,r18
1000c988:	e02c943a 	slli	r22,fp,16
1000c98c:	d9c00117 	ldw	r7,4(sp)
1000c990:	29bfffcc 	andi	r6,r5,65535
1000c994:	b16cb03a 	or	r22,r22,r5
1000c998:	38ffffcc 	andi	r3,r7,65535
1000c99c:	b02cd43a 	srli	r22,r22,16
1000c9a0:	180b883a 	mov	r5,r3
1000c9a4:	3009883a 	mov	r4,r6
1000c9a8:	3838d43a 	srli	fp,r7,16
1000c9ac:	182f883a 	mov	r23,r3
1000c9b0:	d9800015 	stw	r6,0(sp)
1000c9b4:	88a3c83a 	sub	r17,r17,r2
1000c9b8:	000cd300 	call	1000cd30 <__mulsi3>
1000c9bc:	b80b883a 	mov	r5,r23
1000c9c0:	b009883a 	mov	r4,r22
1000c9c4:	102f883a 	mov	r23,r2
1000c9c8:	000cd300 	call	1000cd30 <__mulsi3>
1000c9cc:	e00b883a 	mov	r5,fp
1000c9d0:	b009883a 	mov	r4,r22
1000c9d4:	102d883a 	mov	r22,r2
1000c9d8:	000cd300 	call	1000cd30 <__mulsi3>
1000c9dc:	d9800017 	ldw	r6,0(sp)
1000c9e0:	e00b883a 	mov	r5,fp
1000c9e4:	1039883a 	mov	fp,r2
1000c9e8:	3009883a 	mov	r4,r6
1000c9ec:	000cd300 	call	1000cd30 <__mulsi3>
1000c9f0:	b808d43a 	srli	r4,r23,16
1000c9f4:	1585883a 	add	r2,r2,r22
1000c9f8:	2089883a 	add	r4,r4,r2
1000c9fc:	2580022e 	bgeu	r4,r22,1000ca08 <__umoddi3+0x450>
1000ca00:	00800074 	movhi	r2,1
1000ca04:	e0b9883a 	add	fp,fp,r2
1000ca08:	2006d43a 	srli	r3,r4,16
1000ca0c:	2008943a 	slli	r4,r4,16
1000ca10:	bdffffcc 	andi	r23,r23,65535
1000ca14:	1f07883a 	add	r3,r3,fp
1000ca18:	25c9883a 	add	r4,r4,r23
1000ca1c:	88c03a36 	bltu	r17,r3,1000cb08 <__umoddi3+0x550>
1000ca20:	88c03826 	beq	r17,r3,1000cb04 <__umoddi3+0x54c>
1000ca24:	8109c83a 	sub	r4,r16,r4
1000ca28:	8121803a 	cmpltu	r16,r16,r4
1000ca2c:	88c7c83a 	sub	r3,r17,r3
1000ca30:	1c07c83a 	sub	r3,r3,r16
1000ca34:	1d04983a 	sll	r2,r3,r20
1000ca38:	2548d83a 	srl	r4,r4,r21
1000ca3c:	1d46d83a 	srl	r3,r3,r21
1000ca40:	1104b03a 	or	r2,r2,r4
1000ca44:	003f2806 	br	1000c6e8 <__umoddi3+0x130>
1000ca48:	a4a8983a 	sll	r20,r20,r18
1000ca4c:	8da6d83a 	srl	r19,r17,r22
1000ca50:	8ca2983a 	sll	r17,r17,r18
1000ca54:	a02ed43a 	srli	r23,r20,16
1000ca58:	9809883a 	mov	r4,r19
1000ca5c:	85acd83a 	srl	r22,r16,r22
1000ca60:	b80b883a 	mov	r5,r23
1000ca64:	000ccd40 	call	1000ccd4 <__umodsi3>
1000ca68:	9809883a 	mov	r4,r19
1000ca6c:	b80b883a 	mov	r5,r23
1000ca70:	b46cb03a 	or	r22,r22,r17
1000ca74:	a57fffcc 	andi	r21,r20,65535
1000ca78:	1023883a 	mov	r17,r2
1000ca7c:	000cc700 	call	1000cc70 <__udivsi3>
1000ca80:	a809883a 	mov	r4,r21
1000ca84:	100b883a 	mov	r5,r2
1000ca88:	000cd300 	call	1000cd30 <__mulsi3>
1000ca8c:	8822943a 	slli	r17,r17,16
1000ca90:	b008d43a 	srli	r4,r22,16
1000ca94:	84a6983a 	sll	r19,r16,r18
1000ca98:	8908b03a 	or	r4,r17,r4
1000ca9c:	2080042e 	bgeu	r4,r2,1000cab0 <__umoddi3+0x4f8>
1000caa0:	2509883a 	add	r4,r4,r20
1000caa4:	25000236 	bltu	r4,r20,1000cab0 <__umoddi3+0x4f8>
1000caa8:	2080012e 	bgeu	r4,r2,1000cab0 <__umoddi3+0x4f8>
1000caac:	2509883a 	add	r4,r4,r20
1000cab0:	20a1c83a 	sub	r16,r4,r2
1000cab4:	8009883a 	mov	r4,r16
1000cab8:	b80b883a 	mov	r5,r23
1000cabc:	000ccd40 	call	1000ccd4 <__umodsi3>
1000cac0:	8009883a 	mov	r4,r16
1000cac4:	1021883a 	mov	r16,r2
1000cac8:	b80b883a 	mov	r5,r23
1000cacc:	8020943a 	slli	r16,r16,16
1000cad0:	000cc700 	call	1000cc70 <__udivsi3>
1000cad4:	100b883a 	mov	r5,r2
1000cad8:	a809883a 	mov	r4,r21
1000cadc:	b47fffcc 	andi	r17,r22,65535
1000cae0:	000cd300 	call	1000cd30 <__mulsi3>
1000cae4:	8462b03a 	or	r17,r16,r17
1000cae8:	8880042e 	bgeu	r17,r2,1000cafc <__umoddi3+0x544>
1000caec:	8d23883a 	add	r17,r17,r20
1000caf0:	8d000236 	bltu	r17,r20,1000cafc <__umoddi3+0x544>
1000caf4:	8880012e 	bgeu	r17,r2,1000cafc <__umoddi3+0x544>
1000caf8:	8d23883a 	add	r17,r17,r20
1000cafc:	88a3c83a 	sub	r17,r17,r2
1000cb00:	003f2f06 	br	1000c7c0 <__umoddi3+0x208>
1000cb04:	813fc72e 	bgeu	r16,r4,1000ca24 <__umoddi3+0x46c>
1000cb08:	d8800117 	ldw	r2,4(sp)
1000cb0c:	20a7c83a 	sub	r19,r4,r2
1000cb10:	24c9803a 	cmpltu	r4,r4,r19
1000cb14:	2489883a 	add	r4,r4,r18
1000cb18:	1907c83a 	sub	r3,r3,r4
1000cb1c:	9809883a 	mov	r4,r19
1000cb20:	003fc006 	br	1000ca24 <__umoddi3+0x46c>
1000cb24:	3006d43a 	srli	r3,r6,16
1000cb28:	04800404 	movi	r18,16
1000cb2c:	003ebb06 	br	1000c61c <__umoddi3+0x64>
1000cb30:	3007883a 	mov	r3,r6
1000cb34:	003eb906 	br	1000c61c <__umoddi3+0x64>
1000cb38:	3808d43a 	srli	r4,r7,16
1000cb3c:	02000404 	movi	r8,16
1000cb40:	003efc06 	br	1000c734 <__umoddi3+0x17c>
1000cb44:	a006d43a 	srli	r3,r20,16
1000cb48:	04800404 	movi	r18,16
1000cb4c:	003f1206 	br	1000c798 <__umoddi3+0x1e0>
1000cb50:	a007883a 	mov	r3,r20
1000cb54:	003f1006 	br	1000c798 <__umoddi3+0x1e0>
1000cb58:	3809883a 	mov	r4,r7
1000cb5c:	0011883a 	mov	r8,zero
1000cb60:	003ef406 	br	1000c734 <__umoddi3+0x17c>
1000cb64:	180b883a 	mov	r5,r3
1000cb68:	003f8706 	br	1000c988 <__umoddi3+0x3d0>
1000cb6c:	2839883a 	mov	fp,r5
1000cb70:	003f6d06 	br	1000c928 <__umoddi3+0x370>
1000cb74:	2509883a 	add	r4,r4,r20
1000cb78:	003f2206 	br	1000c804 <__umoddi3+0x24c>

1000cb7c <__divsi3>:
1000cb7c:	20001a16 	blt	r4,zero,1000cbe8 <__divsi3+0x6c>
1000cb80:	000f883a 	mov	r7,zero
1000cb84:	2800020e 	bge	r5,zero,1000cb90 <__divsi3+0x14>
1000cb88:	014bc83a 	sub	r5,zero,r5
1000cb8c:	39c0005c 	xori	r7,r7,1
1000cb90:	200d883a 	mov	r6,r4
1000cb94:	00c00044 	movi	r3,1
1000cb98:	2900092e 	bgeu	r5,r4,1000cbc0 <__divsi3+0x44>
1000cb9c:	00800804 	movi	r2,32
1000cba0:	00c00044 	movi	r3,1
1000cba4:	00000106 	br	1000cbac <__divsi3+0x30>
1000cba8:	10001226 	beq	r2,zero,1000cbf4 <__divsi3+0x78>
1000cbac:	294b883a 	add	r5,r5,r5
1000cbb0:	10bfffc4 	addi	r2,r2,-1
1000cbb4:	18c7883a 	add	r3,r3,r3
1000cbb8:	293ffb36 	bltu	r5,r4,1000cba8 <__divsi3+0x2c>
1000cbbc:	18000d26 	beq	r3,zero,1000cbf4 <__divsi3+0x78>
1000cbc0:	0005883a 	mov	r2,zero
1000cbc4:	31400236 	bltu	r6,r5,1000cbd0 <__divsi3+0x54>
1000cbc8:	314dc83a 	sub	r6,r6,r5
1000cbcc:	10c4b03a 	or	r2,r2,r3
1000cbd0:	1806d07a 	srli	r3,r3,1
1000cbd4:	280ad07a 	srli	r5,r5,1
1000cbd8:	183ffa1e 	bne	r3,zero,1000cbc4 <__divsi3+0x48>
1000cbdc:	38000126 	beq	r7,zero,1000cbe4 <__divsi3+0x68>
1000cbe0:	0085c83a 	sub	r2,zero,r2
1000cbe4:	f800283a 	ret
1000cbe8:	0109c83a 	sub	r4,zero,r4
1000cbec:	01c00044 	movi	r7,1
1000cbf0:	003fe406 	br	1000cb84 <__divsi3+0x8>
1000cbf4:	0005883a 	mov	r2,zero
1000cbf8:	003ff806 	br	1000cbdc <__divsi3+0x60>

1000cbfc <__modsi3>:
1000cbfc:	20001916 	blt	r4,zero,1000cc64 <__modsi3+0x68>
1000cc00:	000f883a 	mov	r7,zero
1000cc04:	2005883a 	mov	r2,r4
1000cc08:	2800010e 	bge	r5,zero,1000cc10 <__modsi3+0x14>
1000cc0c:	014bc83a 	sub	r5,zero,r5
1000cc10:	00c00044 	movi	r3,1
1000cc14:	2900092e 	bgeu	r5,r4,1000cc3c <__modsi3+0x40>
1000cc18:	01800804 	movi	r6,32
1000cc1c:	00c00044 	movi	r3,1
1000cc20:	00000106 	br	1000cc28 <__modsi3+0x2c>
1000cc24:	30000d26 	beq	r6,zero,1000cc5c <__modsi3+0x60>
1000cc28:	294b883a 	add	r5,r5,r5
1000cc2c:	31bfffc4 	addi	r6,r6,-1
1000cc30:	18c7883a 	add	r3,r3,r3
1000cc34:	293ffb36 	bltu	r5,r4,1000cc24 <__modsi3+0x28>
1000cc38:	18000826 	beq	r3,zero,1000cc5c <__modsi3+0x60>
1000cc3c:	1806d07a 	srli	r3,r3,1
1000cc40:	11400136 	bltu	r2,r5,1000cc48 <__modsi3+0x4c>
1000cc44:	1145c83a 	sub	r2,r2,r5
1000cc48:	280ad07a 	srli	r5,r5,1
1000cc4c:	183ffb1e 	bne	r3,zero,1000cc3c <__modsi3+0x40>
1000cc50:	38000126 	beq	r7,zero,1000cc58 <__modsi3+0x5c>
1000cc54:	0085c83a 	sub	r2,zero,r2
1000cc58:	f800283a 	ret
1000cc5c:	2005883a 	mov	r2,r4
1000cc60:	003ffb06 	br	1000cc50 <__modsi3+0x54>
1000cc64:	0109c83a 	sub	r4,zero,r4
1000cc68:	01c00044 	movi	r7,1
1000cc6c:	003fe506 	br	1000cc04 <__modsi3+0x8>

1000cc70 <__udivsi3>:
1000cc70:	200d883a 	mov	r6,r4
1000cc74:	2900152e 	bgeu	r5,r4,1000cccc <__udivsi3+0x5c>
1000cc78:	28001416 	blt	r5,zero,1000cccc <__udivsi3+0x5c>
1000cc7c:	00800804 	movi	r2,32
1000cc80:	00c00044 	movi	r3,1
1000cc84:	00000206 	br	1000cc90 <__udivsi3+0x20>
1000cc88:	10000e26 	beq	r2,zero,1000ccc4 <__udivsi3+0x54>
1000cc8c:	28000516 	blt	r5,zero,1000cca4 <__udivsi3+0x34>
1000cc90:	294b883a 	add	r5,r5,r5
1000cc94:	10bfffc4 	addi	r2,r2,-1
1000cc98:	18c7883a 	add	r3,r3,r3
1000cc9c:	293ffa36 	bltu	r5,r4,1000cc88 <__udivsi3+0x18>
1000cca0:	18000826 	beq	r3,zero,1000ccc4 <__udivsi3+0x54>
1000cca4:	0005883a 	mov	r2,zero
1000cca8:	31400236 	bltu	r6,r5,1000ccb4 <__udivsi3+0x44>
1000ccac:	314dc83a 	sub	r6,r6,r5
1000ccb0:	10c4b03a 	or	r2,r2,r3
1000ccb4:	1806d07a 	srli	r3,r3,1
1000ccb8:	280ad07a 	srli	r5,r5,1
1000ccbc:	183ffa1e 	bne	r3,zero,1000cca8 <__udivsi3+0x38>
1000ccc0:	f800283a 	ret
1000ccc4:	0005883a 	mov	r2,zero
1000ccc8:	f800283a 	ret
1000cccc:	00c00044 	movi	r3,1
1000ccd0:	003ff406 	br	1000cca4 <__udivsi3+0x34>

1000ccd4 <__umodsi3>:
1000ccd4:	2005883a 	mov	r2,r4
1000ccd8:	2900132e 	bgeu	r5,r4,1000cd28 <__umodsi3+0x54>
1000ccdc:	28001216 	blt	r5,zero,1000cd28 <__umodsi3+0x54>
1000cce0:	01800804 	movi	r6,32
1000cce4:	00c00044 	movi	r3,1
1000cce8:	00000206 	br	1000ccf4 <__umodsi3+0x20>
1000ccec:	30000c26 	beq	r6,zero,1000cd20 <__umodsi3+0x4c>
1000ccf0:	28000516 	blt	r5,zero,1000cd08 <__umodsi3+0x34>
1000ccf4:	294b883a 	add	r5,r5,r5
1000ccf8:	31bfffc4 	addi	r6,r6,-1
1000ccfc:	18c7883a 	add	r3,r3,r3
1000cd00:	293ffa36 	bltu	r5,r4,1000ccec <__umodsi3+0x18>
1000cd04:	18000626 	beq	r3,zero,1000cd20 <__umodsi3+0x4c>
1000cd08:	1806d07a 	srli	r3,r3,1
1000cd0c:	11400136 	bltu	r2,r5,1000cd14 <__umodsi3+0x40>
1000cd10:	1145c83a 	sub	r2,r2,r5
1000cd14:	280ad07a 	srli	r5,r5,1
1000cd18:	183ffb1e 	bne	r3,zero,1000cd08 <__umodsi3+0x34>
1000cd1c:	f800283a 	ret
1000cd20:	2005883a 	mov	r2,r4
1000cd24:	f800283a 	ret
1000cd28:	00c00044 	movi	r3,1
1000cd2c:	003ff606 	br	1000cd08 <__umodsi3+0x34>

1000cd30 <__mulsi3>:
1000cd30:	0005883a 	mov	r2,zero
1000cd34:	20000726 	beq	r4,zero,1000cd54 <__mulsi3+0x24>
1000cd38:	20c0004c 	andi	r3,r4,1
1000cd3c:	2008d07a 	srli	r4,r4,1
1000cd40:	18000126 	beq	r3,zero,1000cd48 <__mulsi3+0x18>
1000cd44:	1145883a 	add	r2,r2,r5
1000cd48:	294b883a 	add	r5,r5,r5
1000cd4c:	203ffa1e 	bne	r4,zero,1000cd38 <__mulsi3+0x8>
1000cd50:	f800283a 	ret
1000cd54:	f800283a 	ret

1000cd58 <__adddf3>:
1000cd58:	02000434 	movhi	r8,16
1000cd5c:	423fffc4 	addi	r8,r8,-1
1000cd60:	2806d53a 	srli	r3,r5,20
1000cd64:	3804d53a 	srli	r2,r7,20
1000cd68:	2a14703a 	and	r10,r5,r8
1000cd6c:	3a12703a 	and	r9,r7,r8
1000cd70:	280ad7fa 	srli	r5,r5,31
1000cd74:	501490fa 	slli	r10,r10,3
1000cd78:	2018d77a 	srli	r12,r4,29
1000cd7c:	481290fa 	slli	r9,r9,3
1000cd80:	3016d77a 	srli	r11,r6,29
1000cd84:	380ed7fa 	srli	r7,r7,31
1000cd88:	defffb04 	addi	sp,sp,-20
1000cd8c:	dc800215 	stw	r18,8(sp)
1000cd90:	dc000015 	stw	r16,0(sp)
1000cd94:	1c81ffcc 	andi	r18,r3,2047
1000cd98:	1081ffcc 	andi	r2,r2,2047
1000cd9c:	dfc00415 	stw	ra,16(sp)
1000cda0:	dcc00315 	stw	r19,12(sp)
1000cda4:	dc400115 	stw	r17,4(sp)
1000cda8:	201c90fa 	slli	r14,r4,3
1000cdac:	301a90fa 	slli	r13,r6,3
1000cdb0:	2821883a 	mov	r16,r5
1000cdb4:	6294b03a 	or	r10,r12,r10
1000cdb8:	5a52b03a 	or	r9,r11,r9
1000cdbc:	9087c83a 	sub	r3,r18,r2
1000cdc0:	29c06126 	beq	r5,r7,1000cf48 <__adddf3+0x1f0>
1000cdc4:	00c0550e 	bge	zero,r3,1000cf1c <__adddf3+0x1c4>
1000cdc8:	10007326 	beq	r2,zero,1000cf98 <__adddf3+0x240>
1000cdcc:	9081ffd8 	cmpnei	r2,r18,2047
1000cdd0:	1000bd26 	beq	r2,zero,1000d0c8 <__adddf3+0x370>
1000cdd4:	4a402034 	orhi	r9,r9,128
1000cdd8:	18800e48 	cmpgei	r2,r3,57
1000cddc:	1000ef1e 	bne	r2,zero,1000d19c <__adddf3+0x444>
1000cde0:	18800808 	cmpgei	r2,r3,32
1000cde4:	1001321e 	bne	r2,zero,1000d2b0 <__adddf3+0x558>
1000cde8:	00800804 	movi	r2,32
1000cdec:	10c5c83a 	sub	r2,r2,r3
1000cdf0:	68c8d83a 	srl	r4,r13,r3
1000cdf4:	48a2983a 	sll	r17,r9,r2
1000cdf8:	689a983a 	sll	r13,r13,r2
1000cdfc:	48c6d83a 	srl	r3,r9,r3
1000ce00:	8922b03a 	or	r17,r17,r4
1000ce04:	681ac03a 	cmpne	r13,r13,zero
1000ce08:	8b62b03a 	or	r17,r17,r13
1000ce0c:	50d5c83a 	sub	r10,r10,r3
1000ce10:	7463c83a 	sub	r17,r14,r17
1000ce14:	7451803a 	cmpltu	r8,r14,r17
1000ce18:	5211c83a 	sub	r8,r10,r8
1000ce1c:	4080202c 	andhi	r2,r8,128
1000ce20:	10008d26 	beq	r2,zero,1000d058 <__adddf3+0x300>
1000ce24:	02402034 	movhi	r9,128
1000ce28:	4a7fffc4 	addi	r9,r9,-1
1000ce2c:	4266703a 	and	r19,r8,r9
1000ce30:	9800b326 	beq	r19,zero,1000d100 <__adddf3+0x3a8>
1000ce34:	9809883a 	mov	r4,r19
1000ce38:	000f4440 	call	1000f444 <__clzsi2>
1000ce3c:	10fffe04 	addi	r3,r2,-8
1000ce40:	02000804 	movi	r8,32
1000ce44:	40d1c83a 	sub	r8,r8,r3
1000ce48:	8a10d83a 	srl	r8,r17,r8
1000ce4c:	98d2983a 	sll	r9,r19,r3
1000ce50:	88e2983a 	sll	r17,r17,r3
1000ce54:	4250b03a 	or	r8,r8,r9
1000ce58:	1c80b216 	blt	r3,r18,1000d124 <__adddf3+0x3cc>
1000ce5c:	1c87c83a 	sub	r3,r3,r18
1000ce60:	19000044 	addi	r4,r3,1
1000ce64:	20800808 	cmpgei	r2,r4,32
1000ce68:	10006f1e 	bne	r2,zero,1000d028 <__adddf3+0x2d0>
1000ce6c:	00800804 	movi	r2,32
1000ce70:	1105c83a 	sub	r2,r2,r4
1000ce74:	8906d83a 	srl	r3,r17,r4
1000ce78:	88a2983a 	sll	r17,r17,r2
1000ce7c:	4084983a 	sll	r2,r8,r2
1000ce80:	4110d83a 	srl	r8,r8,r4
1000ce84:	8822c03a 	cmpne	r17,r17,zero
1000ce88:	10c4b03a 	or	r2,r2,r3
1000ce8c:	1462b03a 	or	r17,r2,r17
1000ce90:	0025883a 	mov	r18,zero
1000ce94:	888001cc 	andi	r2,r17,7
1000ce98:	10000726 	beq	r2,zero,1000ceb8 <__adddf3+0x160>
1000ce9c:	888003cc 	andi	r2,r17,15
1000cea0:	10800120 	cmpeqi	r2,r2,4
1000cea4:	1000041e 	bne	r2,zero,1000ceb8 <__adddf3+0x160>
1000cea8:	88c00104 	addi	r3,r17,4
1000ceac:	1c63803a 	cmpltu	r17,r3,r17
1000ceb0:	4451883a 	add	r8,r8,r17
1000ceb4:	1823883a 	mov	r17,r3
1000ceb8:	4080202c 	andhi	r2,r8,128
1000cebc:	10006826 	beq	r2,zero,1000d060 <__adddf3+0x308>
1000cec0:	90c00044 	addi	r3,r18,1
1000cec4:	1881ffe0 	cmpeqi	r2,r3,2047
1000cec8:	18c1ffcc 	andi	r3,r3,2047
1000cecc:	10007a1e 	bne	r2,zero,1000d0b8 <__adddf3+0x360>
1000ced0:	00bfe034 	movhi	r2,65408
1000ced4:	10bfffc4 	addi	r2,r2,-1
1000ced8:	4090703a 	and	r8,r8,r2
1000cedc:	4004977a 	slli	r2,r8,29
1000cee0:	4010927a 	slli	r8,r8,9
1000cee4:	8822d0fa 	srli	r17,r17,3
1000cee8:	4010d33a 	srli	r8,r8,12
1000ceec:	1444b03a 	or	r2,r2,r17
1000cef0:	1806953a 	slli	r3,r3,20
1000cef4:	802097fa 	slli	r16,r16,31
1000cef8:	1a06b03a 	or	r3,r3,r8
1000cefc:	1c06b03a 	or	r3,r3,r16
1000cf00:	dfc00417 	ldw	ra,16(sp)
1000cf04:	dcc00317 	ldw	r19,12(sp)
1000cf08:	dc800217 	ldw	r18,8(sp)
1000cf0c:	dc400117 	ldw	r17,4(sp)
1000cf10:	dc000017 	ldw	r16,0(sp)
1000cf14:	dec00504 	addi	sp,sp,20
1000cf18:	f800283a 	ret
1000cf1c:	18002626 	beq	r3,zero,1000cfb8 <__adddf3+0x260>
1000cf20:	1487c83a 	sub	r3,r2,r18
1000cf24:	9000ba1e 	bne	r18,zero,1000d210 <__adddf3+0x4b8>
1000cf28:	5388b03a 	or	r4,r10,r14
1000cf2c:	20011826 	beq	r4,zero,1000d390 <__adddf3+0x638>
1000cf30:	193fffc4 	addi	r4,r3,-1
1000cf34:	20015726 	beq	r4,zero,1000d494 <__adddf3+0x73c>
1000cf38:	18c1ffd8 	cmpnei	r3,r3,2047
1000cf3c:	18013026 	beq	r3,zero,1000d400 <__adddf3+0x6a8>
1000cf40:	2007883a 	mov	r3,r4
1000cf44:	0000b506 	br	1000d21c <__adddf3+0x4c4>
1000cf48:	00c07b0e 	bge	zero,r3,1000d138 <__adddf3+0x3e0>
1000cf4c:	10002e26 	beq	r2,zero,1000d008 <__adddf3+0x2b0>
1000cf50:	9081ffd8 	cmpnei	r2,r18,2047
1000cf54:	10005c26 	beq	r2,zero,1000d0c8 <__adddf3+0x370>
1000cf58:	4a402034 	orhi	r9,r9,128
1000cf5c:	18800e48 	cmpgei	r2,r3,57
1000cf60:	10004b1e 	bne	r2,zero,1000d090 <__adddf3+0x338>
1000cf64:	18800808 	cmpgei	r2,r3,32
1000cf68:	1000ec26 	beq	r2,zero,1000d31c <__adddf3+0x5c4>
1000cf6c:	1c7ff804 	addi	r17,r3,-32
1000cf70:	19000820 	cmpeqi	r4,r3,32
1000cf74:	4c44d83a 	srl	r2,r9,r17
1000cf78:	2000041e 	bne	r4,zero,1000cf8c <__adddf3+0x234>
1000cf7c:	01001004 	movi	r4,64
1000cf80:	20c7c83a 	sub	r3,r4,r3
1000cf84:	48d2983a 	sll	r9,r9,r3
1000cf88:	6a5ab03a 	or	r13,r13,r9
1000cf8c:	6822c03a 	cmpne	r17,r13,zero
1000cf90:	88a2b03a 	or	r17,r17,r2
1000cf94:	00004006 	br	1000d098 <__adddf3+0x340>
1000cf98:	4b44b03a 	or	r2,r9,r13
1000cf9c:	10008226 	beq	r2,zero,1000d1a8 <__adddf3+0x450>
1000cfa0:	18bfffc4 	addi	r2,r3,-1
1000cfa4:	10011026 	beq	r2,zero,1000d3e8 <__adddf3+0x690>
1000cfa8:	18c1ffd8 	cmpnei	r3,r3,2047
1000cfac:	18004626 	beq	r3,zero,1000d0c8 <__adddf3+0x370>
1000cfb0:	1007883a 	mov	r3,r2
1000cfb4:	003f8806 	br	1000cdd8 <__adddf3+0x80>
1000cfb8:	90800044 	addi	r2,r18,1
1000cfbc:	1081ff8c 	andi	r2,r2,2046
1000cfc0:	1000a51e 	bne	r2,zero,1000d258 <__adddf3+0x500>
1000cfc4:	538ab03a 	or	r5,r10,r14
1000cfc8:	4b44b03a 	or	r2,r9,r13
1000cfcc:	9000f81e 	bne	r18,zero,1000d3b0 <__adddf3+0x658>
1000cfd0:	28013726 	beq	r5,zero,1000d4b0 <__adddf3+0x758>
1000cfd4:	10011226 	beq	r2,zero,1000d420 <__adddf3+0x6c8>
1000cfd8:	7363c83a 	sub	r17,r14,r13
1000cfdc:	7445803a 	cmpltu	r2,r14,r17
1000cfe0:	5251c83a 	sub	r8,r10,r9
1000cfe4:	4091c83a 	sub	r8,r8,r2
1000cfe8:	4080202c 	andhi	r2,r8,128
1000cfec:	10018f26 	beq	r2,zero,1000d62c <__adddf3+0x8d4>
1000cff0:	6ba3c83a 	sub	r17,r13,r14
1000cff4:	4a95c83a 	sub	r10,r9,r10
1000cff8:	6c51803a 	cmpltu	r8,r13,r17
1000cffc:	5211c83a 	sub	r8,r10,r8
1000d000:	3821883a 	mov	r16,r7
1000d004:	003fa306 	br	1000ce94 <__adddf3+0x13c>
1000d008:	4b44b03a 	or	r2,r9,r13
1000d00c:	10006626 	beq	r2,zero,1000d1a8 <__adddf3+0x450>
1000d010:	18bfffc4 	addi	r2,r3,-1
1000d014:	1000ec26 	beq	r2,zero,1000d3c8 <__adddf3+0x670>
1000d018:	18c1ffd8 	cmpnei	r3,r3,2047
1000d01c:	18012d26 	beq	r3,zero,1000d4d4 <__adddf3+0x77c>
1000d020:	1007883a 	mov	r3,r2
1000d024:	003fcd06 	br	1000cf5c <__adddf3+0x204>
1000d028:	18fff844 	addi	r3,r3,-31
1000d02c:	20800820 	cmpeqi	r2,r4,32
1000d030:	40c6d83a 	srl	r3,r8,r3
1000d034:	1000041e 	bne	r2,zero,1000d048 <__adddf3+0x2f0>
1000d038:	00801004 	movi	r2,64
1000d03c:	1109c83a 	sub	r4,r2,r4
1000d040:	4110983a 	sll	r8,r8,r4
1000d044:	8a22b03a 	or	r17,r17,r8
1000d048:	8822c03a 	cmpne	r17,r17,zero
1000d04c:	88e2b03a 	or	r17,r17,r3
1000d050:	0011883a 	mov	r8,zero
1000d054:	0025883a 	mov	r18,zero
1000d058:	888001cc 	andi	r2,r17,7
1000d05c:	103f8f1e 	bne	r2,zero,1000ce9c <__adddf3+0x144>
1000d060:	8822d0fa 	srli	r17,r17,3
1000d064:	4004977a 	slli	r2,r8,29
1000d068:	4014d0fa 	srli	r10,r8,3
1000d06c:	9007883a 	mov	r3,r18
1000d070:	8884b03a 	or	r2,r17,r2
1000d074:	1901ffe0 	cmpeqi	r4,r3,2047
1000d078:	2000191e 	bne	r4,zero,1000d0e0 <__adddf3+0x388>
1000d07c:	02000434 	movhi	r8,16
1000d080:	423fffc4 	addi	r8,r8,-1
1000d084:	5210703a 	and	r8,r10,r8
1000d088:	18c1ffcc 	andi	r3,r3,2047
1000d08c:	003f9806 	br	1000cef0 <__adddf3+0x198>
1000d090:	4b62b03a 	or	r17,r9,r13
1000d094:	8822c03a 	cmpne	r17,r17,zero
1000d098:	8ba3883a 	add	r17,r17,r14
1000d09c:	8b91803a 	cmpltu	r8,r17,r14
1000d0a0:	4291883a 	add	r8,r8,r10
1000d0a4:	4080202c 	andhi	r2,r8,128
1000d0a8:	103feb26 	beq	r2,zero,1000d058 <__adddf3+0x300>
1000d0ac:	94800044 	addi	r18,r18,1
1000d0b0:	9081ffe0 	cmpeqi	r2,r18,2047
1000d0b4:	10007426 	beq	r2,zero,1000d288 <__adddf3+0x530>
1000d0b8:	00c1ffc4 	movi	r3,2047
1000d0bc:	0011883a 	mov	r8,zero
1000d0c0:	0005883a 	mov	r2,zero
1000d0c4:	003f8a06 	br	1000cef0 <__adddf3+0x198>
1000d0c8:	500a977a 	slli	r5,r10,29
1000d0cc:	00c80034 	movhi	r3,8192
1000d0d0:	18ffffc4 	addi	r3,r3,-1
1000d0d4:	5014d0fa 	srli	r10,r10,3
1000d0d8:	20c4703a 	and	r2,r4,r3
1000d0dc:	1144b03a 	or	r2,r2,r5
1000d0e0:	1286b03a 	or	r3,r2,r10
1000d0e4:	18015426 	beq	r3,zero,1000d638 <__adddf3+0x8e0>
1000d0e8:	00c00434 	movhi	r3,16
1000d0ec:	18ffffc4 	addi	r3,r3,-1
1000d0f0:	52000234 	orhi	r8,r10,8
1000d0f4:	40d0703a 	and	r8,r8,r3
1000d0f8:	00c1ffc4 	movi	r3,2047
1000d0fc:	003f7c06 	br	1000cef0 <__adddf3+0x198>
1000d100:	8809883a 	mov	r4,r17
1000d104:	000f4440 	call	1000f444 <__clzsi2>
1000d108:	10c00604 	addi	r3,r2,24
1000d10c:	19000808 	cmpgei	r4,r3,32
1000d110:	203f4b26 	beq	r4,zero,1000ce40 <__adddf3+0xe8>
1000d114:	123ffe04 	addi	r8,r2,-8
1000d118:	8a10983a 	sll	r8,r17,r8
1000d11c:	0023883a 	mov	r17,zero
1000d120:	1cbf4e0e 	bge	r3,r18,1000ce5c <__adddf3+0x104>
1000d124:	00bfe034 	movhi	r2,65408
1000d128:	10bfffc4 	addi	r2,r2,-1
1000d12c:	90e5c83a 	sub	r18,r18,r3
1000d130:	4090703a 	and	r8,r8,r2
1000d134:	003f5706 	br	1000ce94 <__adddf3+0x13c>
1000d138:	18002226 	beq	r3,zero,1000d1c4 <__adddf3+0x46c>
1000d13c:	1487c83a 	sub	r3,r2,r18
1000d140:	90006e26 	beq	r18,zero,1000d2fc <__adddf3+0x5a4>
1000d144:	1101ffd8 	cmpnei	r4,r2,2047
1000d148:	2000e926 	beq	r4,zero,1000d4f0 <__adddf3+0x798>
1000d14c:	52802034 	orhi	r10,r10,128
1000d150:	19000e48 	cmpgei	r4,r3,57
1000d154:	2000b91e 	bne	r4,zero,1000d43c <__adddf3+0x6e4>
1000d158:	19000808 	cmpgei	r4,r3,32
1000d15c:	2001101e 	bne	r4,zero,1000d5a0 <__adddf3+0x848>
1000d160:	01000804 	movi	r4,32
1000d164:	20c9c83a 	sub	r4,r4,r3
1000d168:	5122983a 	sll	r17,r10,r4
1000d16c:	70cad83a 	srl	r5,r14,r3
1000d170:	7108983a 	sll	r4,r14,r4
1000d174:	50d4d83a 	srl	r10,r10,r3
1000d178:	8962b03a 	or	r17,r17,r5
1000d17c:	2008c03a 	cmpne	r4,r4,zero
1000d180:	8922b03a 	or	r17,r17,r4
1000d184:	4a93883a 	add	r9,r9,r10
1000d188:	8b63883a 	add	r17,r17,r13
1000d18c:	8b51803a 	cmpltu	r8,r17,r13
1000d190:	4251883a 	add	r8,r8,r9
1000d194:	1025883a 	mov	r18,r2
1000d198:	003fc206 	br	1000d0a4 <__adddf3+0x34c>
1000d19c:	4b62b03a 	or	r17,r9,r13
1000d1a0:	8822c03a 	cmpne	r17,r17,zero
1000d1a4:	003f1a06 	br	1000ce10 <__adddf3+0xb8>
1000d1a8:	500c977a 	slli	r6,r10,29
1000d1ac:	01480034 	movhi	r5,8192
1000d1b0:	297fffc4 	addi	r5,r5,-1
1000d1b4:	2144703a 	and	r2,r4,r5
1000d1b8:	5014d0fa 	srli	r10,r10,3
1000d1bc:	1184b03a 	or	r2,r2,r6
1000d1c0:	003fac06 	br	1000d074 <__adddf3+0x31c>
1000d1c4:	90800044 	addi	r2,r18,1
1000d1c8:	1141ff8c 	andi	r5,r2,2046
1000d1cc:	28005e1e 	bne	r5,zero,1000d348 <__adddf3+0x5f0>
1000d1d0:	5384b03a 	or	r2,r10,r14
1000d1d4:	9000a71e 	bne	r18,zero,1000d474 <__adddf3+0x71c>
1000d1d8:	1000e526 	beq	r2,zero,1000d570 <__adddf3+0x818>
1000d1dc:	4b44b03a 	or	r2,r9,r13
1000d1e0:	10008f26 	beq	r2,zero,1000d420 <__adddf3+0x6c8>
1000d1e4:	7363883a 	add	r17,r14,r13
1000d1e8:	5255883a 	add	r10,r10,r9
1000d1ec:	8b91803a 	cmpltu	r8,r17,r14
1000d1f0:	5211883a 	add	r8,r10,r8
1000d1f4:	4080202c 	andhi	r2,r8,128
1000d1f8:	103f9726 	beq	r2,zero,1000d058 <__adddf3+0x300>
1000d1fc:	00bfe034 	movhi	r2,65408
1000d200:	10bfffc4 	addi	r2,r2,-1
1000d204:	4090703a 	and	r8,r8,r2
1000d208:	04800044 	movi	r18,1
1000d20c:	003f9206 	br	1000d058 <__adddf3+0x300>
1000d210:	1101ffd8 	cmpnei	r4,r2,2047
1000d214:	20007a26 	beq	r4,zero,1000d400 <__adddf3+0x6a8>
1000d218:	52802034 	orhi	r10,r10,128
1000d21c:	19000e48 	cmpgei	r4,r3,57
1000d220:	20002e1e 	bne	r4,zero,1000d2dc <__adddf3+0x584>
1000d224:	19000808 	cmpgei	r4,r3,32
1000d228:	2000871e 	bne	r4,zero,1000d448 <__adddf3+0x6f0>
1000d22c:	01000804 	movi	r4,32
1000d230:	20c9c83a 	sub	r4,r4,r3
1000d234:	5122983a 	sll	r17,r10,r4
1000d238:	70cad83a 	srl	r5,r14,r3
1000d23c:	711c983a 	sll	r14,r14,r4
1000d240:	50d4d83a 	srl	r10,r10,r3
1000d244:	8962b03a 	or	r17,r17,r5
1000d248:	701cc03a 	cmpne	r14,r14,zero
1000d24c:	8ba2b03a 	or	r17,r17,r14
1000d250:	4a93c83a 	sub	r9,r9,r10
1000d254:	00002306 	br	1000d2e4 <__adddf3+0x58c>
1000d258:	7363c83a 	sub	r17,r14,r13
1000d25c:	5267c83a 	sub	r19,r10,r9
1000d260:	7451803a 	cmpltu	r8,r14,r17
1000d264:	9a27c83a 	sub	r19,r19,r8
1000d268:	9880202c 	andhi	r2,r19,128
1000d26c:	1000421e 	bne	r2,zero,1000d378 <__adddf3+0x620>
1000d270:	8cc4b03a 	or	r2,r17,r19
1000d274:	103eee1e 	bne	r2,zero,1000ce30 <__adddf3+0xd8>
1000d278:	0015883a 	mov	r10,zero
1000d27c:	0021883a 	mov	r16,zero
1000d280:	003f7e06 	br	1000d07c <__adddf3+0x324>
1000d284:	04800084 	movi	r18,2
1000d288:	00bfe034 	movhi	r2,65408
1000d28c:	10bfffc4 	addi	r2,r2,-1
1000d290:	8806d07a 	srli	r3,r17,1
1000d294:	4090703a 	and	r8,r8,r2
1000d298:	400497fa 	slli	r2,r8,31
1000d29c:	8c40004c 	andi	r17,r17,1
1000d2a0:	1c62b03a 	or	r17,r3,r17
1000d2a4:	4010d07a 	srli	r8,r8,1
1000d2a8:	1462b03a 	or	r17,r2,r17
1000d2ac:	003ef906 	br	1000ce94 <__adddf3+0x13c>
1000d2b0:	1c7ff804 	addi	r17,r3,-32
1000d2b4:	19000820 	cmpeqi	r4,r3,32
1000d2b8:	4c44d83a 	srl	r2,r9,r17
1000d2bc:	2000041e 	bne	r4,zero,1000d2d0 <__adddf3+0x578>
1000d2c0:	01001004 	movi	r4,64
1000d2c4:	20c7c83a 	sub	r3,r4,r3
1000d2c8:	48d2983a 	sll	r9,r9,r3
1000d2cc:	6a5ab03a 	or	r13,r13,r9
1000d2d0:	6822c03a 	cmpne	r17,r13,zero
1000d2d4:	88a2b03a 	or	r17,r17,r2
1000d2d8:	003ecd06 	br	1000ce10 <__adddf3+0xb8>
1000d2dc:	5394b03a 	or	r10,r10,r14
1000d2e0:	5022c03a 	cmpne	r17,r10,zero
1000d2e4:	6c63c83a 	sub	r17,r13,r17
1000d2e8:	6c51803a 	cmpltu	r8,r13,r17
1000d2ec:	4a11c83a 	sub	r8,r9,r8
1000d2f0:	3821883a 	mov	r16,r7
1000d2f4:	1025883a 	mov	r18,r2
1000d2f8:	003ec806 	br	1000ce1c <__adddf3+0xc4>
1000d2fc:	5388b03a 	or	r4,r10,r14
1000d300:	20008226 	beq	r4,zero,1000d50c <__adddf3+0x7b4>
1000d304:	193fffc4 	addi	r4,r3,-1
1000d308:	2000b026 	beq	r4,zero,1000d5cc <__adddf3+0x874>
1000d30c:	18c1ffd8 	cmpnei	r3,r3,2047
1000d310:	18007726 	beq	r3,zero,1000d4f0 <__adddf3+0x798>
1000d314:	2007883a 	mov	r3,r4
1000d318:	003f8d06 	br	1000d150 <__adddf3+0x3f8>
1000d31c:	00800804 	movi	r2,32
1000d320:	10c5c83a 	sub	r2,r2,r3
1000d324:	68c8d83a 	srl	r4,r13,r3
1000d328:	48a2983a 	sll	r17,r9,r2
1000d32c:	689a983a 	sll	r13,r13,r2
1000d330:	48c6d83a 	srl	r3,r9,r3
1000d334:	8922b03a 	or	r17,r17,r4
1000d338:	681ac03a 	cmpne	r13,r13,zero
1000d33c:	8b62b03a 	or	r17,r17,r13
1000d340:	50d5883a 	add	r10,r10,r3
1000d344:	003f5406 	br	1000d098 <__adddf3+0x340>
1000d348:	10c1ffe0 	cmpeqi	r3,r2,2047
1000d34c:	183f5a1e 	bne	r3,zero,1000d0b8 <__adddf3+0x360>
1000d350:	7351883a 	add	r8,r14,r13
1000d354:	4387803a 	cmpltu	r3,r8,r14
1000d358:	5255883a 	add	r10,r10,r9
1000d35c:	50c7883a 	add	r3,r10,r3
1000d360:	401ad07a 	srli	r13,r8,1
1000d364:	182297fa 	slli	r17,r3,31
1000d368:	1810d07a 	srli	r8,r3,1
1000d36c:	1025883a 	mov	r18,r2
1000d370:	8b62b03a 	or	r17,r17,r13
1000d374:	003f3806 	br	1000d058 <__adddf3+0x300>
1000d378:	6ba3c83a 	sub	r17,r13,r14
1000d37c:	4a93c83a 	sub	r9,r9,r10
1000d380:	6c51803a 	cmpltu	r8,r13,r17
1000d384:	4a27c83a 	sub	r19,r9,r8
1000d388:	3821883a 	mov	r16,r7
1000d38c:	003ea806 	br	1000ce30 <__adddf3+0xd8>
1000d390:	480a977a 	slli	r5,r9,29
1000d394:	01080034 	movhi	r4,8192
1000d398:	213fffc4 	addi	r4,r4,-1
1000d39c:	3104703a 	and	r2,r6,r4
1000d3a0:	4814d0fa 	srli	r10,r9,3
1000d3a4:	1144b03a 	or	r2,r2,r5
1000d3a8:	3821883a 	mov	r16,r7
1000d3ac:	003f3106 	br	1000d074 <__adddf3+0x31c>
1000d3b0:	28005d1e 	bne	r5,zero,1000d528 <__adddf3+0x7d0>
1000d3b4:	1000121e 	bne	r2,zero,1000d400 <__adddf3+0x6a8>
1000d3b8:	0021883a 	mov	r16,zero
1000d3bc:	4015883a 	mov	r10,r8
1000d3c0:	00bfffc4 	movi	r2,-1
1000d3c4:	003f4806 	br	1000d0e8 <__adddf3+0x390>
1000d3c8:	7363883a 	add	r17,r14,r13
1000d3cc:	5255883a 	add	r10,r10,r9
1000d3d0:	8b91803a 	cmpltu	r8,r17,r14
1000d3d4:	5211883a 	add	r8,r10,r8
1000d3d8:	4080202c 	andhi	r2,r8,128
1000d3dc:	103fa91e 	bne	r2,zero,1000d284 <__adddf3+0x52c>
1000d3e0:	04800044 	movi	r18,1
1000d3e4:	003f1c06 	br	1000d058 <__adddf3+0x300>
1000d3e8:	7363c83a 	sub	r17,r14,r13
1000d3ec:	5255c83a 	sub	r10,r10,r9
1000d3f0:	7451803a 	cmpltu	r8,r14,r17
1000d3f4:	5211c83a 	sub	r8,r10,r8
1000d3f8:	04800044 	movi	r18,1
1000d3fc:	003e8706 	br	1000ce1c <__adddf3+0xc4>
1000d400:	4806977a 	slli	r3,r9,29
1000d404:	00880034 	movhi	r2,8192
1000d408:	10bfffc4 	addi	r2,r2,-1
1000d40c:	3084703a 	and	r2,r6,r2
1000d410:	4814d0fa 	srli	r10,r9,3
1000d414:	10c4b03a 	or	r2,r2,r3
1000d418:	3821883a 	mov	r16,r7
1000d41c:	003f3006 	br	1000d0e0 <__adddf3+0x388>
1000d420:	500a977a 	slli	r5,r10,29
1000d424:	00880034 	movhi	r2,8192
1000d428:	10bfffc4 	addi	r2,r2,-1
1000d42c:	2084703a 	and	r2,r4,r2
1000d430:	5014d0fa 	srli	r10,r10,3
1000d434:	1144b03a 	or	r2,r2,r5
1000d438:	003f1006 	br	1000d07c <__adddf3+0x324>
1000d43c:	5394b03a 	or	r10,r10,r14
1000d440:	5022c03a 	cmpne	r17,r10,zero
1000d444:	003f5006 	br	1000d188 <__adddf3+0x430>
1000d448:	1c7ff804 	addi	r17,r3,-32
1000d44c:	19400820 	cmpeqi	r5,r3,32
1000d450:	5448d83a 	srl	r4,r10,r17
1000d454:	2800041e 	bne	r5,zero,1000d468 <__adddf3+0x710>
1000d458:	01401004 	movi	r5,64
1000d45c:	28c7c83a 	sub	r3,r5,r3
1000d460:	50d4983a 	sll	r10,r10,r3
1000d464:	729cb03a 	or	r14,r14,r10
1000d468:	7022c03a 	cmpne	r17,r14,zero
1000d46c:	8922b03a 	or	r17,r17,r4
1000d470:	003f9c06 	br	1000d2e4 <__adddf3+0x58c>
1000d474:	10005a1e 	bne	r2,zero,1000d5e0 <__adddf3+0x888>
1000d478:	4804977a 	slli	r2,r9,29
1000d47c:	00c80034 	movhi	r3,8192
1000d480:	18ffffc4 	addi	r3,r3,-1
1000d484:	30cc703a 	and	r6,r6,r3
1000d488:	4814d0fa 	srli	r10,r9,3
1000d48c:	1184b03a 	or	r2,r2,r6
1000d490:	003f1306 	br	1000d0e0 <__adddf3+0x388>
1000d494:	6ba3c83a 	sub	r17,r13,r14
1000d498:	4a95c83a 	sub	r10,r9,r10
1000d49c:	6c51803a 	cmpltu	r8,r13,r17
1000d4a0:	5211c83a 	sub	r8,r10,r8
1000d4a4:	3821883a 	mov	r16,r7
1000d4a8:	04800044 	movi	r18,1
1000d4ac:	003e5b06 	br	1000ce1c <__adddf3+0xc4>
1000d4b0:	103f7126 	beq	r2,zero,1000d278 <__adddf3+0x520>
1000d4b4:	4808977a 	slli	r4,r9,29
1000d4b8:	00880034 	movhi	r2,8192
1000d4bc:	10bfffc4 	addi	r2,r2,-1
1000d4c0:	3084703a 	and	r2,r6,r2
1000d4c4:	4814d0fa 	srli	r10,r9,3
1000d4c8:	1104b03a 	or	r2,r2,r4
1000d4cc:	3821883a 	mov	r16,r7
1000d4d0:	003eea06 	br	1000d07c <__adddf3+0x324>
1000d4d4:	5006977a 	slli	r3,r10,29
1000d4d8:	00880034 	movhi	r2,8192
1000d4dc:	10bfffc4 	addi	r2,r2,-1
1000d4e0:	2084703a 	and	r2,r4,r2
1000d4e4:	5014d0fa 	srli	r10,r10,3
1000d4e8:	10c4b03a 	or	r2,r2,r3
1000d4ec:	003efc06 	br	1000d0e0 <__adddf3+0x388>
1000d4f0:	4806977a 	slli	r3,r9,29
1000d4f4:	00880034 	movhi	r2,8192
1000d4f8:	10bfffc4 	addi	r2,r2,-1
1000d4fc:	3084703a 	and	r2,r6,r2
1000d500:	4814d0fa 	srli	r10,r9,3
1000d504:	10c4b03a 	or	r2,r2,r3
1000d508:	003ef506 	br	1000d0e0 <__adddf3+0x388>
1000d50c:	4808977a 	slli	r4,r9,29
1000d510:	00880034 	movhi	r2,8192
1000d514:	10bfffc4 	addi	r2,r2,-1
1000d518:	3084703a 	and	r2,r6,r2
1000d51c:	4814d0fa 	srli	r10,r9,3
1000d520:	1104b03a 	or	r2,r2,r4
1000d524:	003ed306 	br	1000d074 <__adddf3+0x31c>
1000d528:	500a977a 	slli	r5,r10,29
1000d52c:	5014d0fa 	srli	r10,r10,3
1000d530:	10001626 	beq	r2,zero,1000d58c <__adddf3+0x834>
1000d534:	00c80034 	movhi	r3,8192
1000d538:	18ffffc4 	addi	r3,r3,-1
1000d53c:	20c4703a 	and	r2,r4,r3
1000d540:	5100022c 	andhi	r4,r10,8
1000d544:	1144b03a 	or	r2,r2,r5
1000d548:	203ee526 	beq	r4,zero,1000d0e0 <__adddf3+0x388>
1000d54c:	4808d0fa 	srli	r4,r9,3
1000d550:	2140022c 	andhi	r5,r4,8
1000d554:	283ee21e 	bne	r5,zero,1000d0e0 <__adddf3+0x388>
1000d558:	4812977a 	slli	r9,r9,29
1000d55c:	30c4703a 	and	r2,r6,r3
1000d560:	3821883a 	mov	r16,r7
1000d564:	1244b03a 	or	r2,r2,r9
1000d568:	2015883a 	mov	r10,r4
1000d56c:	003edc06 	br	1000d0e0 <__adddf3+0x388>
1000d570:	4804977a 	slli	r2,r9,29
1000d574:	01080034 	movhi	r4,8192
1000d578:	213fffc4 	addi	r4,r4,-1
1000d57c:	310c703a 	and	r6,r6,r4
1000d580:	4814d0fa 	srli	r10,r9,3
1000d584:	1184b03a 	or	r2,r2,r6
1000d588:	003ebc06 	br	1000d07c <__adddf3+0x324>
1000d58c:	00880034 	movhi	r2,8192
1000d590:	10bfffc4 	addi	r2,r2,-1
1000d594:	2084703a 	and	r2,r4,r2
1000d598:	1144b03a 	or	r2,r2,r5
1000d59c:	003ed006 	br	1000d0e0 <__adddf3+0x388>
1000d5a0:	193ff804 	addi	r4,r3,-32
1000d5a4:	19400820 	cmpeqi	r5,r3,32
1000d5a8:	5108d83a 	srl	r4,r10,r4
1000d5ac:	2800041e 	bne	r5,zero,1000d5c0 <__adddf3+0x868>
1000d5b0:	01401004 	movi	r5,64
1000d5b4:	28c7c83a 	sub	r3,r5,r3
1000d5b8:	50d4983a 	sll	r10,r10,r3
1000d5bc:	729cb03a 	or	r14,r14,r10
1000d5c0:	7022c03a 	cmpne	r17,r14,zero
1000d5c4:	8922b03a 	or	r17,r17,r4
1000d5c8:	003eef06 	br	1000d188 <__adddf3+0x430>
1000d5cc:	7363883a 	add	r17,r14,r13
1000d5d0:	5255883a 	add	r10,r10,r9
1000d5d4:	8b51803a 	cmpltu	r8,r17,r13
1000d5d8:	5211883a 	add	r8,r10,r8
1000d5dc:	003f7e06 	br	1000d3d8 <__adddf3+0x680>
1000d5e0:	4b50b03a 	or	r8,r9,r13
1000d5e4:	500a977a 	slli	r5,r10,29
1000d5e8:	5014d0fa 	srli	r10,r10,3
1000d5ec:	403fe726 	beq	r8,zero,1000d58c <__adddf3+0x834>
1000d5f0:	00c80034 	movhi	r3,8192
1000d5f4:	18ffffc4 	addi	r3,r3,-1
1000d5f8:	20c4703a 	and	r2,r4,r3
1000d5fc:	5100022c 	andhi	r4,r10,8
1000d600:	1144b03a 	or	r2,r2,r5
1000d604:	203eb626 	beq	r4,zero,1000d0e0 <__adddf3+0x388>
1000d608:	4808d0fa 	srli	r4,r9,3
1000d60c:	2140022c 	andhi	r5,r4,8
1000d610:	283eb31e 	bne	r5,zero,1000d0e0 <__adddf3+0x388>
1000d614:	4804977a 	slli	r2,r9,29
1000d618:	30cc703a 	and	r6,r6,r3
1000d61c:	3821883a 	mov	r16,r7
1000d620:	3084b03a 	or	r2,r6,r2
1000d624:	2015883a 	mov	r10,r4
1000d628:	003ead06 	br	1000d0e0 <__adddf3+0x388>
1000d62c:	8a04b03a 	or	r2,r17,r8
1000d630:	103f1126 	beq	r2,zero,1000d278 <__adddf3+0x520>
1000d634:	003e8806 	br	1000d058 <__adddf3+0x300>
1000d638:	0005883a 	mov	r2,zero
1000d63c:	00c1ffc4 	movi	r3,2047
1000d640:	0011883a 	mov	r8,zero
1000d644:	003e2a06 	br	1000cef0 <__adddf3+0x198>

1000d648 <__divdf3>:
1000d648:	2810d53a 	srli	r8,r5,20
1000d64c:	defff004 	addi	sp,sp,-64
1000d650:	dc000615 	stw	r16,24(sp)
1000d654:	04000434 	movhi	r16,16
1000d658:	df000e15 	stw	fp,56(sp)
1000d65c:	ddc00d15 	stw	r23,52(sp)
1000d660:	dd800c15 	stw	r22,48(sp)
1000d664:	dd000a15 	stw	r20,40(sp)
1000d668:	843fffc4 	addi	r16,r16,-1
1000d66c:	dfc00f15 	stw	ra,60(sp)
1000d670:	dd400b15 	stw	r21,44(sp)
1000d674:	dcc00915 	stw	r19,36(sp)
1000d678:	dc800815 	stw	r18,32(sp)
1000d67c:	dc400715 	stw	r17,28(sp)
1000d680:	4201ffcc 	andi	r8,r8,2047
1000d684:	282ed7fa 	srli	r23,r5,31
1000d688:	3039883a 	mov	fp,r6
1000d68c:	382d883a 	mov	r22,r7
1000d690:	2029883a 	mov	r20,r4
1000d694:	2c20703a 	and	r16,r5,r16
1000d698:	40006826 	beq	r8,zero,1000d83c <__divdf3+0x1f4>
1000d69c:	4081ffe0 	cmpeqi	r2,r8,2047
1000d6a0:	1000791e 	bne	r2,zero,1000d888 <__divdf3+0x240>
1000d6a4:	2026d77a 	srli	r19,r4,29
1000d6a8:	800a90fa 	slli	r5,r16,3
1000d6ac:	202890fa 	slli	r20,r4,3
1000d6b0:	44bf0044 	addi	r18,r8,-1023
1000d6b4:	994ab03a 	or	r5,r19,r5
1000d6b8:	2cc02034 	orhi	r19,r5,128
1000d6bc:	0021883a 	mov	r16,zero
1000d6c0:	0023883a 	mov	r17,zero
1000d6c4:	b010d53a 	srli	r8,r22,20
1000d6c8:	00c00434 	movhi	r3,16
1000d6cc:	18ffffc4 	addi	r3,r3,-1
1000d6d0:	4201ffcc 	andi	r8,r8,2047
1000d6d4:	b02ad7fa 	srli	r21,r22,31
1000d6d8:	b0ec703a 	and	r22,r22,r3
1000d6dc:	40004626 	beq	r8,zero,1000d7f8 <__divdf3+0x1b0>
1000d6e0:	4081ffe0 	cmpeqi	r2,r8,2047
1000d6e4:	10006f1e 	bne	r2,zero,1000d8a4 <__divdf3+0x25c>
1000d6e8:	b00690fa 	slli	r3,r22,3
1000d6ec:	e004d77a 	srli	r2,fp,29
1000d6f0:	e01290fa 	slli	r9,fp,3
1000d6f4:	423f0044 	addi	r8,r8,-1023
1000d6f8:	10c6b03a 	or	r3,r2,r3
1000d6fc:	1d802034 	orhi	r22,r3,128
1000d700:	9225c83a 	sub	r18,r18,r8
1000d704:	0007883a 	mov	r3,zero
1000d708:	80800428 	cmpgeui	r2,r16,16
1000d70c:	bd4ef03a 	xor	r7,r23,r21
1000d710:	1000a71e 	bne	r2,zero,1000d9b0 <__divdf3+0x368>
1000d714:	800c90ba 	slli	r6,r16,2
1000d718:	00840074 	movhi	r2,4097
1000d71c:	3085883a 	add	r2,r6,r2
1000d720:	10b5ca17 	ldw	r2,-10456(r2)
1000d724:	1000683a 	jmp	r2
1000d728:	1000d9b0 	cmpltui	zero,r2,870
1000d72c:	1000d7d4 	ori	zero,r2,863
1000d730:	1000d784 	addi	zero,r2,862
1000d734:	1000d7e4 	muli	zero,r2,863
1000d738:	1000d784 	addi	zero,r2,862
1000d73c:	1000d954 	ori	zero,r2,869
1000d740:	1000d784 	addi	zero,r2,862
1000d744:	1000d7e4 	muli	zero,r2,863
1000d748:	1000d7d4 	ori	zero,r2,863
1000d74c:	1000d7d4 	ori	zero,r2,863
1000d750:	1000d954 	ori	zero,r2,869
1000d754:	1000d7e4 	muli	zero,r2,863
1000d758:	1000d768 	cmpgeui	zero,r2,861
1000d75c:	1000d768 	cmpgeui	zero,r2,861
1000d760:	1000d768 	cmpgeui	zero,r2,861
1000d764:	1000d96c 	andhi	zero,r2,869
1000d768:	b80f883a 	mov	r7,r23
1000d76c:	888000a0 	cmpeqi	r2,r17,2
1000d770:	1000181e 	bne	r2,zero,1000d7d4 <__divdf3+0x18c>
1000d774:	888000e0 	cmpeqi	r2,r17,3
1000d778:	1001f61e 	bne	r2,zero,1000df54 <__divdf3+0x90c>
1000d77c:	88800060 	cmpeqi	r2,r17,1
1000d780:	10006126 	beq	r2,zero,1000d908 <__divdf3+0x2c0>
1000d784:	0007883a 	mov	r3,zero
1000d788:	000b883a 	mov	r5,zero
1000d78c:	0029883a 	mov	r20,zero
1000d790:	1806953a 	slli	r3,r3,20
1000d794:	380e97fa 	slli	r7,r7,31
1000d798:	a005883a 	mov	r2,r20
1000d79c:	1946b03a 	or	r3,r3,r5
1000d7a0:	19c6b03a 	or	r3,r3,r7
1000d7a4:	dfc00f17 	ldw	ra,60(sp)
1000d7a8:	df000e17 	ldw	fp,56(sp)
1000d7ac:	ddc00d17 	ldw	r23,52(sp)
1000d7b0:	dd800c17 	ldw	r22,48(sp)
1000d7b4:	dd400b17 	ldw	r21,44(sp)
1000d7b8:	dd000a17 	ldw	r20,40(sp)
1000d7bc:	dcc00917 	ldw	r19,36(sp)
1000d7c0:	dc800817 	ldw	r18,32(sp)
1000d7c4:	dc400717 	ldw	r17,28(sp)
1000d7c8:	dc000617 	ldw	r16,24(sp)
1000d7cc:	dec01004 	addi	sp,sp,64
1000d7d0:	f800283a 	ret
1000d7d4:	00c1ffc4 	movi	r3,2047
1000d7d8:	000b883a 	mov	r5,zero
1000d7dc:	0029883a 	mov	r20,zero
1000d7e0:	003feb06 	br	1000d790 <__divdf3+0x148>
1000d7e4:	a80f883a 	mov	r7,r21
1000d7e8:	b027883a 	mov	r19,r22
1000d7ec:	4829883a 	mov	r20,r9
1000d7f0:	1823883a 	mov	r17,r3
1000d7f4:	003fdd06 	br	1000d76c <__divdf3+0x124>
1000d7f8:	b712b03a 	or	r9,r22,fp
1000d7fc:	48003e26 	beq	r9,zero,1000d8f8 <__divdf3+0x2b0>
1000d800:	b0017726 	beq	r22,zero,1000dde0 <__divdf3+0x798>
1000d804:	b009883a 	mov	r4,r22
1000d808:	000f4440 	call	1000f444 <__clzsi2>
1000d80c:	117ffd44 	addi	r5,r2,-11
1000d810:	01000744 	movi	r4,29
1000d814:	127ffe04 	addi	r9,r2,-8
1000d818:	2149c83a 	sub	r4,r4,r5
1000d81c:	b246983a 	sll	r3,r22,r9
1000d820:	e108d83a 	srl	r4,fp,r4
1000d824:	e252983a 	sll	r9,fp,r9
1000d828:	20ecb03a 	or	r22,r4,r3
1000d82c:	1491883a 	add	r8,r2,r18
1000d830:	4480fcc4 	addi	r18,r8,1011
1000d834:	0007883a 	mov	r3,zero
1000d838:	003fb306 	br	1000d708 <__divdf3+0xc0>
1000d83c:	8126b03a 	or	r19,r16,r4
1000d840:	2023883a 	mov	r17,r4
1000d844:	98002726 	beq	r19,zero,1000d8e4 <__divdf3+0x29c>
1000d848:	80017026 	beq	r16,zero,1000de0c <__divdf3+0x7c4>
1000d84c:	8009883a 	mov	r4,r16
1000d850:	000f4440 	call	1000f444 <__clzsi2>
1000d854:	113ffd44 	addi	r4,r2,-11
1000d858:	00c00744 	movi	r3,29
1000d85c:	14fffe04 	addi	r19,r2,-8
1000d860:	1907c83a 	sub	r3,r3,r4
1000d864:	84ca983a 	sll	r5,r16,r19
1000d868:	88c6d83a 	srl	r3,r17,r3
1000d86c:	8ce8983a 	sll	r20,r17,r19
1000d870:	1966b03a 	or	r19,r3,r5
1000d874:	023f0344 	movi	r8,-1011
1000d878:	40a5c83a 	sub	r18,r8,r2
1000d87c:	0021883a 	mov	r16,zero
1000d880:	0023883a 	mov	r17,zero
1000d884:	003f8f06 	br	1000d6c4 <__divdf3+0x7c>
1000d888:	8126b03a 	or	r19,r16,r4
1000d88c:	9800101e 	bne	r19,zero,1000d8d0 <__divdf3+0x288>
1000d890:	0029883a 	mov	r20,zero
1000d894:	04000204 	movi	r16,8
1000d898:	0481ffc4 	movi	r18,2047
1000d89c:	04400084 	movi	r17,2
1000d8a0:	003f8806 	br	1000d6c4 <__divdf3+0x7c>
1000d8a4:	b712b03a 	or	r9,r22,fp
1000d8a8:	94be0044 	addi	r18,r18,-2047
1000d8ac:	4800041e 	bne	r9,zero,1000d8c0 <__divdf3+0x278>
1000d8b0:	84000094 	ori	r16,r16,2
1000d8b4:	002d883a 	mov	r22,zero
1000d8b8:	00c00084 	movi	r3,2
1000d8bc:	003f9206 	br	1000d708 <__divdf3+0xc0>
1000d8c0:	840000d4 	ori	r16,r16,3
1000d8c4:	e013883a 	mov	r9,fp
1000d8c8:	00c000c4 	movi	r3,3
1000d8cc:	003f8e06 	br	1000d708 <__divdf3+0xc0>
1000d8d0:	8027883a 	mov	r19,r16
1000d8d4:	0481ffc4 	movi	r18,2047
1000d8d8:	04000304 	movi	r16,12
1000d8dc:	044000c4 	movi	r17,3
1000d8e0:	003f7806 	br	1000d6c4 <__divdf3+0x7c>
1000d8e4:	0029883a 	mov	r20,zero
1000d8e8:	04000104 	movi	r16,4
1000d8ec:	0025883a 	mov	r18,zero
1000d8f0:	04400044 	movi	r17,1
1000d8f4:	003f7306 	br	1000d6c4 <__divdf3+0x7c>
1000d8f8:	84000054 	ori	r16,r16,1
1000d8fc:	002d883a 	mov	r22,zero
1000d900:	00c00044 	movi	r3,1
1000d904:	003f8006 	br	1000d708 <__divdf3+0xc0>
1000d908:	9440ffc4 	addi	r17,r18,1023
1000d90c:	0441050e 	bge	zero,r17,1000dd24 <__divdf3+0x6dc>
1000d910:	a08001cc 	andi	r2,r20,7
1000d914:	10016c1e 	bne	r2,zero,1000dec8 <__divdf3+0x880>
1000d918:	a008d0fa 	srli	r4,r20,3
1000d91c:	9880402c 	andhi	r2,r19,256
1000d920:	10000426 	beq	r2,zero,1000d934 <__divdf3+0x2ec>
1000d924:	00bfc034 	movhi	r2,65280
1000d928:	10bfffc4 	addi	r2,r2,-1
1000d92c:	98a6703a 	and	r19,r19,r2
1000d930:	94410004 	addi	r17,r18,1024
1000d934:	8881ffc8 	cmpgei	r2,r17,2047
1000d938:	103fa61e 	bne	r2,zero,1000d7d4 <__divdf3+0x18c>
1000d93c:	9828977a 	slli	r20,r19,29
1000d940:	980a927a 	slli	r5,r19,9
1000d944:	88c1ffcc 	andi	r3,r17,2047
1000d948:	a128b03a 	or	r20,r20,r4
1000d94c:	280ad33a 	srli	r5,r5,12
1000d950:	003f8f06 	br	1000d790 <__divdf3+0x148>
1000d954:	01400434 	movhi	r5,16
1000d958:	000f883a 	mov	r7,zero
1000d95c:	297fffc4 	addi	r5,r5,-1
1000d960:	053fffc4 	movi	r20,-1
1000d964:	00c1ffc4 	movi	r3,2047
1000d968:	003f8906 	br	1000d790 <__divdf3+0x148>
1000d96c:	9880022c 	andhi	r2,r19,8
1000d970:	10000926 	beq	r2,zero,1000d998 <__divdf3+0x350>
1000d974:	b080022c 	andhi	r2,r22,8
1000d978:	1000071e 	bne	r2,zero,1000d998 <__divdf3+0x350>
1000d97c:	00800434 	movhi	r2,16
1000d980:	b1400234 	orhi	r5,r22,8
1000d984:	10bfffc4 	addi	r2,r2,-1
1000d988:	288a703a 	and	r5,r5,r2
1000d98c:	a80f883a 	mov	r7,r21
1000d990:	4829883a 	mov	r20,r9
1000d994:	003ff306 	br	1000d964 <__divdf3+0x31c>
1000d998:	00800434 	movhi	r2,16
1000d99c:	99400234 	orhi	r5,r19,8
1000d9a0:	10bfffc4 	addi	r2,r2,-1
1000d9a4:	288a703a 	and	r5,r5,r2
1000d9a8:	b80f883a 	mov	r7,r23
1000d9ac:	003fed06 	br	1000d964 <__divdf3+0x31c>
1000d9b0:	b4c10536 	bltu	r22,r19,1000ddc8 <__divdf3+0x780>
1000d9b4:	b4c10326 	beq	r22,r19,1000ddc4 <__divdf3+0x77c>
1000d9b8:	94bfffc4 	addi	r18,r18,-1
1000d9bc:	a039883a 	mov	fp,r20
1000d9c0:	9821883a 	mov	r16,r19
1000d9c4:	0023883a 	mov	r17,zero
1000d9c8:	b006923a 	slli	r3,r22,8
1000d9cc:	482cd63a 	srli	r22,r9,24
1000d9d0:	8009883a 	mov	r4,r16
1000d9d4:	182ed43a 	srli	r23,r3,16
1000d9d8:	b0ecb03a 	or	r22,r22,r3
1000d9dc:	d9c00015 	stw	r7,0(sp)
1000d9e0:	b80b883a 	mov	r5,r23
1000d9e4:	482a923a 	slli	r21,r9,8
1000d9e8:	b53fffcc 	andi	r20,r22,65535
1000d9ec:	000cc700 	call	1000cc70 <__udivsi3>
1000d9f0:	100b883a 	mov	r5,r2
1000d9f4:	a009883a 	mov	r4,r20
1000d9f8:	1027883a 	mov	r19,r2
1000d9fc:	000cd300 	call	1000cd30 <__mulsi3>
1000da00:	8009883a 	mov	r4,r16
1000da04:	b80b883a 	mov	r5,r23
1000da08:	1021883a 	mov	r16,r2
1000da0c:	000ccd40 	call	1000ccd4 <__umodsi3>
1000da10:	1004943a 	slli	r2,r2,16
1000da14:	e008d43a 	srli	r4,fp,16
1000da18:	d9c00017 	ldw	r7,0(sp)
1000da1c:	2088b03a 	or	r4,r4,r2
1000da20:	2400042e 	bgeu	r4,r16,1000da34 <__divdf3+0x3ec>
1000da24:	2589883a 	add	r4,r4,r22
1000da28:	98bfffc4 	addi	r2,r19,-1
1000da2c:	2581082e 	bgeu	r4,r22,1000de50 <__divdf3+0x808>
1000da30:	1027883a 	mov	r19,r2
1000da34:	2421c83a 	sub	r16,r4,r16
1000da38:	b80b883a 	mov	r5,r23
1000da3c:	8009883a 	mov	r4,r16
1000da40:	d9c00215 	stw	r7,8(sp)
1000da44:	000cc700 	call	1000cc70 <__udivsi3>
1000da48:	100b883a 	mov	r5,r2
1000da4c:	a009883a 	mov	r4,r20
1000da50:	d8800115 	stw	r2,4(sp)
1000da54:	000cd300 	call	1000cd30 <__mulsi3>
1000da58:	b80b883a 	mov	r5,r23
1000da5c:	8009883a 	mov	r4,r16
1000da60:	d8800015 	stw	r2,0(sp)
1000da64:	000ccd40 	call	1000ccd4 <__umodsi3>
1000da68:	100c943a 	slli	r6,r2,16
1000da6c:	d8c00017 	ldw	r3,0(sp)
1000da70:	e73fffcc 	andi	fp,fp,65535
1000da74:	e18cb03a 	or	r6,fp,r6
1000da78:	da000117 	ldw	r8,4(sp)
1000da7c:	d9c00217 	ldw	r7,8(sp)
1000da80:	30c0042e 	bgeu	r6,r3,1000da94 <__divdf3+0x44c>
1000da84:	358d883a 	add	r6,r6,r22
1000da88:	40bfffc4 	addi	r2,r8,-1
1000da8c:	3580ec2e 	bgeu	r6,r22,1000de40 <__divdf3+0x7f8>
1000da90:	1011883a 	mov	r8,r2
1000da94:	9826943a 	slli	r19,r19,16
1000da98:	af3fffcc 	andi	fp,r21,65535
1000da9c:	30c7c83a 	sub	r3,r6,r3
1000daa0:	9a26b03a 	or	r19,r19,r8
1000daa4:	9810d43a 	srli	r8,r19,16
1000daa8:	9abfffcc 	andi	r10,r19,65535
1000daac:	5009883a 	mov	r4,r10
1000dab0:	e00b883a 	mov	r5,fp
1000dab4:	d9c00515 	stw	r7,20(sp)
1000dab8:	d8c00315 	stw	r3,12(sp)
1000dabc:	da800415 	stw	r10,16(sp)
1000dac0:	da000015 	stw	r8,0(sp)
1000dac4:	000cd300 	call	1000cd30 <__mulsi3>
1000dac8:	da000017 	ldw	r8,0(sp)
1000dacc:	e00b883a 	mov	r5,fp
1000dad0:	d8800215 	stw	r2,8(sp)
1000dad4:	4009883a 	mov	r4,r8
1000dad8:	000cd300 	call	1000cd30 <__mulsi3>
1000dadc:	da000017 	ldw	r8,0(sp)
1000dae0:	a820d43a 	srli	r16,r21,16
1000dae4:	d8800115 	stw	r2,4(sp)
1000dae8:	4009883a 	mov	r4,r8
1000daec:	800b883a 	mov	r5,r16
1000daf0:	000cd300 	call	1000cd30 <__mulsi3>
1000daf4:	da800417 	ldw	r10,16(sp)
1000daf8:	8009883a 	mov	r4,r16
1000dafc:	d8800015 	stw	r2,0(sp)
1000db00:	500b883a 	mov	r5,r10
1000db04:	000cd300 	call	1000cd30 <__mulsi3>
1000db08:	d9800217 	ldw	r6,8(sp)
1000db0c:	da000117 	ldw	r8,4(sp)
1000db10:	da400017 	ldw	r9,0(sp)
1000db14:	3008d43a 	srli	r4,r6,16
1000db18:	1205883a 	add	r2,r2,r8
1000db1c:	d8c00317 	ldw	r3,12(sp)
1000db20:	2089883a 	add	r4,r4,r2
1000db24:	d9c00517 	ldw	r7,20(sp)
1000db28:	2200022e 	bgeu	r4,r8,1000db34 <__divdf3+0x4ec>
1000db2c:	00800074 	movhi	r2,1
1000db30:	4893883a 	add	r9,r9,r2
1000db34:	200ad43a 	srli	r5,r4,16
1000db38:	2008943a 	slli	r4,r4,16
1000db3c:	31bfffcc 	andi	r6,r6,65535
1000db40:	2a4b883a 	add	r5,r5,r9
1000db44:	218d883a 	add	r6,r4,r6
1000db48:	19409436 	bltu	r3,r5,1000dd9c <__divdf3+0x754>
1000db4c:	19409226 	beq	r3,r5,1000dd98 <__divdf3+0x750>
1000db50:	898dc83a 	sub	r6,r17,r6
1000db54:	89a3803a 	cmpltu	r17,r17,r6
1000db58:	1947c83a 	sub	r3,r3,r5
1000db5c:	1c47c83a 	sub	r3,r3,r17
1000db60:	9440ffc4 	addi	r17,r18,1023
1000db64:	b0c0d326 	beq	r22,r3,1000deb4 <__divdf3+0x86c>
1000db68:	1809883a 	mov	r4,r3
1000db6c:	b80b883a 	mov	r5,r23
1000db70:	d9800315 	stw	r6,12(sp)
1000db74:	d9c00215 	stw	r7,8(sp)
1000db78:	d8c00015 	stw	r3,0(sp)
1000db7c:	000cc700 	call	1000cc70 <__udivsi3>
1000db80:	100b883a 	mov	r5,r2
1000db84:	a009883a 	mov	r4,r20
1000db88:	d8800115 	stw	r2,4(sp)
1000db8c:	000cd300 	call	1000cd30 <__mulsi3>
1000db90:	d8c00017 	ldw	r3,0(sp)
1000db94:	b80b883a 	mov	r5,r23
1000db98:	d8800015 	stw	r2,0(sp)
1000db9c:	1809883a 	mov	r4,r3
1000dba0:	000ccd40 	call	1000ccd4 <__umodsi3>
1000dba4:	d9800317 	ldw	r6,12(sp)
1000dba8:	1006943a 	slli	r3,r2,16
1000dbac:	da400017 	ldw	r9,0(sp)
1000dbb0:	3008d43a 	srli	r4,r6,16
1000dbb4:	da000117 	ldw	r8,4(sp)
1000dbb8:	d9c00217 	ldw	r7,8(sp)
1000dbbc:	20c6b03a 	or	r3,r4,r3
1000dbc0:	1a40062e 	bgeu	r3,r9,1000dbdc <__divdf3+0x594>
1000dbc4:	1d87883a 	add	r3,r3,r22
1000dbc8:	40bfffc4 	addi	r2,r8,-1
1000dbcc:	1d80c836 	bltu	r3,r22,1000def0 <__divdf3+0x8a8>
1000dbd0:	1a40c72e 	bgeu	r3,r9,1000def0 <__divdf3+0x8a8>
1000dbd4:	423fff84 	addi	r8,r8,-2
1000dbd8:	1d87883a 	add	r3,r3,r22
1000dbdc:	1a47c83a 	sub	r3,r3,r9
1000dbe0:	1809883a 	mov	r4,r3
1000dbe4:	b80b883a 	mov	r5,r23
1000dbe8:	d9800415 	stw	r6,16(sp)
1000dbec:	d9c00315 	stw	r7,12(sp)
1000dbf0:	da000215 	stw	r8,8(sp)
1000dbf4:	d8c00115 	stw	r3,4(sp)
1000dbf8:	000cc700 	call	1000cc70 <__udivsi3>
1000dbfc:	100b883a 	mov	r5,r2
1000dc00:	a009883a 	mov	r4,r20
1000dc04:	d8800015 	stw	r2,0(sp)
1000dc08:	000cd300 	call	1000cd30 <__mulsi3>
1000dc0c:	d8c00117 	ldw	r3,4(sp)
1000dc10:	b80b883a 	mov	r5,r23
1000dc14:	102f883a 	mov	r23,r2
1000dc18:	1809883a 	mov	r4,r3
1000dc1c:	000ccd40 	call	1000ccd4 <__umodsi3>
1000dc20:	d9800417 	ldw	r6,16(sp)
1000dc24:	1004943a 	slli	r2,r2,16
1000dc28:	da400017 	ldw	r9,0(sp)
1000dc2c:	31bfffcc 	andi	r6,r6,65535
1000dc30:	308cb03a 	or	r6,r6,r2
1000dc34:	da000217 	ldw	r8,8(sp)
1000dc38:	d9c00317 	ldw	r7,12(sp)
1000dc3c:	35c0062e 	bgeu	r6,r23,1000dc58 <__divdf3+0x610>
1000dc40:	358d883a 	add	r6,r6,r22
1000dc44:	48bfffc4 	addi	r2,r9,-1
1000dc48:	3580a736 	bltu	r6,r22,1000dee8 <__divdf3+0x8a0>
1000dc4c:	35c0a62e 	bgeu	r6,r23,1000dee8 <__divdf3+0x8a0>
1000dc50:	4a7fff84 	addi	r9,r9,-2
1000dc54:	358d883a 	add	r6,r6,r22
1000dc58:	4028943a 	slli	r20,r8,16
1000dc5c:	35d5c83a 	sub	r10,r6,r23
1000dc60:	e009883a 	mov	r4,fp
1000dc64:	a268b03a 	or	r20,r20,r9
1000dc68:	a23fffcc 	andi	r8,r20,65535
1000dc6c:	a02ed43a 	srli	r23,r20,16
1000dc70:	400b883a 	mov	r5,r8
1000dc74:	d9c00315 	stw	r7,12(sp)
1000dc78:	da800215 	stw	r10,8(sp)
1000dc7c:	da000115 	stw	r8,4(sp)
1000dc80:	000cd300 	call	1000cd30 <__mulsi3>
1000dc84:	e00b883a 	mov	r5,fp
1000dc88:	b809883a 	mov	r4,r23
1000dc8c:	1039883a 	mov	fp,r2
1000dc90:	000cd300 	call	1000cd30 <__mulsi3>
1000dc94:	8009883a 	mov	r4,r16
1000dc98:	b80b883a 	mov	r5,r23
1000dc9c:	d8800015 	stw	r2,0(sp)
1000dca0:	000cd300 	call	1000cd30 <__mulsi3>
1000dca4:	da000117 	ldw	r8,4(sp)
1000dca8:	8009883a 	mov	r4,r16
1000dcac:	1021883a 	mov	r16,r2
1000dcb0:	400b883a 	mov	r5,r8
1000dcb4:	000cd300 	call	1000cd30 <__mulsi3>
1000dcb8:	d9800017 	ldw	r6,0(sp)
1000dcbc:	e006d43a 	srli	r3,fp,16
1000dcc0:	da800217 	ldw	r10,8(sp)
1000dcc4:	1185883a 	add	r2,r2,r6
1000dcc8:	1887883a 	add	r3,r3,r2
1000dccc:	d9c00317 	ldw	r7,12(sp)
1000dcd0:	1980022e 	bgeu	r3,r6,1000dcdc <__divdf3+0x694>
1000dcd4:	00800074 	movhi	r2,1
1000dcd8:	80a1883a 	add	r16,r16,r2
1000dcdc:	1808d43a 	srli	r4,r3,16
1000dce0:	1806943a 	slli	r3,r3,16
1000dce4:	e73fffcc 	andi	fp,fp,65535
1000dce8:	2409883a 	add	r4,r4,r16
1000dcec:	1f07883a 	add	r3,r3,fp
1000dcf0:	51000436 	bltu	r10,r4,1000dd04 <__divdf3+0x6bc>
1000dcf4:	51000226 	beq	r10,r4,1000dd00 <__divdf3+0x6b8>
1000dcf8:	a5000054 	ori	r20,r20,1
1000dcfc:	003f0306 	br	1000d90c <__divdf3+0x2c4>
1000dd00:	183f0226 	beq	r3,zero,1000d90c <__divdf3+0x2c4>
1000dd04:	b28d883a 	add	r6,r22,r10
1000dd08:	a0bfffc4 	addi	r2,r20,-1
1000dd0c:	35806536 	bltu	r6,r22,1000dea4 <__divdf3+0x85c>
1000dd10:	31008036 	bltu	r6,r4,1000df14 <__divdf3+0x8cc>
1000dd14:	31009426 	beq	r6,r4,1000df68 <__divdf3+0x920>
1000dd18:	1029883a 	mov	r20,r2
1000dd1c:	003ff606 	br	1000dcf8 <__divdf3+0x6b0>
1000dd20:	053fffc4 	movi	r20,-1
1000dd24:	01400044 	movi	r5,1
1000dd28:	2c4bc83a 	sub	r5,r5,r17
1000dd2c:	28800e48 	cmpgei	r2,r5,57
1000dd30:	103e941e 	bne	r2,zero,1000d784 <__divdf3+0x13c>
1000dd34:	28800808 	cmpgei	r2,r5,32
1000dd38:	1000491e 	bne	r2,zero,1000de60 <__divdf3+0x818>
1000dd3c:	92010784 	addi	r8,r18,1054
1000dd40:	9a04983a 	sll	r2,r19,r8
1000dd44:	a146d83a 	srl	r3,r20,r5
1000dd48:	a210983a 	sll	r8,r20,r8
1000dd4c:	994ad83a 	srl	r5,r19,r5
1000dd50:	10e8b03a 	or	r20,r2,r3
1000dd54:	4010c03a 	cmpne	r8,r8,zero
1000dd58:	a228b03a 	or	r20,r20,r8
1000dd5c:	a08001cc 	andi	r2,r20,7
1000dd60:	10000726 	beq	r2,zero,1000dd80 <__divdf3+0x738>
1000dd64:	a08003cc 	andi	r2,r20,15
1000dd68:	10800120 	cmpeqi	r2,r2,4
1000dd6c:	1000041e 	bne	r2,zero,1000dd80 <__divdf3+0x738>
1000dd70:	a0800104 	addi	r2,r20,4
1000dd74:	1529803a 	cmpltu	r20,r2,r20
1000dd78:	2d0b883a 	add	r5,r5,r20
1000dd7c:	1029883a 	mov	r20,r2
1000dd80:	2880202c 	andhi	r2,r5,128
1000dd84:	10006f26 	beq	r2,zero,1000df44 <__divdf3+0x8fc>
1000dd88:	00c00044 	movi	r3,1
1000dd8c:	000b883a 	mov	r5,zero
1000dd90:	0029883a 	mov	r20,zero
1000dd94:	003e7e06 	br	1000d790 <__divdf3+0x148>
1000dd98:	89bf6d2e 	bgeu	r17,r6,1000db50 <__divdf3+0x508>
1000dd9c:	8d63883a 	add	r17,r17,r21
1000dda0:	8d45803a 	cmpltu	r2,r17,r21
1000dda4:	1585883a 	add	r2,r2,r22
1000dda8:	1887883a 	add	r3,r3,r2
1000ddac:	98bfffc4 	addi	r2,r19,-1
1000ddb0:	b0c0202e 	bgeu	r22,r3,1000de34 <__divdf3+0x7ec>
1000ddb4:	19405136 	bltu	r3,r5,1000defc <__divdf3+0x8b4>
1000ddb8:	28c04f26 	beq	r5,r3,1000def8 <__divdf3+0x8b0>
1000ddbc:	1027883a 	mov	r19,r2
1000ddc0:	003f6306 	br	1000db50 <__divdf3+0x508>
1000ddc4:	a27efc36 	bltu	r20,r9,1000d9b8 <__divdf3+0x370>
1000ddc8:	983897fa 	slli	fp,r19,31
1000ddcc:	a004d07a 	srli	r2,r20,1
1000ddd0:	9820d07a 	srli	r16,r19,1
1000ddd4:	a02297fa 	slli	r17,r20,31
1000ddd8:	e0b8b03a 	or	fp,fp,r2
1000dddc:	003efa06 	br	1000d9c8 <__divdf3+0x380>
1000dde0:	e009883a 	mov	r4,fp
1000dde4:	000f4440 	call	1000f444 <__clzsi2>
1000dde8:	11400544 	addi	r5,r2,21
1000ddec:	29000748 	cmpgei	r4,r5,29
1000ddf0:	1007883a 	mov	r3,r2
1000ddf4:	10800804 	addi	r2,r2,32
1000ddf8:	203e8526 	beq	r4,zero,1000d810 <__divdf3+0x1c8>
1000ddfc:	18fffe04 	addi	r3,r3,-8
1000de00:	e0ec983a 	sll	r22,fp,r3
1000de04:	0013883a 	mov	r9,zero
1000de08:	003e8806 	br	1000d82c <__divdf3+0x1e4>
1000de0c:	000f4440 	call	1000f444 <__clzsi2>
1000de10:	11000544 	addi	r4,r2,21
1000de14:	20c00748 	cmpgei	r3,r4,29
1000de18:	100b883a 	mov	r5,r2
1000de1c:	10800804 	addi	r2,r2,32
1000de20:	183e8d26 	beq	r3,zero,1000d858 <__divdf3+0x210>
1000de24:	297ffe04 	addi	r5,r5,-8
1000de28:	a166983a 	sll	r19,r20,r5
1000de2c:	0029883a 	mov	r20,zero
1000de30:	003e9006 	br	1000d874 <__divdf3+0x22c>
1000de34:	b0ffe11e 	bne	r22,r3,1000ddbc <__divdf3+0x774>
1000de38:	8d7fe036 	bltu	r17,r21,1000ddbc <__divdf3+0x774>
1000de3c:	003fdd06 	br	1000ddb4 <__divdf3+0x76c>
1000de40:	30ff132e 	bgeu	r6,r3,1000da90 <__divdf3+0x448>
1000de44:	423fff84 	addi	r8,r8,-2
1000de48:	358d883a 	add	r6,r6,r22
1000de4c:	003f1106 	br	1000da94 <__divdf3+0x44c>
1000de50:	243ef72e 	bgeu	r4,r16,1000da30 <__divdf3+0x3e8>
1000de54:	9cffff84 	addi	r19,r19,-2
1000de58:	2589883a 	add	r4,r4,r22
1000de5c:	003ef506 	br	1000da34 <__divdf3+0x3ec>
1000de60:	00fff844 	movi	r3,-31
1000de64:	1c47c83a 	sub	r3,r3,r17
1000de68:	29400820 	cmpeqi	r5,r5,32
1000de6c:	98c6d83a 	srl	r3,r19,r3
1000de70:	2800031e 	bne	r5,zero,1000de80 <__divdf3+0x838>
1000de74:	91410f84 	addi	r5,r18,1086
1000de78:	994a983a 	sll	r5,r19,r5
1000de7c:	a168b03a 	or	r20,r20,r5
1000de80:	a028c03a 	cmpne	r20,r20,zero
1000de84:	a0e8b03a 	or	r20,r20,r3
1000de88:	a4c001cc 	andi	r19,r20,7
1000de8c:	9800291e 	bne	r19,zero,1000df34 <__divdf3+0x8ec>
1000de90:	000b883a 	mov	r5,zero
1000de94:	a028d0fa 	srli	r20,r20,3
1000de98:	0007883a 	mov	r3,zero
1000de9c:	a4e8b03a 	or	r20,r20,r19
1000dea0:	003e3b06 	br	1000d790 <__divdf3+0x148>
1000dea4:	1029883a 	mov	r20,r2
1000dea8:	313f931e 	bne	r6,r4,1000dcf8 <__divdf3+0x6b0>
1000deac:	1d7f921e 	bne	r3,r21,1000dcf8 <__divdf3+0x6b0>
1000deb0:	003e9606 	br	1000d90c <__divdf3+0x2c4>
1000deb4:	047f9a0e 	bge	zero,r17,1000dd20 <__divdf3+0x6d8>
1000deb8:	0009883a 	mov	r4,zero
1000debc:	05000044 	movi	r20,1
1000dec0:	9d27883a 	add	r19,r19,r20
1000dec4:	003e9506 	br	1000d91c <__divdf3+0x2d4>
1000dec8:	a08003cc 	andi	r2,r20,15
1000decc:	10800118 	cmpnei	r2,r2,4
1000ded0:	103e9126 	beq	r2,zero,1000d918 <__divdf3+0x2d0>
1000ded4:	a1000104 	addi	r4,r20,4
1000ded8:	00bffec4 	movi	r2,-5
1000dedc:	2008d0fa 	srli	r4,r4,3
1000dee0:	1529803a 	cmpltu	r20,r2,r20
1000dee4:	003ff606 	br	1000dec0 <__divdf3+0x878>
1000dee8:	1013883a 	mov	r9,r2
1000deec:	003f5a06 	br	1000dc58 <__divdf3+0x610>
1000def0:	1011883a 	mov	r8,r2
1000def4:	003f3906 	br	1000dbdc <__divdf3+0x594>
1000def8:	89bfb02e 	bgeu	r17,r6,1000ddbc <__divdf3+0x774>
1000defc:	8d63883a 	add	r17,r17,r21
1000df00:	8d45803a 	cmpltu	r2,r17,r21
1000df04:	1585883a 	add	r2,r2,r22
1000df08:	9cffff84 	addi	r19,r19,-2
1000df0c:	1887883a 	add	r3,r3,r2
1000df10:	003f0f06 	br	1000db50 <__divdf3+0x508>
1000df14:	ad45883a 	add	r2,r21,r21
1000df18:	156b803a 	cmpltu	r21,r2,r21
1000df1c:	adad883a 	add	r22,r21,r22
1000df20:	358d883a 	add	r6,r6,r22
1000df24:	a53fff84 	addi	r20,r20,-2
1000df28:	102b883a 	mov	r21,r2
1000df2c:	313fdf26 	beq	r6,r4,1000deac <__divdf3+0x864>
1000df30:	003f7106 	br	1000dcf8 <__divdf3+0x6b0>
1000df34:	a08003cc 	andi	r2,r20,15
1000df38:	10800118 	cmpnei	r2,r2,4
1000df3c:	000b883a 	mov	r5,zero
1000df40:	103f8b1e 	bne	r2,zero,1000dd70 <__divdf3+0x728>
1000df44:	2804927a 	slli	r2,r5,9
1000df48:	2826977a 	slli	r19,r5,29
1000df4c:	100ad33a 	srli	r5,r2,12
1000df50:	003fd006 	br	1000de94 <__divdf3+0x84c>
1000df54:	00800434 	movhi	r2,16
1000df58:	99400234 	orhi	r5,r19,8
1000df5c:	10bfffc4 	addi	r2,r2,-1
1000df60:	288a703a 	and	r5,r5,r2
1000df64:	003e7f06 	br	1000d964 <__divdf3+0x31c>
1000df68:	a8ffea36 	bltu	r21,r3,1000df14 <__divdf3+0x8cc>
1000df6c:	1029883a 	mov	r20,r2
1000df70:	1d7f611e 	bne	r3,r21,1000dcf8 <__divdf3+0x6b0>
1000df74:	003e6506 	br	1000d90c <__divdf3+0x2c4>

1000df78 <__eqdf2>:
1000df78:	2810d53a 	srli	r8,r5,20
1000df7c:	3806d53a 	srli	r3,r7,20
1000df80:	00800434 	movhi	r2,16
1000df84:	4201ffcc 	andi	r8,r8,2047
1000df88:	10bfffc4 	addi	r2,r2,-1
1000df8c:	4241ffd8 	cmpnei	r9,r8,2047
1000df90:	2814d7fa 	srli	r10,r5,31
1000df94:	3816d7fa 	srli	r11,r7,31
1000df98:	288a703a 	and	r5,r5,r2
1000df9c:	388e703a 	and	r7,r7,r2
1000dfa0:	1881ffcc 	andi	r2,r3,2047
1000dfa4:	48000626 	beq	r9,zero,1000dfc0 <__eqdf2+0x48>
1000dfa8:	10c1ffe0 	cmpeqi	r3,r2,2047
1000dfac:	1800021e 	bne	r3,zero,1000dfb8 <__eqdf2+0x40>
1000dfb0:	4080011e 	bne	r8,r2,1000dfb8 <__eqdf2+0x40>
1000dfb4:	29c00826 	beq	r5,r7,1000dfd8 <__eqdf2+0x60>
1000dfb8:	00800044 	movi	r2,1
1000dfbc:	f800283a 	ret
1000dfc0:	2906b03a 	or	r3,r5,r4
1000dfc4:	183ffc1e 	bne	r3,zero,1000dfb8 <__eqdf2+0x40>
1000dfc8:	1081ffd8 	cmpnei	r2,r2,2047
1000dfcc:	103ffa1e 	bne	r2,zero,1000dfb8 <__eqdf2+0x40>
1000dfd0:	398eb03a 	or	r7,r7,r6
1000dfd4:	383ff81e 	bne	r7,zero,1000dfb8 <__eqdf2+0x40>
1000dfd8:	21bff71e 	bne	r4,r6,1000dfb8 <__eqdf2+0x40>
1000dfdc:	52c00426 	beq	r10,r11,1000dff0 <__eqdf2+0x78>
1000dfe0:	403ff51e 	bne	r8,zero,1000dfb8 <__eqdf2+0x40>
1000dfe4:	290ab03a 	or	r5,r5,r4
1000dfe8:	2804c03a 	cmpne	r2,r5,zero
1000dfec:	f800283a 	ret
1000dff0:	0005883a 	mov	r2,zero
1000dff4:	f800283a 	ret

1000dff8 <__gedf2>:
1000dff8:	2810d53a 	srli	r8,r5,20
1000dffc:	3812d53a 	srli	r9,r7,20
1000e000:	00c00434 	movhi	r3,16
1000e004:	4201ffcc 	andi	r8,r8,2047
1000e008:	18ffffc4 	addi	r3,r3,-1
1000e00c:	4281ffd8 	cmpnei	r10,r8,2047
1000e010:	2816d7fa 	srli	r11,r5,31
1000e014:	3804d7fa 	srli	r2,r7,31
1000e018:	28ca703a 	and	r5,r5,r3
1000e01c:	38ce703a 	and	r7,r7,r3
1000e020:	48c1ffcc 	andi	r3,r9,2047
1000e024:	50000a26 	beq	r10,zero,1000e050 <__gedf2+0x58>
1000e028:	1a41ffd8 	cmpnei	r9,r3,2047
1000e02c:	48000c26 	beq	r9,zero,1000e060 <__gedf2+0x68>
1000e030:	4000171e 	bne	r8,zero,1000e090 <__gedf2+0x98>
1000e034:	2912b03a 	or	r9,r5,r4
1000e038:	1800121e 	bne	r3,zero,1000e084 <__gedf2+0x8c>
1000e03c:	3994b03a 	or	r10,r7,r6
1000e040:	5000101e 	bne	r10,zero,1000e084 <__gedf2+0x8c>
1000e044:	48000a1e 	bne	r9,zero,1000e070 <__gedf2+0x78>
1000e048:	0005883a 	mov	r2,zero
1000e04c:	f800283a 	ret
1000e050:	2912b03a 	or	r9,r5,r4
1000e054:	48001d1e 	bne	r9,zero,1000e0cc <__gedf2+0xd4>
1000e058:	1a41ffe0 	cmpeqi	r9,r3,2047
1000e05c:	48000c26 	beq	r9,zero,1000e090 <__gedf2+0x98>
1000e060:	3992b03a 	or	r9,r7,r6
1000e064:	4800191e 	bne	r9,zero,1000e0cc <__gedf2+0xd4>
1000e068:	40000526 	beq	r8,zero,1000e080 <__gedf2+0x88>
1000e06c:	58800c26 	beq	r11,r2,1000e0a0 <__gedf2+0xa8>
1000e070:	00800044 	movi	r2,1
1000e074:	58000526 	beq	r11,zero,1000e08c <__gedf2+0x94>
1000e078:	00bfffc4 	movi	r2,-1
1000e07c:	f800283a 	ret
1000e080:	2912b03a 	or	r9,r5,r4
1000e084:	483ff91e 	bne	r9,zero,1000e06c <__gedf2+0x74>
1000e088:	103ffb26 	beq	r2,zero,1000e078 <__gedf2+0x80>
1000e08c:	f800283a 	ret
1000e090:	183ff61e 	bne	r3,zero,1000e06c <__gedf2+0x74>
1000e094:	3992b03a 	or	r9,r7,r6
1000e098:	483ff41e 	bne	r9,zero,1000e06c <__gedf2+0x74>
1000e09c:	003ff406 	br	1000e070 <__gedf2+0x78>
1000e0a0:	1a000716 	blt	r3,r8,1000e0c0 <__gedf2+0xc8>
1000e0a4:	40fff816 	blt	r8,r3,1000e088 <__gedf2+0x90>
1000e0a8:	397ff136 	bltu	r7,r5,1000e070 <__gedf2+0x78>
1000e0ac:	29c00926 	beq	r5,r7,1000e0d4 <__gedf2+0xdc>
1000e0b0:	29ffe52e 	bgeu	r5,r7,1000e048 <__gedf2+0x50>
1000e0b4:	583ff026 	beq	r11,zero,1000e078 <__gedf2+0x80>
1000e0b8:	5805883a 	mov	r2,r11
1000e0bc:	f800283a 	ret
1000e0c0:	103fed1e 	bne	r2,zero,1000e078 <__gedf2+0x80>
1000e0c4:	00800044 	movi	r2,1
1000e0c8:	f800283a 	ret
1000e0cc:	00bfff84 	movi	r2,-2
1000e0d0:	f800283a 	ret
1000e0d4:	313fe636 	bltu	r6,r4,1000e070 <__gedf2+0x78>
1000e0d8:	21bfdb2e 	bgeu	r4,r6,1000e048 <__gedf2+0x50>
1000e0dc:	003ff506 	br	1000e0b4 <__gedf2+0xbc>

1000e0e0 <__ledf2>:
1000e0e0:	2810d53a 	srli	r8,r5,20
1000e0e4:	3812d53a 	srli	r9,r7,20
1000e0e8:	00c00434 	movhi	r3,16
1000e0ec:	4201ffcc 	andi	r8,r8,2047
1000e0f0:	18ffffc4 	addi	r3,r3,-1
1000e0f4:	4281ffd8 	cmpnei	r10,r8,2047
1000e0f8:	2816d7fa 	srli	r11,r5,31
1000e0fc:	3804d7fa 	srli	r2,r7,31
1000e100:	28ca703a 	and	r5,r5,r3
1000e104:	38ce703a 	and	r7,r7,r3
1000e108:	48c1ffcc 	andi	r3,r9,2047
1000e10c:	50000a26 	beq	r10,zero,1000e138 <__ledf2+0x58>
1000e110:	1a41ffd8 	cmpnei	r9,r3,2047
1000e114:	48000c26 	beq	r9,zero,1000e148 <__ledf2+0x68>
1000e118:	4000191e 	bne	r8,zero,1000e180 <__ledf2+0xa0>
1000e11c:	2912b03a 	or	r9,r5,r4
1000e120:	18000d1e 	bne	r3,zero,1000e158 <__ledf2+0x78>
1000e124:	3994b03a 	or	r10,r7,r6
1000e128:	50000b1e 	bne	r10,zero,1000e158 <__ledf2+0x78>
1000e12c:	48000c1e 	bne	r9,zero,1000e160 <__ledf2+0x80>
1000e130:	0005883a 	mov	r2,zero
1000e134:	f800283a 	ret
1000e138:	2912b03a 	or	r9,r5,r4
1000e13c:	48000c1e 	bne	r9,zero,1000e170 <__ledf2+0x90>
1000e140:	1a41ffe0 	cmpeqi	r9,r3,2047
1000e144:	48000e26 	beq	r9,zero,1000e180 <__ledf2+0xa0>
1000e148:	3992b03a 	or	r9,r7,r6
1000e14c:	4800081e 	bne	r9,zero,1000e170 <__ledf2+0x90>
1000e150:	4000021e 	bne	r8,zero,1000e15c <__ledf2+0x7c>
1000e154:	2912b03a 	or	r9,r5,r4
1000e158:	48000726 	beq	r9,zero,1000e178 <__ledf2+0x98>
1000e15c:	58800c26 	beq	r11,r2,1000e190 <__ledf2+0xb0>
1000e160:	00800044 	movi	r2,1
1000e164:	58000526 	beq	r11,zero,1000e17c <__ledf2+0x9c>
1000e168:	00bfffc4 	movi	r2,-1
1000e16c:	f800283a 	ret
1000e170:	00800084 	movi	r2,2
1000e174:	f800283a 	ret
1000e178:	103ffb26 	beq	r2,zero,1000e168 <__ledf2+0x88>
1000e17c:	f800283a 	ret
1000e180:	183ff61e 	bne	r3,zero,1000e15c <__ledf2+0x7c>
1000e184:	3992b03a 	or	r9,r7,r6
1000e188:	483ff41e 	bne	r9,zero,1000e15c <__ledf2+0x7c>
1000e18c:	003ff406 	br	1000e160 <__ledf2+0x80>
1000e190:	1a00030e 	bge	r3,r8,1000e1a0 <__ledf2+0xc0>
1000e194:	103ff41e 	bne	r2,zero,1000e168 <__ledf2+0x88>
1000e198:	00800044 	movi	r2,1
1000e19c:	f800283a 	ret
1000e1a0:	40fff516 	blt	r8,r3,1000e178 <__ledf2+0x98>
1000e1a4:	397fee36 	bltu	r7,r5,1000e160 <__ledf2+0x80>
1000e1a8:	29c00426 	beq	r5,r7,1000e1bc <__ledf2+0xdc>
1000e1ac:	29ffe02e 	bgeu	r5,r7,1000e130 <__ledf2+0x50>
1000e1b0:	583fed26 	beq	r11,zero,1000e168 <__ledf2+0x88>
1000e1b4:	5805883a 	mov	r2,r11
1000e1b8:	f800283a 	ret
1000e1bc:	313fe836 	bltu	r6,r4,1000e160 <__ledf2+0x80>
1000e1c0:	21bfdb2e 	bgeu	r4,r6,1000e130 <__ledf2+0x50>
1000e1c4:	003ffa06 	br	1000e1b0 <__ledf2+0xd0>

1000e1c8 <__muldf3>:
1000e1c8:	2810d53a 	srli	r8,r5,20
1000e1cc:	defff004 	addi	sp,sp,-64
1000e1d0:	00800434 	movhi	r2,16
1000e1d4:	df000e15 	stw	fp,56(sp)
1000e1d8:	dd000a15 	stw	r20,40(sp)
1000e1dc:	dcc00915 	stw	r19,36(sp)
1000e1e0:	dc400715 	stw	r17,28(sp)
1000e1e4:	10bfffc4 	addi	r2,r2,-1
1000e1e8:	dfc00f15 	stw	ra,60(sp)
1000e1ec:	ddc00d15 	stw	r23,52(sp)
1000e1f0:	dd800c15 	stw	r22,48(sp)
1000e1f4:	dd400b15 	stw	r21,44(sp)
1000e1f8:	dc800815 	stw	r18,32(sp)
1000e1fc:	dc000615 	stw	r16,24(sp)
1000e200:	4201ffcc 	andi	r8,r8,2047
1000e204:	2828d7fa 	srli	r20,r5,31
1000e208:	2023883a 	mov	r17,r4
1000e20c:	3039883a 	mov	fp,r6
1000e210:	28a6703a 	and	r19,r5,r2
1000e214:	40013426 	beq	r8,zero,1000e6e8 <__muldf3+0x520>
1000e218:	4081ffe0 	cmpeqi	r2,r8,2047
1000e21c:	1001461e 	bne	r2,zero,1000e738 <__muldf3+0x570>
1000e220:	980a90fa 	slli	r5,r19,3
1000e224:	2026d77a 	srli	r19,r4,29
1000e228:	202490fa 	slli	r18,r4,3
1000e22c:	423f0044 	addi	r8,r8,-1023
1000e230:	9966b03a 	or	r19,r19,r5
1000e234:	9cc02034 	orhi	r19,r19,128
1000e238:	002b883a 	mov	r21,zero
1000e23c:	002d883a 	mov	r22,zero
1000e240:	3804d53a 	srli	r2,r7,20
1000e244:	00c00434 	movhi	r3,16
1000e248:	18ffffc4 	addi	r3,r3,-1
1000e24c:	1081ffcc 	andi	r2,r2,2047
1000e250:	382ed7fa 	srli	r23,r7,31
1000e254:	38e0703a 	and	r16,r7,r3
1000e258:	10011026 	beq	r2,zero,1000e69c <__muldf3+0x4d4>
1000e25c:	10c1ffe0 	cmpeqi	r3,r2,2047
1000e260:	18013c1e 	bne	r3,zero,1000e754 <__muldf3+0x58c>
1000e264:	e008d77a 	srli	r4,fp,29
1000e268:	802090fa 	slli	r16,r16,3
1000e26c:	e02290fa 	slli	r17,fp,3
1000e270:	10bf0044 	addi	r2,r2,-1023
1000e274:	2420b03a 	or	r16,r4,r16
1000e278:	84002034 	orhi	r16,r16,128
1000e27c:	4091883a 	add	r8,r8,r2
1000e280:	0009883a 	mov	r4,zero
1000e284:	a8800428 	cmpgeui	r2,r21,16
1000e288:	a5ccf03a 	xor	r6,r20,r23
1000e28c:	41c00044 	addi	r7,r8,1
1000e290:	1000371e 	bne	r2,zero,1000e370 <__muldf3+0x1a8>
1000e294:	a80490ba 	slli	r2,r21,2
1000e298:	00c40074 	movhi	r3,4097
1000e29c:	10c7883a 	add	r3,r2,r3
1000e2a0:	18b8aa17 	ldw	r2,-7512(r3)
1000e2a4:	1000683a 	jmp	r2
1000e2a8:	1000e370 	cmpltui	zero,r2,909
1000e2ac:	1000e2ec 	andhi	zero,r2,907
1000e2b0:	1000e2ec 	andhi	zero,r2,907
1000e2b4:	1000e2e8 	cmpgeui	zero,r2,907
1000e2b8:	1000e2f8 	rdprs	zero,r2,907
1000e2bc:	1000e2f8 	rdprs	zero,r2,907
1000e2c0:	1000e7c8 	cmpgei	zero,r2,927
1000e2c4:	1000e2e8 	cmpgeui	zero,r2,907
1000e2c8:	1000e2f8 	rdprs	zero,r2,907
1000e2cc:	1000e7c8 	cmpgei	zero,r2,927
1000e2d0:	1000e2f8 	rdprs	zero,r2,907
1000e2d4:	1000e2e8 	cmpgeui	zero,r2,907
1000e2d8:	1000e770 	cmpltui	zero,r2,925
1000e2dc:	1000e770 	cmpltui	zero,r2,925
1000e2e0:	1000e770 	cmpltui	zero,r2,925
1000e2e4:	1000e854 	ori	zero,r2,929
1000e2e8:	b80d883a 	mov	r6,r23
1000e2ec:	8027883a 	mov	r19,r16
1000e2f0:	8825883a 	mov	r18,r17
1000e2f4:	202d883a 	mov	r22,r4
1000e2f8:	b08000a0 	cmpeqi	r2,r22,2
1000e2fc:	1000181e 	bne	r2,zero,1000e360 <__muldf3+0x198>
1000e300:	b08000e0 	cmpeqi	r2,r22,3
1000e304:	1001961e 	bne	r2,zero,1000e960 <__muldf3+0x798>
1000e308:	b0800060 	cmpeqi	r2,r22,1
1000e30c:	1000c926 	beq	r2,zero,1000e634 <__muldf3+0x46c>
1000e310:	0007883a 	mov	r3,zero
1000e314:	0027883a 	mov	r19,zero
1000e318:	0025883a 	mov	r18,zero
1000e31c:	1806953a 	slli	r3,r3,20
1000e320:	300c97fa 	slli	r6,r6,31
1000e324:	9005883a 	mov	r2,r18
1000e328:	1cc6b03a 	or	r3,r3,r19
1000e32c:	1986b03a 	or	r3,r3,r6
1000e330:	dfc00f17 	ldw	ra,60(sp)
1000e334:	df000e17 	ldw	fp,56(sp)
1000e338:	ddc00d17 	ldw	r23,52(sp)
1000e33c:	dd800c17 	ldw	r22,48(sp)
1000e340:	dd400b17 	ldw	r21,44(sp)
1000e344:	dd000a17 	ldw	r20,40(sp)
1000e348:	dcc00917 	ldw	r19,36(sp)
1000e34c:	dc800817 	ldw	r18,32(sp)
1000e350:	dc400717 	ldw	r17,28(sp)
1000e354:	dc000617 	ldw	r16,24(sp)
1000e358:	dec01004 	addi	sp,sp,64
1000e35c:	f800283a 	ret
1000e360:	00c1ffc4 	movi	r3,2047
1000e364:	0027883a 	mov	r19,zero
1000e368:	0025883a 	mov	r18,zero
1000e36c:	003feb06 	br	1000e31c <__muldf3+0x154>
1000e370:	9028d43a 	srli	r20,r18,16
1000e374:	8f3fffcc 	andi	fp,r17,65535
1000e378:	957fffcc 	andi	r21,r18,65535
1000e37c:	a80b883a 	mov	r5,r21
1000e380:	e009883a 	mov	r4,fp
1000e384:	d9800315 	stw	r6,12(sp)
1000e388:	da000215 	stw	r8,8(sp)
1000e38c:	d9c00115 	stw	r7,4(sp)
1000e390:	8822d43a 	srli	r17,r17,16
1000e394:	000cd300 	call	1000cd30 <__mulsi3>
1000e398:	e00b883a 	mov	r5,fp
1000e39c:	a009883a 	mov	r4,r20
1000e3a0:	102d883a 	mov	r22,r2
1000e3a4:	000cd300 	call	1000cd30 <__mulsi3>
1000e3a8:	880b883a 	mov	r5,r17
1000e3ac:	a009883a 	mov	r4,r20
1000e3b0:	102f883a 	mov	r23,r2
1000e3b4:	000cd300 	call	1000cd30 <__mulsi3>
1000e3b8:	a80b883a 	mov	r5,r21
1000e3bc:	8809883a 	mov	r4,r17
1000e3c0:	d8800015 	stw	r2,0(sp)
1000e3c4:	000cd300 	call	1000cd30 <__mulsi3>
1000e3c8:	b006d43a 	srli	r3,r22,16
1000e3cc:	15e5883a 	add	r18,r2,r23
1000e3d0:	d9c00117 	ldw	r7,4(sp)
1000e3d4:	1c87883a 	add	r3,r3,r18
1000e3d8:	da000217 	ldw	r8,8(sp)
1000e3dc:	d9800317 	ldw	r6,12(sp)
1000e3e0:	1dc0042e 	bgeu	r3,r23,1000e3f4 <__muldf3+0x22c>
1000e3e4:	d9000017 	ldw	r4,0(sp)
1000e3e8:	00800074 	movhi	r2,1
1000e3ec:	2085883a 	add	r2,r4,r2
1000e3f0:	d8800015 	stw	r2,0(sp)
1000e3f4:	1804943a 	slli	r2,r3,16
1000e3f8:	85ffffcc 	andi	r23,r16,65535
1000e3fc:	b5bfffcc 	andi	r22,r22,65535
1000e400:	1585883a 	add	r2,r2,r22
1000e404:	a80b883a 	mov	r5,r21
1000e408:	b809883a 	mov	r4,r23
1000e40c:	1824d43a 	srli	r18,r3,16
1000e410:	d9800515 	stw	r6,20(sp)
1000e414:	da000415 	stw	r8,16(sp)
1000e418:	d9c00315 	stw	r7,12(sp)
1000e41c:	8020d43a 	srli	r16,r16,16
1000e420:	d8800115 	stw	r2,4(sp)
1000e424:	000cd300 	call	1000cd30 <__mulsi3>
1000e428:	a009883a 	mov	r4,r20
1000e42c:	b80b883a 	mov	r5,r23
1000e430:	d8800215 	stw	r2,8(sp)
1000e434:	000cd300 	call	1000cd30 <__mulsi3>
1000e438:	a009883a 	mov	r4,r20
1000e43c:	800b883a 	mov	r5,r16
1000e440:	102d883a 	mov	r22,r2
1000e444:	000cd300 	call	1000cd30 <__mulsi3>
1000e448:	a80b883a 	mov	r5,r21
1000e44c:	8009883a 	mov	r4,r16
1000e450:	1029883a 	mov	r20,r2
1000e454:	000cd300 	call	1000cd30 <__mulsi3>
1000e458:	da800217 	ldw	r10,8(sp)
1000e45c:	1585883a 	add	r2,r2,r22
1000e460:	d9c00317 	ldw	r7,12(sp)
1000e464:	5006d43a 	srli	r3,r10,16
1000e468:	da000417 	ldw	r8,16(sp)
1000e46c:	d9800517 	ldw	r6,20(sp)
1000e470:	1887883a 	add	r3,r3,r2
1000e474:	1d80022e 	bgeu	r3,r22,1000e480 <__muldf3+0x2b8>
1000e478:	00800074 	movhi	r2,1
1000e47c:	a0a9883a 	add	r20,r20,r2
1000e480:	1804d43a 	srli	r2,r3,16
1000e484:	1806943a 	slli	r3,r3,16
1000e488:	982cd43a 	srli	r22,r19,16
1000e48c:	9d7fffcc 	andi	r21,r19,65535
1000e490:	e009883a 	mov	r4,fp
1000e494:	54ffffcc 	andi	r19,r10,65535
1000e498:	a80b883a 	mov	r5,r21
1000e49c:	1ce7883a 	add	r19,r3,r19
1000e4a0:	d9800515 	stw	r6,20(sp)
1000e4a4:	da000415 	stw	r8,16(sp)
1000e4a8:	d9c00315 	stw	r7,12(sp)
1000e4ac:	1529883a 	add	r20,r2,r20
1000e4b0:	000cd300 	call	1000cd30 <__mulsi3>
1000e4b4:	e00b883a 	mov	r5,fp
1000e4b8:	b009883a 	mov	r4,r22
1000e4bc:	d8800215 	stw	r2,8(sp)
1000e4c0:	000cd300 	call	1000cd30 <__mulsi3>
1000e4c4:	8809883a 	mov	r4,r17
1000e4c8:	b00b883a 	mov	r5,r22
1000e4cc:	1039883a 	mov	fp,r2
1000e4d0:	000cd300 	call	1000cd30 <__mulsi3>
1000e4d4:	8809883a 	mov	r4,r17
1000e4d8:	a80b883a 	mov	r5,r21
1000e4dc:	1023883a 	mov	r17,r2
1000e4e0:	000cd300 	call	1000cd30 <__mulsi3>
1000e4e4:	d8c00217 	ldw	r3,8(sp)
1000e4e8:	1705883a 	add	r2,r2,fp
1000e4ec:	d9c00317 	ldw	r7,12(sp)
1000e4f0:	1808d43a 	srli	r4,r3,16
1000e4f4:	da000417 	ldw	r8,16(sp)
1000e4f8:	d9800517 	ldw	r6,20(sp)
1000e4fc:	2089883a 	add	r4,r4,r2
1000e500:	94e5883a 	add	r18,r18,r19
1000e504:	2700022e 	bgeu	r4,fp,1000e510 <__muldf3+0x348>
1000e508:	00800074 	movhi	r2,1
1000e50c:	88a3883a 	add	r17,r17,r2
1000e510:	2004d43a 	srli	r2,r4,16
1000e514:	2038943a 	slli	fp,r4,16
1000e518:	18ffffcc 	andi	r3,r3,65535
1000e51c:	b809883a 	mov	r4,r23
1000e520:	a80b883a 	mov	r5,r21
1000e524:	d9800415 	stw	r6,16(sp)
1000e528:	da000315 	stw	r8,12(sp)
1000e52c:	d9c00215 	stw	r7,8(sp)
1000e530:	e0f9883a 	add	fp,fp,r3
1000e534:	1463883a 	add	r17,r2,r17
1000e538:	000cd300 	call	1000cd30 <__mulsi3>
1000e53c:	b80b883a 	mov	r5,r23
1000e540:	b009883a 	mov	r4,r22
1000e544:	102f883a 	mov	r23,r2
1000e548:	000cd300 	call	1000cd30 <__mulsi3>
1000e54c:	b00b883a 	mov	r5,r22
1000e550:	8009883a 	mov	r4,r16
1000e554:	102d883a 	mov	r22,r2
1000e558:	000cd300 	call	1000cd30 <__mulsi3>
1000e55c:	a80b883a 	mov	r5,r21
1000e560:	8009883a 	mov	r4,r16
1000e564:	1021883a 	mov	r16,r2
1000e568:	000cd300 	call	1000cd30 <__mulsi3>
1000e56c:	b80ad43a 	srli	r5,r23,16
1000e570:	1585883a 	add	r2,r2,r22
1000e574:	d9c00217 	ldw	r7,8(sp)
1000e578:	288b883a 	add	r5,r5,r2
1000e57c:	da000317 	ldw	r8,12(sp)
1000e580:	d9800417 	ldw	r6,16(sp)
1000e584:	2d80022e 	bgeu	r5,r22,1000e590 <__muldf3+0x3c8>
1000e588:	00800074 	movhi	r2,1
1000e58c:	80a1883a 	add	r16,r16,r2
1000e590:	2806943a 	slli	r3,r5,16
1000e594:	d8800017 	ldw	r2,0(sp)
1000e598:	bdffffcc 	andi	r23,r23,65535
1000e59c:	1dc7883a 	add	r3,r3,r23
1000e5a0:	90ab883a 	add	r21,r18,r2
1000e5a4:	acd5803a 	cmpltu	r10,r21,r19
1000e5a8:	1d07883a 	add	r3,r3,r20
1000e5ac:	af2b883a 	add	r21,r21,fp
1000e5b0:	1a97883a 	add	r11,r3,r10
1000e5b4:	af09803a 	cmpltu	r4,r21,fp
1000e5b8:	2826d43a 	srli	r19,r5,16
1000e5bc:	5c53883a 	add	r9,r11,r17
1000e5c0:	4905883a 	add	r2,r9,r4
1000e5c4:	1d07803a 	cmpltu	r3,r3,r20
1000e5c8:	5a95803a 	cmpltu	r10,r11,r10
1000e5cc:	1a86b03a 	or	r3,r3,r10
1000e5d0:	1109803a 	cmpltu	r4,r2,r4
1000e5d4:	4c53803a 	cmpltu	r9,r9,r17
1000e5d8:	1ce7883a 	add	r19,r3,r19
1000e5dc:	4908b03a 	or	r4,r9,r4
1000e5e0:	a824927a 	slli	r18,r21,9
1000e5e4:	d8c00117 	ldw	r3,4(sp)
1000e5e8:	9927883a 	add	r19,r19,r4
1000e5ec:	9c27883a 	add	r19,r19,r16
1000e5f0:	9826927a 	slli	r19,r19,9
1000e5f4:	a82ad5fa 	srli	r21,r21,23
1000e5f8:	100ad5fa 	srli	r5,r2,23
1000e5fc:	90e4b03a 	or	r18,r18,r3
1000e600:	1004927a 	slli	r2,r2,9
1000e604:	9024c03a 	cmpne	r18,r18,zero
1000e608:	9564b03a 	or	r18,r18,r21
1000e60c:	98c0402c 	andhi	r3,r19,256
1000e610:	90a4b03a 	or	r18,r18,r2
1000e614:	9966b03a 	or	r19,r19,r5
1000e618:	1800b626 	beq	r3,zero,1000e8f4 <__muldf3+0x72c>
1000e61c:	9006d07a 	srli	r3,r18,1
1000e620:	980497fa 	slli	r2,r19,31
1000e624:	9480004c 	andi	r18,r18,1
1000e628:	9826d07a 	srli	r19,r19,1
1000e62c:	1c86b03a 	or	r3,r3,r18
1000e630:	18a4b03a 	or	r18,r3,r2
1000e634:	3900ffc4 	addi	r4,r7,1023
1000e638:	0100690e 	bge	zero,r4,1000e7e0 <__muldf3+0x618>
1000e63c:	908001cc 	andi	r2,r18,7
1000e640:	10000726 	beq	r2,zero,1000e660 <__muldf3+0x498>
1000e644:	908003cc 	andi	r2,r18,15
1000e648:	10800120 	cmpeqi	r2,r2,4
1000e64c:	1000041e 	bne	r2,zero,1000e660 <__muldf3+0x498>
1000e650:	90800104 	addi	r2,r18,4
1000e654:	14a5803a 	cmpltu	r18,r2,r18
1000e658:	9ca7883a 	add	r19,r19,r18
1000e65c:	1025883a 	mov	r18,r2
1000e660:	9880402c 	andhi	r2,r19,256
1000e664:	10000426 	beq	r2,zero,1000e678 <__muldf3+0x4b0>
1000e668:	00bfc034 	movhi	r2,65280
1000e66c:	10bfffc4 	addi	r2,r2,-1
1000e670:	98a6703a 	and	r19,r19,r2
1000e674:	39010004 	addi	r4,r7,1024
1000e678:	2081ffc8 	cmpgei	r2,r4,2047
1000e67c:	103f381e 	bne	r2,zero,1000e360 <__muldf3+0x198>
1000e680:	9804977a 	slli	r2,r19,29
1000e684:	9024d0fa 	srli	r18,r18,3
1000e688:	9826927a 	slli	r19,r19,9
1000e68c:	20c1ffcc 	andi	r3,r4,2047
1000e690:	14a4b03a 	or	r18,r2,r18
1000e694:	9826d33a 	srli	r19,r19,12
1000e698:	003f2006 	br	1000e31c <__muldf3+0x154>
1000e69c:	8722b03a 	or	r17,r16,fp
1000e6a0:	88004526 	beq	r17,zero,1000e7b8 <__muldf3+0x5f0>
1000e6a4:	da000015 	stw	r8,0(sp)
1000e6a8:	80008626 	beq	r16,zero,1000e8c4 <__muldf3+0x6fc>
1000e6ac:	8009883a 	mov	r4,r16
1000e6b0:	000f4440 	call	1000f444 <__clzsi2>
1000e6b4:	da000017 	ldw	r8,0(sp)
1000e6b8:	117ffd44 	addi	r5,r2,-11
1000e6bc:	01000744 	movi	r4,29
1000e6c0:	147ffe04 	addi	r17,r2,-8
1000e6c4:	2149c83a 	sub	r4,r4,r5
1000e6c8:	8460983a 	sll	r16,r16,r17
1000e6cc:	e108d83a 	srl	r4,fp,r4
1000e6d0:	e462983a 	sll	r17,fp,r17
1000e6d4:	2420b03a 	or	r16,r4,r16
1000e6d8:	4091c83a 	sub	r8,r8,r2
1000e6dc:	423f0344 	addi	r8,r8,-1011
1000e6e0:	0009883a 	mov	r4,zero
1000e6e4:	003ee706 	br	1000e284 <__muldf3+0xbc>
1000e6e8:	9924b03a 	or	r18,r19,r4
1000e6ec:	90002d26 	beq	r18,zero,1000e7a4 <__muldf3+0x5dc>
1000e6f0:	d9c00015 	stw	r7,0(sp)
1000e6f4:	98006826 	beq	r19,zero,1000e898 <__muldf3+0x6d0>
1000e6f8:	9809883a 	mov	r4,r19
1000e6fc:	000f4440 	call	1000f444 <__clzsi2>
1000e700:	d9c00017 	ldw	r7,0(sp)
1000e704:	113ffd44 	addi	r4,r2,-11
1000e708:	00c00744 	movi	r3,29
1000e70c:	14bffe04 	addi	r18,r2,-8
1000e710:	1907c83a 	sub	r3,r3,r4
1000e714:	9ca6983a 	sll	r19,r19,r18
1000e718:	88c6d83a 	srl	r3,r17,r3
1000e71c:	8ca4983a 	sll	r18,r17,r18
1000e720:	1ce6b03a 	or	r19,r3,r19
1000e724:	023f0344 	movi	r8,-1011
1000e728:	4091c83a 	sub	r8,r8,r2
1000e72c:	002b883a 	mov	r21,zero
1000e730:	002d883a 	mov	r22,zero
1000e734:	003ec206 	br	1000e240 <__muldf3+0x78>
1000e738:	9924b03a 	or	r18,r19,r4
1000e73c:	9000141e 	bne	r18,zero,1000e790 <__muldf3+0x5c8>
1000e740:	0027883a 	mov	r19,zero
1000e744:	05400204 	movi	r21,8
1000e748:	0201ffc4 	movi	r8,2047
1000e74c:	05800084 	movi	r22,2
1000e750:	003ebb06 	br	1000e240 <__muldf3+0x78>
1000e754:	8722b03a 	or	r17,r16,fp
1000e758:	4201ffc4 	addi	r8,r8,2047
1000e75c:	8800081e 	bne	r17,zero,1000e780 <__muldf3+0x5b8>
1000e760:	ad400094 	ori	r21,r21,2
1000e764:	0021883a 	mov	r16,zero
1000e768:	01000084 	movi	r4,2
1000e76c:	003ec506 	br	1000e284 <__muldf3+0xbc>
1000e770:	b08000a0 	cmpeqi	r2,r22,2
1000e774:	a00d883a 	mov	r6,r20
1000e778:	103ee126 	beq	r2,zero,1000e300 <__muldf3+0x138>
1000e77c:	003ef806 	br	1000e360 <__muldf3+0x198>
1000e780:	ad4000d4 	ori	r21,r21,3
1000e784:	e023883a 	mov	r17,fp
1000e788:	010000c4 	movi	r4,3
1000e78c:	003ebd06 	br	1000e284 <__muldf3+0xbc>
1000e790:	2025883a 	mov	r18,r4
1000e794:	05400304 	movi	r21,12
1000e798:	0201ffc4 	movi	r8,2047
1000e79c:	058000c4 	movi	r22,3
1000e7a0:	003ea706 	br	1000e240 <__muldf3+0x78>
1000e7a4:	0027883a 	mov	r19,zero
1000e7a8:	05400104 	movi	r21,4
1000e7ac:	0011883a 	mov	r8,zero
1000e7b0:	05800044 	movi	r22,1
1000e7b4:	003ea206 	br	1000e240 <__muldf3+0x78>
1000e7b8:	ad400054 	ori	r21,r21,1
1000e7bc:	0021883a 	mov	r16,zero
1000e7c0:	01000044 	movi	r4,1
1000e7c4:	003eaf06 	br	1000e284 <__muldf3+0xbc>
1000e7c8:	04c00434 	movhi	r19,16
1000e7cc:	000d883a 	mov	r6,zero
1000e7d0:	9cffffc4 	addi	r19,r19,-1
1000e7d4:	04bfffc4 	movi	r18,-1
1000e7d8:	00c1ffc4 	movi	r3,2047
1000e7dc:	003ecf06 	br	1000e31c <__muldf3+0x154>
1000e7e0:	00800044 	movi	r2,1
1000e7e4:	1105c83a 	sub	r2,r2,r4
1000e7e8:	10c00e48 	cmpgei	r3,r2,57
1000e7ec:	183ec81e 	bne	r3,zero,1000e310 <__muldf3+0x148>
1000e7f0:	10c00808 	cmpgei	r3,r2,32
1000e7f4:	1800411e 	bne	r3,zero,1000e8fc <__muldf3+0x734>
1000e7f8:	39c10784 	addi	r7,r7,1054
1000e7fc:	99c6983a 	sll	r3,r19,r7
1000e800:	9088d83a 	srl	r4,r18,r2
1000e804:	91ce983a 	sll	r7,r18,r7
1000e808:	98a6d83a 	srl	r19,r19,r2
1000e80c:	1904b03a 	or	r2,r3,r4
1000e810:	3824c03a 	cmpne	r18,r7,zero
1000e814:	1484b03a 	or	r2,r2,r18
1000e818:	10c001cc 	andi	r3,r2,7
1000e81c:	18000726 	beq	r3,zero,1000e83c <__muldf3+0x674>
1000e820:	10c003cc 	andi	r3,r2,15
1000e824:	18c00120 	cmpeqi	r3,r3,4
1000e828:	1800041e 	bne	r3,zero,1000e83c <__muldf3+0x674>
1000e82c:	10c00104 	addi	r3,r2,4
1000e830:	1885803a 	cmpltu	r2,r3,r2
1000e834:	98a7883a 	add	r19,r19,r2
1000e838:	1805883a 	mov	r2,r3
1000e83c:	98c0202c 	andhi	r3,r19,128
1000e840:	18004326 	beq	r3,zero,1000e950 <__muldf3+0x788>
1000e844:	00c00044 	movi	r3,1
1000e848:	0027883a 	mov	r19,zero
1000e84c:	0025883a 	mov	r18,zero
1000e850:	003eb206 	br	1000e31c <__muldf3+0x154>
1000e854:	9880022c 	andhi	r2,r19,8
1000e858:	10000926 	beq	r2,zero,1000e880 <__muldf3+0x6b8>
1000e85c:	8080022c 	andhi	r2,r16,8
1000e860:	1000071e 	bne	r2,zero,1000e880 <__muldf3+0x6b8>
1000e864:	00800434 	movhi	r2,16
1000e868:	84c00234 	orhi	r19,r16,8
1000e86c:	10bfffc4 	addi	r2,r2,-1
1000e870:	98a6703a 	and	r19,r19,r2
1000e874:	b80d883a 	mov	r6,r23
1000e878:	8825883a 	mov	r18,r17
1000e87c:	003fd606 	br	1000e7d8 <__muldf3+0x610>
1000e880:	00800434 	movhi	r2,16
1000e884:	9cc00234 	orhi	r19,r19,8
1000e888:	10bfffc4 	addi	r2,r2,-1
1000e88c:	98a6703a 	and	r19,r19,r2
1000e890:	a00d883a 	mov	r6,r20
1000e894:	003fd006 	br	1000e7d8 <__muldf3+0x610>
1000e898:	000f4440 	call	1000f444 <__clzsi2>
1000e89c:	11000544 	addi	r4,r2,21
1000e8a0:	21400748 	cmpgei	r5,r4,29
1000e8a4:	1007883a 	mov	r3,r2
1000e8a8:	d9c00017 	ldw	r7,0(sp)
1000e8ac:	10800804 	addi	r2,r2,32
1000e8b0:	283f9526 	beq	r5,zero,1000e708 <__muldf3+0x540>
1000e8b4:	18fffe04 	addi	r3,r3,-8
1000e8b8:	88e6983a 	sll	r19,r17,r3
1000e8bc:	0025883a 	mov	r18,zero
1000e8c0:	003f9806 	br	1000e724 <__muldf3+0x55c>
1000e8c4:	e009883a 	mov	r4,fp
1000e8c8:	000f4440 	call	1000f444 <__clzsi2>
1000e8cc:	11400544 	addi	r5,r2,21
1000e8d0:	29000748 	cmpgei	r4,r5,29
1000e8d4:	1007883a 	mov	r3,r2
1000e8d8:	da000017 	ldw	r8,0(sp)
1000e8dc:	10800804 	addi	r2,r2,32
1000e8e0:	203f7626 	beq	r4,zero,1000e6bc <__muldf3+0x4f4>
1000e8e4:	1c3ffe04 	addi	r16,r3,-8
1000e8e8:	e420983a 	sll	r16,fp,r16
1000e8ec:	0023883a 	mov	r17,zero
1000e8f0:	003f7906 	br	1000e6d8 <__muldf3+0x510>
1000e8f4:	400f883a 	mov	r7,r8
1000e8f8:	003f4e06 	br	1000e634 <__muldf3+0x46c>
1000e8fc:	00fff844 	movi	r3,-31
1000e900:	1907c83a 	sub	r3,r3,r4
1000e904:	10800820 	cmpeqi	r2,r2,32
1000e908:	98c6d83a 	srl	r3,r19,r3
1000e90c:	1000031e 	bne	r2,zero,1000e91c <__muldf3+0x754>
1000e910:	39c10f84 	addi	r7,r7,1086
1000e914:	99e6983a 	sll	r19,r19,r7
1000e918:	94e4b03a 	or	r18,r18,r19
1000e91c:	9024c03a 	cmpne	r18,r18,zero
1000e920:	90c4b03a 	or	r2,r18,r3
1000e924:	148001cc 	andi	r18,r2,7
1000e928:	9000051e 	bne	r18,zero,1000e940 <__muldf3+0x778>
1000e92c:	0027883a 	mov	r19,zero
1000e930:	1004d0fa 	srli	r2,r2,3
1000e934:	0007883a 	mov	r3,zero
1000e938:	14a4b03a 	or	r18,r2,r18
1000e93c:	003e7706 	br	1000e31c <__muldf3+0x154>
1000e940:	10c003cc 	andi	r3,r2,15
1000e944:	18c00118 	cmpnei	r3,r3,4
1000e948:	0027883a 	mov	r19,zero
1000e94c:	183fb71e 	bne	r3,zero,1000e82c <__muldf3+0x664>
1000e950:	9806927a 	slli	r3,r19,9
1000e954:	9824977a 	slli	r18,r19,29
1000e958:	1826d33a 	srli	r19,r3,12
1000e95c:	003ff406 	br	1000e930 <__muldf3+0x768>
1000e960:	00800434 	movhi	r2,16
1000e964:	9cc00234 	orhi	r19,r19,8
1000e968:	10bfffc4 	addi	r2,r2,-1
1000e96c:	98a6703a 	and	r19,r19,r2
1000e970:	003f9906 	br	1000e7d8 <__muldf3+0x610>

1000e974 <__subdf3>:
1000e974:	00800434 	movhi	r2,16
1000e978:	3810d53a 	srli	r8,r7,20
1000e97c:	10bfffc4 	addi	r2,r2,-1
1000e980:	2806d53a 	srli	r3,r5,20
1000e984:	2892703a 	and	r9,r5,r2
1000e988:	3884703a 	and	r2,r7,r2
1000e98c:	280ad7fa 	srli	r5,r5,31
1000e990:	481290fa 	slli	r9,r9,3
1000e994:	2018d77a 	srli	r12,r4,29
1000e998:	100490fa 	slli	r2,r2,3
1000e99c:	3016d77a 	srli	r11,r6,29
1000e9a0:	defffb04 	addi	sp,sp,-20
1000e9a4:	4201ffcc 	andi	r8,r8,2047
1000e9a8:	dc800215 	stw	r18,8(sp)
1000e9ac:	dc400115 	stw	r17,4(sp)
1000e9b0:	1c81ffcc 	andi	r18,r3,2047
1000e9b4:	dfc00415 	stw	ra,16(sp)
1000e9b8:	dcc00315 	stw	r19,12(sp)
1000e9bc:	dc000015 	stw	r16,0(sp)
1000e9c0:	4281ffd8 	cmpnei	r10,r8,2047
1000e9c4:	2823883a 	mov	r17,r5
1000e9c8:	201c90fa 	slli	r14,r4,3
1000e9cc:	380ed7fa 	srli	r7,r7,31
1000e9d0:	301a90fa 	slli	r13,r6,3
1000e9d4:	29403fcc 	andi	r5,r5,255
1000e9d8:	6252b03a 	or	r9,r12,r9
1000e9dc:	589eb03a 	or	r15,r11,r2
1000e9e0:	9207c83a 	sub	r3,r18,r8
1000e9e4:	50006826 	beq	r10,zero,1000eb88 <__subdf3+0x214>
1000e9e8:	3ac0005c 	xori	r11,r7,1
1000e9ec:	2ac07326 	beq	r5,r11,1000ebbc <__subdf3+0x248>
1000e9f0:	00c0590e 	bge	zero,r3,1000eb58 <__subdf3+0x1e4>
1000e9f4:	4000691e 	bne	r8,zero,1000eb9c <__subdf3+0x228>
1000e9f8:	7b44b03a 	or	r2,r15,r13
1000e9fc:	1000fb26 	beq	r2,zero,1000edec <__subdf3+0x478>
1000ea00:	18bfffc4 	addi	r2,r3,-1
1000ea04:	10019126 	beq	r2,zero,1000f04c <__subdf3+0x6d8>
1000ea08:	18c1ffd8 	cmpnei	r3,r3,2047
1000ea0c:	1800c326 	beq	r3,zero,1000ed1c <__subdf3+0x3a8>
1000ea10:	1007883a 	mov	r3,r2
1000ea14:	18800e48 	cmpgei	r2,r3,57
1000ea18:	1000651e 	bne	r2,zero,1000ebb0 <__subdf3+0x23c>
1000ea1c:	18800808 	cmpgei	r2,r3,32
1000ea20:	1001331e 	bne	r2,zero,1000eef0 <__subdf3+0x57c>
1000ea24:	00800804 	movi	r2,32
1000ea28:	10c5c83a 	sub	r2,r2,r3
1000ea2c:	78a0983a 	sll	r16,r15,r2
1000ea30:	68c8d83a 	srl	r4,r13,r3
1000ea34:	689a983a 	sll	r13,r13,r2
1000ea38:	78c4d83a 	srl	r2,r15,r3
1000ea3c:	8120b03a 	or	r16,r16,r4
1000ea40:	681ac03a 	cmpne	r13,r13,zero
1000ea44:	8360b03a 	or	r16,r16,r13
1000ea48:	4893c83a 	sub	r9,r9,r2
1000ea4c:	7421c83a 	sub	r16,r14,r16
1000ea50:	7409803a 	cmpltu	r4,r14,r16
1000ea54:	4909c83a 	sub	r4,r9,r4
1000ea58:	2080202c 	andhi	r2,r4,128
1000ea5c:	10009326 	beq	r2,zero,1000ecac <__subdf3+0x338>
1000ea60:	04c02034 	movhi	r19,128
1000ea64:	9cffffc4 	addi	r19,r19,-1
1000ea68:	24e6703a 	and	r19,r4,r19
1000ea6c:	9800b926 	beq	r19,zero,1000ed54 <__subdf3+0x3e0>
1000ea70:	9809883a 	mov	r4,r19
1000ea74:	000f4440 	call	1000f444 <__clzsi2>
1000ea78:	10fffe04 	addi	r3,r2,-8
1000ea7c:	01000804 	movi	r4,32
1000ea80:	20c9c83a 	sub	r4,r4,r3
1000ea84:	8108d83a 	srl	r4,r16,r4
1000ea88:	98e6983a 	sll	r19,r19,r3
1000ea8c:	80e0983a 	sll	r16,r16,r3
1000ea90:	24c8b03a 	or	r4,r4,r19
1000ea94:	1c80b816 	blt	r3,r18,1000ed78 <__subdf3+0x404>
1000ea98:	1c87c83a 	sub	r3,r3,r18
1000ea9c:	19400044 	addi	r5,r3,1
1000eaa0:	28800808 	cmpgei	r2,r5,32
1000eaa4:	1000751e 	bne	r2,zero,1000ec7c <__subdf3+0x308>
1000eaa8:	00800804 	movi	r2,32
1000eaac:	1145c83a 	sub	r2,r2,r5
1000eab0:	8146d83a 	srl	r3,r16,r5
1000eab4:	80a0983a 	sll	r16,r16,r2
1000eab8:	2084983a 	sll	r2,r4,r2
1000eabc:	2148d83a 	srl	r4,r4,r5
1000eac0:	8020c03a 	cmpne	r16,r16,zero
1000eac4:	10c4b03a 	or	r2,r2,r3
1000eac8:	1420b03a 	or	r16,r2,r16
1000eacc:	0025883a 	mov	r18,zero
1000ead0:	808001cc 	andi	r2,r16,7
1000ead4:	10000726 	beq	r2,zero,1000eaf4 <__subdf3+0x180>
1000ead8:	808003cc 	andi	r2,r16,15
1000eadc:	10800120 	cmpeqi	r2,r2,4
1000eae0:	1000041e 	bne	r2,zero,1000eaf4 <__subdf3+0x180>
1000eae4:	80800104 	addi	r2,r16,4
1000eae8:	1421803a 	cmpltu	r16,r2,r16
1000eaec:	2409883a 	add	r4,r4,r16
1000eaf0:	1021883a 	mov	r16,r2
1000eaf4:	2080202c 	andhi	r2,r4,128
1000eaf8:	10006e26 	beq	r2,zero,1000ecb4 <__subdf3+0x340>
1000eafc:	90c00044 	addi	r3,r18,1
1000eb00:	1881ffe0 	cmpeqi	r2,r3,2047
1000eb04:	18c1ffcc 	andi	r3,r3,2047
1000eb08:	1000801e 	bne	r2,zero,1000ed0c <__subdf3+0x398>
1000eb0c:	00bfe034 	movhi	r2,65408
1000eb10:	10bfffc4 	addi	r2,r2,-1
1000eb14:	2088703a 	and	r4,r4,r2
1000eb18:	2004977a 	slli	r2,r4,29
1000eb1c:	2008927a 	slli	r4,r4,9
1000eb20:	8020d0fa 	srli	r16,r16,3
1000eb24:	2008d33a 	srli	r4,r4,12
1000eb28:	1404b03a 	or	r2,r2,r16
1000eb2c:	1806953a 	slli	r3,r3,20
1000eb30:	882297fa 	slli	r17,r17,31
1000eb34:	1906b03a 	or	r3,r3,r4
1000eb38:	1c46b03a 	or	r3,r3,r17
1000eb3c:	dfc00417 	ldw	ra,16(sp)
1000eb40:	dcc00317 	ldw	r19,12(sp)
1000eb44:	dc800217 	ldw	r18,8(sp)
1000eb48:	dc400117 	ldw	r17,4(sp)
1000eb4c:	dc000017 	ldw	r16,0(sp)
1000eb50:	dec00504 	addi	sp,sp,20
1000eb54:	f800283a 	ret
1000eb58:	18002c26 	beq	r3,zero,1000ec0c <__subdf3+0x298>
1000eb5c:	4487c83a 	sub	r3,r8,r18
1000eb60:	5823883a 	mov	r17,r11
1000eb64:	9000bb1e 	bne	r18,zero,1000ee54 <__subdf3+0x4e0>
1000eb68:	4b84b03a 	or	r2,r9,r14
1000eb6c:	10011726 	beq	r2,zero,1000efcc <__subdf3+0x658>
1000eb70:	18bfffc4 	addi	r2,r3,-1
1000eb74:	10016326 	beq	r2,zero,1000f104 <__subdf3+0x790>
1000eb78:	18c1ffd8 	cmpnei	r3,r3,2047
1000eb7c:	18012c26 	beq	r3,zero,1000f030 <__subdf3+0x6bc>
1000eb80:	1007883a 	mov	r3,r2
1000eb84:	0000b506 	br	1000ee5c <__subdf3+0x4e8>
1000eb88:	7b44b03a 	or	r2,r15,r13
1000eb8c:	103f9626 	beq	r2,zero,1000e9e8 <__subdf3+0x74>
1000eb90:	3ac03fcc 	andi	r11,r7,255
1000eb94:	29c07d26 	beq	r5,r7,1000ed8c <__subdf3+0x418>
1000eb98:	00ffef0e 	bge	zero,r3,1000eb58 <__subdf3+0x1e4>
1000eb9c:	9081ffd8 	cmpnei	r2,r18,2047
1000eba0:	10005e26 	beq	r2,zero,1000ed1c <__subdf3+0x3a8>
1000eba4:	18800e48 	cmpgei	r2,r3,57
1000eba8:	7bc02034 	orhi	r15,r15,128
1000ebac:	103f9b26 	beq	r2,zero,1000ea1c <__subdf3+0xa8>
1000ebb0:	7b60b03a 	or	r16,r15,r13
1000ebb4:	8020c03a 	cmpne	r16,r16,zero
1000ebb8:	003fa406 	br	1000ea4c <__subdf3+0xd8>
1000ebbc:	00c0730e 	bge	zero,r3,1000ed8c <__subdf3+0x418>
1000ebc0:	40002626 	beq	r8,zero,1000ec5c <__subdf3+0x2e8>
1000ebc4:	9081ffd8 	cmpnei	r2,r18,2047
1000ebc8:	10005426 	beq	r2,zero,1000ed1c <__subdf3+0x3a8>
1000ebcc:	7bc02034 	orhi	r15,r15,128
1000ebd0:	18800e48 	cmpgei	r2,r3,57
1000ebd4:	1000431e 	bne	r2,zero,1000ece4 <__subdf3+0x370>
1000ebd8:	18800808 	cmpgei	r2,r3,32
1000ebdc:	1000de26 	beq	r2,zero,1000ef58 <__subdf3+0x5e4>
1000ebe0:	1c3ff804 	addi	r16,r3,-32
1000ebe4:	18800820 	cmpeqi	r2,r3,32
1000ebe8:	7c0ad83a 	srl	r5,r15,r16
1000ebec:	1000041e 	bne	r2,zero,1000ec00 <__subdf3+0x28c>
1000ebf0:	00801004 	movi	r2,64
1000ebf4:	10c5c83a 	sub	r2,r2,r3
1000ebf8:	7884983a 	sll	r2,r15,r2
1000ebfc:	689ab03a 	or	r13,r13,r2
1000ec00:	6820c03a 	cmpne	r16,r13,zero
1000ec04:	8160b03a 	or	r16,r16,r5
1000ec08:	00003806 	br	1000ecec <__subdf3+0x378>
1000ec0c:	90800044 	addi	r2,r18,1
1000ec10:	1081ff8c 	andi	r2,r2,2046
1000ec14:	1000a01e 	bne	r2,zero,1000ee98 <__subdf3+0x524>
1000ec18:	4b8ab03a 	or	r5,r9,r14
1000ec1c:	7b44b03a 	or	r2,r15,r13
1000ec20:	9000f11e 	bne	r18,zero,1000efe8 <__subdf3+0x674>
1000ec24:	28012e26 	beq	r5,zero,1000f0e0 <__subdf3+0x76c>
1000ec28:	10010e26 	beq	r2,zero,1000f064 <__subdf3+0x6f0>
1000ec2c:	7361c83a 	sub	r16,r14,r13
1000ec30:	7405803a 	cmpltu	r2,r14,r16
1000ec34:	4bc9c83a 	sub	r4,r9,r15
1000ec38:	2089c83a 	sub	r4,r4,r2
1000ec3c:	2080202c 	andhi	r2,r4,128
1000ec40:	10016d26 	beq	r2,zero,1000f1f8 <__subdf3+0x884>
1000ec44:	6ba1c83a 	sub	r16,r13,r14
1000ec48:	7a49c83a 	sub	r4,r15,r9
1000ec4c:	6c1b803a 	cmpltu	r13,r13,r16
1000ec50:	2349c83a 	sub	r4,r4,r13
1000ec54:	5823883a 	mov	r17,r11
1000ec58:	003f9d06 	br	1000ead0 <__subdf3+0x15c>
1000ec5c:	7b44b03a 	or	r2,r15,r13
1000ec60:	10006226 	beq	r2,zero,1000edec <__subdf3+0x478>
1000ec64:	18bfffc4 	addi	r2,r3,-1
1000ec68:	1000e926 	beq	r2,zero,1000f010 <__subdf3+0x69c>
1000ec6c:	18c1ffd8 	cmpnei	r3,r3,2047
1000ec70:	18012a26 	beq	r3,zero,1000f11c <__subdf3+0x7a8>
1000ec74:	1007883a 	mov	r3,r2
1000ec78:	003fd506 	br	1000ebd0 <__subdf3+0x25c>
1000ec7c:	18fff844 	addi	r3,r3,-31
1000ec80:	28800820 	cmpeqi	r2,r5,32
1000ec84:	20c6d83a 	srl	r3,r4,r3
1000ec88:	1000041e 	bne	r2,zero,1000ec9c <__subdf3+0x328>
1000ec8c:	00801004 	movi	r2,64
1000ec90:	114bc83a 	sub	r5,r2,r5
1000ec94:	2148983a 	sll	r4,r4,r5
1000ec98:	8120b03a 	or	r16,r16,r4
1000ec9c:	8020c03a 	cmpne	r16,r16,zero
1000eca0:	80e0b03a 	or	r16,r16,r3
1000eca4:	0009883a 	mov	r4,zero
1000eca8:	0025883a 	mov	r18,zero
1000ecac:	808001cc 	andi	r2,r16,7
1000ecb0:	103f891e 	bne	r2,zero,1000ead8 <__subdf3+0x164>
1000ecb4:	8020d0fa 	srli	r16,r16,3
1000ecb8:	2004977a 	slli	r2,r4,29
1000ecbc:	2012d0fa 	srli	r9,r4,3
1000ecc0:	9007883a 	mov	r3,r18
1000ecc4:	8084b03a 	or	r2,r16,r2
1000ecc8:	1901ffe0 	cmpeqi	r4,r3,2047
1000eccc:	2000191e 	bne	r4,zero,1000ed34 <__subdf3+0x3c0>
1000ecd0:	01000434 	movhi	r4,16
1000ecd4:	213fffc4 	addi	r4,r4,-1
1000ecd8:	4908703a 	and	r4,r9,r4
1000ecdc:	18c1ffcc 	andi	r3,r3,2047
1000ece0:	003f9206 	br	1000eb2c <__subdf3+0x1b8>
1000ece4:	7b60b03a 	or	r16,r15,r13
1000ece8:	8020c03a 	cmpne	r16,r16,zero
1000ecec:	83a1883a 	add	r16,r16,r14
1000ecf0:	8389803a 	cmpltu	r4,r16,r14
1000ecf4:	2249883a 	add	r4,r4,r9
1000ecf8:	2080202c 	andhi	r2,r4,128
1000ecfc:	103feb26 	beq	r2,zero,1000ecac <__subdf3+0x338>
1000ed00:	94800044 	addi	r18,r18,1
1000ed04:	9081ffe0 	cmpeqi	r2,r18,2047
1000ed08:	10006f26 	beq	r2,zero,1000eec8 <__subdf3+0x554>
1000ed0c:	00c1ffc4 	movi	r3,2047
1000ed10:	0009883a 	mov	r4,zero
1000ed14:	0005883a 	mov	r2,zero
1000ed18:	003f8406 	br	1000eb2c <__subdf3+0x1b8>
1000ed1c:	4806977a 	slli	r3,r9,29
1000ed20:	00880034 	movhi	r2,8192
1000ed24:	10bfffc4 	addi	r2,r2,-1
1000ed28:	4812d0fa 	srli	r9,r9,3
1000ed2c:	2088703a 	and	r4,r4,r2
1000ed30:	20c4b03a 	or	r2,r4,r3
1000ed34:	4886b03a 	or	r3,r9,r2
1000ed38:	18013726 	beq	r3,zero,1000f218 <__subdf3+0x8a4>
1000ed3c:	00c00434 	movhi	r3,16
1000ed40:	18ffffc4 	addi	r3,r3,-1
1000ed44:	49000234 	orhi	r4,r9,8
1000ed48:	20c8703a 	and	r4,r4,r3
1000ed4c:	00c1ffc4 	movi	r3,2047
1000ed50:	003f7606 	br	1000eb2c <__subdf3+0x1b8>
1000ed54:	8009883a 	mov	r4,r16
1000ed58:	000f4440 	call	1000f444 <__clzsi2>
1000ed5c:	10c00604 	addi	r3,r2,24
1000ed60:	19000808 	cmpgei	r4,r3,32
1000ed64:	203f4526 	beq	r4,zero,1000ea7c <__subdf3+0x108>
1000ed68:	113ffe04 	addi	r4,r2,-8
1000ed6c:	8108983a 	sll	r4,r16,r4
1000ed70:	0021883a 	mov	r16,zero
1000ed74:	1cbf480e 	bge	r3,r18,1000ea98 <__subdf3+0x124>
1000ed78:	00bfe034 	movhi	r2,65408
1000ed7c:	10bfffc4 	addi	r2,r2,-1
1000ed80:	90e5c83a 	sub	r18,r18,r3
1000ed84:	2088703a 	and	r4,r4,r2
1000ed88:	003f5106 	br	1000ead0 <__subdf3+0x15c>
1000ed8c:	18001e26 	beq	r3,zero,1000ee08 <__subdf3+0x494>
1000ed90:	4487c83a 	sub	r3,r8,r18
1000ed94:	90006826 	beq	r18,zero,1000ef38 <__subdf3+0x5c4>
1000ed98:	5000a526 	beq	r10,zero,1000f030 <__subdf3+0x6bc>
1000ed9c:	4a402034 	orhi	r9,r9,128
1000eda0:	18800e48 	cmpgei	r2,r3,57
1000eda4:	1000b61e 	bne	r2,zero,1000f080 <__subdf3+0x70c>
1000eda8:	18800808 	cmpgei	r2,r3,32
1000edac:	1001021e 	bne	r2,zero,1000f1b8 <__subdf3+0x844>
1000edb0:	00800804 	movi	r2,32
1000edb4:	10c5c83a 	sub	r2,r2,r3
1000edb8:	48a0983a 	sll	r16,r9,r2
1000edbc:	70c8d83a 	srl	r4,r14,r3
1000edc0:	7084983a 	sll	r2,r14,r2
1000edc4:	48d2d83a 	srl	r9,r9,r3
1000edc8:	8120b03a 	or	r16,r16,r4
1000edcc:	1004c03a 	cmpne	r2,r2,zero
1000edd0:	80a0b03a 	or	r16,r16,r2
1000edd4:	7a5f883a 	add	r15,r15,r9
1000edd8:	8361883a 	add	r16,r16,r13
1000eddc:	8349803a 	cmpltu	r4,r16,r13
1000ede0:	23c9883a 	add	r4,r4,r15
1000ede4:	4025883a 	mov	r18,r8
1000ede8:	003fc306 	br	1000ecf8 <__subdf3+0x384>
1000edec:	480a977a 	slli	r5,r9,29
1000edf0:	00880034 	movhi	r2,8192
1000edf4:	10bfffc4 	addi	r2,r2,-1
1000edf8:	2088703a 	and	r4,r4,r2
1000edfc:	4812d0fa 	srli	r9,r9,3
1000ee00:	2144b03a 	or	r2,r4,r5
1000ee04:	003fb006 	br	1000ecc8 <__subdf3+0x354>
1000ee08:	90800044 	addi	r2,r18,1
1000ee0c:	1141ff8c 	andi	r5,r2,2046
1000ee10:	28005c1e 	bne	r5,zero,1000ef84 <__subdf3+0x610>
1000ee14:	4b84b03a 	or	r2,r9,r14
1000ee18:	9000a71e 	bne	r18,zero,1000f0b8 <__subdf3+0x744>
1000ee1c:	1000df26 	beq	r2,zero,1000f19c <__subdf3+0x828>
1000ee20:	7b44b03a 	or	r2,r15,r13
1000ee24:	10008f26 	beq	r2,zero,1000f064 <__subdf3+0x6f0>
1000ee28:	7361883a 	add	r16,r14,r13
1000ee2c:	4bc9883a 	add	r4,r9,r15
1000ee30:	839d803a 	cmpltu	r14,r16,r14
1000ee34:	2389883a 	add	r4,r4,r14
1000ee38:	2080202c 	andhi	r2,r4,128
1000ee3c:	103f9b26 	beq	r2,zero,1000ecac <__subdf3+0x338>
1000ee40:	00bfe034 	movhi	r2,65408
1000ee44:	10bfffc4 	addi	r2,r2,-1
1000ee48:	2088703a 	and	r4,r4,r2
1000ee4c:	04800044 	movi	r18,1
1000ee50:	003f9606 	br	1000ecac <__subdf3+0x338>
1000ee54:	50007626 	beq	r10,zero,1000f030 <__subdf3+0x6bc>
1000ee58:	4a402034 	orhi	r9,r9,128
1000ee5c:	18800e48 	cmpgei	r2,r3,57
1000ee60:	10002e1e 	bne	r2,zero,1000ef1c <__subdf3+0x5a8>
1000ee64:	18800808 	cmpgei	r2,r3,32
1000ee68:	1000881e 	bne	r2,zero,1000f08c <__subdf3+0x718>
1000ee6c:	00800804 	movi	r2,32
1000ee70:	10c5c83a 	sub	r2,r2,r3
1000ee74:	48a0983a 	sll	r16,r9,r2
1000ee78:	70c8d83a 	srl	r4,r14,r3
1000ee7c:	709c983a 	sll	r14,r14,r2
1000ee80:	48d2d83a 	srl	r9,r9,r3
1000ee84:	8120b03a 	or	r16,r16,r4
1000ee88:	701cc03a 	cmpne	r14,r14,zero
1000ee8c:	83a0b03a 	or	r16,r16,r14
1000ee90:	7a5fc83a 	sub	r15,r15,r9
1000ee94:	00002306 	br	1000ef24 <__subdf3+0x5b0>
1000ee98:	7361c83a 	sub	r16,r14,r13
1000ee9c:	4be7c83a 	sub	r19,r9,r15
1000eea0:	7409803a 	cmpltu	r4,r14,r16
1000eea4:	9927c83a 	sub	r19,r19,r4
1000eea8:	9880202c 	andhi	r2,r19,128
1000eeac:	1000411e 	bne	r2,zero,1000efb4 <__subdf3+0x640>
1000eeb0:	84c4b03a 	or	r2,r16,r19
1000eeb4:	103eed1e 	bne	r2,zero,1000ea6c <__subdf3+0xf8>
1000eeb8:	0013883a 	mov	r9,zero
1000eebc:	0023883a 	mov	r17,zero
1000eec0:	003f8306 	br	1000ecd0 <__subdf3+0x35c>
1000eec4:	04800084 	movi	r18,2
1000eec8:	00bfe034 	movhi	r2,65408
1000eecc:	10bfffc4 	addi	r2,r2,-1
1000eed0:	8006d07a 	srli	r3,r16,1
1000eed4:	2088703a 	and	r4,r4,r2
1000eed8:	200497fa 	slli	r2,r4,31
1000eedc:	8400004c 	andi	r16,r16,1
1000eee0:	1c20b03a 	or	r16,r3,r16
1000eee4:	2008d07a 	srli	r4,r4,1
1000eee8:	1420b03a 	or	r16,r2,r16
1000eeec:	003ef806 	br	1000ead0 <__subdf3+0x15c>
1000eef0:	1c3ff804 	addi	r16,r3,-32
1000eef4:	18800820 	cmpeqi	r2,r3,32
1000eef8:	7c0ad83a 	srl	r5,r15,r16
1000eefc:	1000041e 	bne	r2,zero,1000ef10 <__subdf3+0x59c>
1000ef00:	00801004 	movi	r2,64
1000ef04:	10c5c83a 	sub	r2,r2,r3
1000ef08:	7884983a 	sll	r2,r15,r2
1000ef0c:	689ab03a 	or	r13,r13,r2
1000ef10:	6820c03a 	cmpne	r16,r13,zero
1000ef14:	8160b03a 	or	r16,r16,r5
1000ef18:	003ecc06 	br	1000ea4c <__subdf3+0xd8>
1000ef1c:	4b92b03a 	or	r9,r9,r14
1000ef20:	4820c03a 	cmpne	r16,r9,zero
1000ef24:	6c21c83a 	sub	r16,r13,r16
1000ef28:	6c09803a 	cmpltu	r4,r13,r16
1000ef2c:	7909c83a 	sub	r4,r15,r4
1000ef30:	4025883a 	mov	r18,r8
1000ef34:	003ec806 	br	1000ea58 <__subdf3+0xe4>
1000ef38:	4b84b03a 	or	r2,r9,r14
1000ef3c:	10007e26 	beq	r2,zero,1000f138 <__subdf3+0x7c4>
1000ef40:	18bfffc4 	addi	r2,r3,-1
1000ef44:	1000a726 	beq	r2,zero,1000f1e4 <__subdf3+0x870>
1000ef48:	18c1ffd8 	cmpnei	r3,r3,2047
1000ef4c:	18003826 	beq	r3,zero,1000f030 <__subdf3+0x6bc>
1000ef50:	1007883a 	mov	r3,r2
1000ef54:	003f9206 	br	1000eda0 <__subdf3+0x42c>
1000ef58:	00800804 	movi	r2,32
1000ef5c:	10c5c83a 	sub	r2,r2,r3
1000ef60:	78a0983a 	sll	r16,r15,r2
1000ef64:	68c8d83a 	srl	r4,r13,r3
1000ef68:	689a983a 	sll	r13,r13,r2
1000ef6c:	78c4d83a 	srl	r2,r15,r3
1000ef70:	8120b03a 	or	r16,r16,r4
1000ef74:	681ac03a 	cmpne	r13,r13,zero
1000ef78:	8360b03a 	or	r16,r16,r13
1000ef7c:	4893883a 	add	r9,r9,r2
1000ef80:	003f5a06 	br	1000ecec <__subdf3+0x378>
1000ef84:	10c1ffe0 	cmpeqi	r3,r2,2047
1000ef88:	183f601e 	bne	r3,zero,1000ed0c <__subdf3+0x398>
1000ef8c:	735b883a 	add	r13,r14,r13
1000ef90:	6b9d803a 	cmpltu	r14,r13,r14
1000ef94:	4bc9883a 	add	r4,r9,r15
1000ef98:	2389883a 	add	r4,r4,r14
1000ef9c:	202097fa 	slli	r16,r4,31
1000efa0:	681ad07a 	srli	r13,r13,1
1000efa4:	2008d07a 	srli	r4,r4,1
1000efa8:	1025883a 	mov	r18,r2
1000efac:	8360b03a 	or	r16,r16,r13
1000efb0:	003f3e06 	br	1000ecac <__subdf3+0x338>
1000efb4:	6ba1c83a 	sub	r16,r13,r14
1000efb8:	7a49c83a 	sub	r4,r15,r9
1000efbc:	6c1b803a 	cmpltu	r13,r13,r16
1000efc0:	2367c83a 	sub	r19,r4,r13
1000efc4:	5823883a 	mov	r17,r11
1000efc8:	003ea806 	br	1000ea6c <__subdf3+0xf8>
1000efcc:	7808977a 	slli	r4,r15,29
1000efd0:	00880034 	movhi	r2,8192
1000efd4:	10bfffc4 	addi	r2,r2,-1
1000efd8:	308c703a 	and	r6,r6,r2
1000efdc:	7812d0fa 	srli	r9,r15,3
1000efe0:	3104b03a 	or	r2,r6,r4
1000efe4:	003f3806 	br	1000ecc8 <__subdf3+0x354>
1000efe8:	28005a1e 	bne	r5,zero,1000f154 <__subdf3+0x7e0>
1000efec:	10008526 	beq	r2,zero,1000f204 <__subdf3+0x890>
1000eff0:	7806977a 	slli	r3,r15,29
1000eff4:	00880034 	movhi	r2,8192
1000eff8:	10bfffc4 	addi	r2,r2,-1
1000effc:	3084703a 	and	r2,r6,r2
1000f000:	7812d0fa 	srli	r9,r15,3
1000f004:	10c4b03a 	or	r2,r2,r3
1000f008:	5823883a 	mov	r17,r11
1000f00c:	003f4906 	br	1000ed34 <__subdf3+0x3c0>
1000f010:	7361883a 	add	r16,r14,r13
1000f014:	4bc9883a 	add	r4,r9,r15
1000f018:	839d803a 	cmpltu	r14,r16,r14
1000f01c:	2389883a 	add	r4,r4,r14
1000f020:	2080202c 	andhi	r2,r4,128
1000f024:	103fa71e 	bne	r2,zero,1000eec4 <__subdf3+0x550>
1000f028:	04800044 	movi	r18,1
1000f02c:	003f1f06 	br	1000ecac <__subdf3+0x338>
1000f030:	7806977a 	slli	r3,r15,29
1000f034:	00880034 	movhi	r2,8192
1000f038:	10bfffc4 	addi	r2,r2,-1
1000f03c:	3084703a 	and	r2,r6,r2
1000f040:	7812d0fa 	srli	r9,r15,3
1000f044:	10c4b03a 	or	r2,r2,r3
1000f048:	003f3a06 	br	1000ed34 <__subdf3+0x3c0>
1000f04c:	7361c83a 	sub	r16,r14,r13
1000f050:	4bc9c83a 	sub	r4,r9,r15
1000f054:	741d803a 	cmpltu	r14,r14,r16
1000f058:	2389c83a 	sub	r4,r4,r14
1000f05c:	04800044 	movi	r18,1
1000f060:	003e7d06 	br	1000ea58 <__subdf3+0xe4>
1000f064:	480a977a 	slli	r5,r9,29
1000f068:	00880034 	movhi	r2,8192
1000f06c:	10bfffc4 	addi	r2,r2,-1
1000f070:	2084703a 	and	r2,r4,r2
1000f074:	4812d0fa 	srli	r9,r9,3
1000f078:	1144b03a 	or	r2,r2,r5
1000f07c:	003f1406 	br	1000ecd0 <__subdf3+0x35c>
1000f080:	4b92b03a 	or	r9,r9,r14
1000f084:	4820c03a 	cmpne	r16,r9,zero
1000f088:	003f5306 	br	1000edd8 <__subdf3+0x464>
1000f08c:	1c3ff804 	addi	r16,r3,-32
1000f090:	19000820 	cmpeqi	r4,r3,32
1000f094:	4c04d83a 	srl	r2,r9,r16
1000f098:	2000041e 	bne	r4,zero,1000f0ac <__subdf3+0x738>
1000f09c:	01001004 	movi	r4,64
1000f0a0:	20c7c83a 	sub	r3,r4,r3
1000f0a4:	48d2983a 	sll	r9,r9,r3
1000f0a8:	725cb03a 	or	r14,r14,r9
1000f0ac:	7020c03a 	cmpne	r16,r14,zero
1000f0b0:	80a0b03a 	or	r16,r16,r2
1000f0b4:	003f9b06 	br	1000ef24 <__subdf3+0x5b0>
1000f0b8:	103fdd26 	beq	r2,zero,1000f030 <__subdf3+0x6bc>
1000f0bc:	7b5ab03a 	or	r13,r15,r13
1000f0c0:	480a977a 	slli	r5,r9,29
1000f0c4:	4812d0fa 	srli	r9,r9,3
1000f0c8:	6800251e 	bne	r13,zero,1000f160 <__subdf3+0x7ec>
1000f0cc:	00880034 	movhi	r2,8192
1000f0d0:	10bfffc4 	addi	r2,r2,-1
1000f0d4:	2084703a 	and	r2,r4,r2
1000f0d8:	1144b03a 	or	r2,r2,r5
1000f0dc:	003f1506 	br	1000ed34 <__subdf3+0x3c0>
1000f0e0:	103f7526 	beq	r2,zero,1000eeb8 <__subdf3+0x544>
1000f0e4:	7808977a 	slli	r4,r15,29
1000f0e8:	00880034 	movhi	r2,8192
1000f0ec:	10bfffc4 	addi	r2,r2,-1
1000f0f0:	3084703a 	and	r2,r6,r2
1000f0f4:	7812d0fa 	srli	r9,r15,3
1000f0f8:	1104b03a 	or	r2,r2,r4
1000f0fc:	5823883a 	mov	r17,r11
1000f100:	003ef306 	br	1000ecd0 <__subdf3+0x35c>
1000f104:	6ba1c83a 	sub	r16,r13,r14
1000f108:	7a49c83a 	sub	r4,r15,r9
1000f10c:	6c1b803a 	cmpltu	r13,r13,r16
1000f110:	2349c83a 	sub	r4,r4,r13
1000f114:	04800044 	movi	r18,1
1000f118:	003e4f06 	br	1000ea58 <__subdf3+0xe4>
1000f11c:	4806977a 	slli	r3,r9,29
1000f120:	00880034 	movhi	r2,8192
1000f124:	10bfffc4 	addi	r2,r2,-1
1000f128:	2084703a 	and	r2,r4,r2
1000f12c:	4812d0fa 	srli	r9,r9,3
1000f130:	10c4b03a 	or	r2,r2,r3
1000f134:	003eff06 	br	1000ed34 <__subdf3+0x3c0>
1000f138:	7808977a 	slli	r4,r15,29
1000f13c:	00880034 	movhi	r2,8192
1000f140:	10bfffc4 	addi	r2,r2,-1
1000f144:	3084703a 	and	r2,r6,r2
1000f148:	7812d0fa 	srli	r9,r15,3
1000f14c:	1104b03a 	or	r2,r2,r4
1000f150:	003edd06 	br	1000ecc8 <__subdf3+0x354>
1000f154:	480a977a 	slli	r5,r9,29
1000f158:	4812d0fa 	srli	r9,r9,3
1000f15c:	103fdb26 	beq	r2,zero,1000f0cc <__subdf3+0x758>
1000f160:	00c80034 	movhi	r3,8192
1000f164:	18ffffc4 	addi	r3,r3,-1
1000f168:	20c4703a 	and	r2,r4,r3
1000f16c:	4900022c 	andhi	r4,r9,8
1000f170:	1144b03a 	or	r2,r2,r5
1000f174:	203eef26 	beq	r4,zero,1000ed34 <__subdf3+0x3c0>
1000f178:	7808d0fa 	srli	r4,r15,3
1000f17c:	2140022c 	andhi	r5,r4,8
1000f180:	283eec1e 	bne	r5,zero,1000ed34 <__subdf3+0x3c0>
1000f184:	7804977a 	slli	r2,r15,29
1000f188:	30cc703a 	and	r6,r6,r3
1000f18c:	5823883a 	mov	r17,r11
1000f190:	3084b03a 	or	r2,r6,r2
1000f194:	2013883a 	mov	r9,r4
1000f198:	003ee606 	br	1000ed34 <__subdf3+0x3c0>
1000f19c:	7808977a 	slli	r4,r15,29
1000f1a0:	00880034 	movhi	r2,8192
1000f1a4:	10bfffc4 	addi	r2,r2,-1
1000f1a8:	3084703a 	and	r2,r6,r2
1000f1ac:	7812d0fa 	srli	r9,r15,3
1000f1b0:	1104b03a 	or	r2,r2,r4
1000f1b4:	003ec606 	br	1000ecd0 <__subdf3+0x35c>
1000f1b8:	18bff804 	addi	r2,r3,-32
1000f1bc:	19000820 	cmpeqi	r4,r3,32
1000f1c0:	4884d83a 	srl	r2,r9,r2
1000f1c4:	2000041e 	bne	r4,zero,1000f1d8 <__subdf3+0x864>
1000f1c8:	01001004 	movi	r4,64
1000f1cc:	20c7c83a 	sub	r3,r4,r3
1000f1d0:	48d2983a 	sll	r9,r9,r3
1000f1d4:	725cb03a 	or	r14,r14,r9
1000f1d8:	7020c03a 	cmpne	r16,r14,zero
1000f1dc:	80a0b03a 	or	r16,r16,r2
1000f1e0:	003efd06 	br	1000edd8 <__subdf3+0x464>
1000f1e4:	7361883a 	add	r16,r14,r13
1000f1e8:	4bc9883a 	add	r4,r9,r15
1000f1ec:	835b803a 	cmpltu	r13,r16,r13
1000f1f0:	2349883a 	add	r4,r4,r13
1000f1f4:	003f8a06 	br	1000f020 <__subdf3+0x6ac>
1000f1f8:	8104b03a 	or	r2,r16,r4
1000f1fc:	103f2e26 	beq	r2,zero,1000eeb8 <__subdf3+0x544>
1000f200:	003eaa06 	br	1000ecac <__subdf3+0x338>
1000f204:	02400434 	movhi	r9,16
1000f208:	0023883a 	mov	r17,zero
1000f20c:	00bfffc4 	movi	r2,-1
1000f210:	4a7fffc4 	addi	r9,r9,-1
1000f214:	003ec906 	br	1000ed3c <__subdf3+0x3c8>
1000f218:	0005883a 	mov	r2,zero
1000f21c:	00c1ffc4 	movi	r3,2047
1000f220:	0009883a 	mov	r4,zero
1000f224:	003e4106 	br	1000eb2c <__subdf3+0x1b8>

1000f228 <__unorddf2>:
1000f228:	2806d53a 	srli	r3,r5,20
1000f22c:	3810d53a 	srli	r8,r7,20
1000f230:	02400434 	movhi	r9,16
1000f234:	18c1ffcc 	andi	r3,r3,2047
1000f238:	4a7fffc4 	addi	r9,r9,-1
1000f23c:	18c1ffd8 	cmpnei	r3,r3,2047
1000f240:	2a4a703a 	and	r5,r5,r9
1000f244:	3a4e703a 	and	r7,r7,r9
1000f248:	4201ffcc 	andi	r8,r8,2047
1000f24c:	18000426 	beq	r3,zero,1000f260 <__unorddf2+0x38>
1000f250:	4201ffd8 	cmpnei	r8,r8,2047
1000f254:	40000626 	beq	r8,zero,1000f270 <__unorddf2+0x48>
1000f258:	0005883a 	mov	r2,zero
1000f25c:	f800283a 	ret
1000f260:	290ab03a 	or	r5,r5,r4
1000f264:	283ffa26 	beq	r5,zero,1000f250 <__unorddf2+0x28>
1000f268:	00800044 	movi	r2,1
1000f26c:	f800283a 	ret
1000f270:	398eb03a 	or	r7,r7,r6
1000f274:	3804c03a 	cmpne	r2,r7,zero
1000f278:	f800283a 	ret

1000f27c <__fixdfsi>:
1000f27c:	2806d53a 	srli	r3,r5,20
1000f280:	01800434 	movhi	r6,16
1000f284:	31bfffc4 	addi	r6,r6,-1
1000f288:	18c1ffcc 	andi	r3,r3,2047
1000f28c:	19c0ffd0 	cmplti	r7,r3,1023
1000f290:	2810d7fa 	srli	r8,r5,31
1000f294:	298a703a 	and	r5,r5,r6
1000f298:	3800061e 	bne	r7,zero,1000f2b4 <__fixdfsi+0x38>
1000f29c:	18810790 	cmplti	r2,r3,1054
1000f2a0:	1000061e 	bne	r2,zero,1000f2bc <__fixdfsi+0x40>
1000f2a4:	00a00034 	movhi	r2,32768
1000f2a8:	10bfffc4 	addi	r2,r2,-1
1000f2ac:	4085883a 	add	r2,r8,r2
1000f2b0:	f800283a 	ret
1000f2b4:	0005883a 	mov	r2,zero
1000f2b8:	f800283a 	ret
1000f2bc:	01810cc4 	movi	r6,1075
1000f2c0:	30cdc83a 	sub	r6,r6,r3
1000f2c4:	30800808 	cmpgei	r2,r6,32
1000f2c8:	29400434 	orhi	r5,r5,16
1000f2cc:	1000071e 	bne	r2,zero,1000f2ec <__fixdfsi+0x70>
1000f2d0:	18befb44 	addi	r2,r3,-1043
1000f2d4:	2884983a 	sll	r2,r5,r2
1000f2d8:	2188d83a 	srl	r4,r4,r6
1000f2dc:	1104b03a 	or	r2,r2,r4
1000f2e0:	403ff526 	beq	r8,zero,1000f2b8 <__fixdfsi+0x3c>
1000f2e4:	0085c83a 	sub	r2,zero,r2
1000f2e8:	f800283a 	ret
1000f2ec:	008104c4 	movi	r2,1043
1000f2f0:	10c5c83a 	sub	r2,r2,r3
1000f2f4:	2884d83a 	srl	r2,r5,r2
1000f2f8:	003ff906 	br	1000f2e0 <__fixdfsi+0x64>

1000f2fc <__floatsidf>:
1000f2fc:	defffd04 	addi	sp,sp,-12
1000f300:	dfc00215 	stw	ra,8(sp)
1000f304:	dc400115 	stw	r17,4(sp)
1000f308:	dc000015 	stw	r16,0(sp)
1000f30c:	20001326 	beq	r4,zero,1000f35c <__floatsidf+0x60>
1000f310:	2022d7fa 	srli	r17,r4,31
1000f314:	2021883a 	mov	r16,r4
1000f318:	20002416 	blt	r4,zero,1000f3ac <__floatsidf+0xb0>
1000f31c:	8009883a 	mov	r4,r16
1000f320:	000f4440 	call	1000f444 <__clzsi2>
1000f324:	01010784 	movi	r4,1054
1000f328:	2089c83a 	sub	r4,r4,r2
1000f32c:	114002c8 	cmpgei	r5,r2,11
1000f330:	20c1ffcc 	andi	r3,r4,2047
1000f334:	2800161e 	bne	r5,zero,1000f390 <__floatsidf+0x94>
1000f338:	010002c4 	movi	r4,11
1000f33c:	2089c83a 	sub	r4,r4,r2
1000f340:	810ad83a 	srl	r5,r16,r4
1000f344:	01000434 	movhi	r4,16
1000f348:	10800544 	addi	r2,r2,21
1000f34c:	213fffc4 	addi	r4,r4,-1
1000f350:	8084983a 	sll	r2,r16,r2
1000f354:	290a703a 	and	r5,r5,r4
1000f358:	00000406 	br	1000f36c <__floatsidf+0x70>
1000f35c:	0023883a 	mov	r17,zero
1000f360:	0007883a 	mov	r3,zero
1000f364:	000b883a 	mov	r5,zero
1000f368:	0005883a 	mov	r2,zero
1000f36c:	1808953a 	slli	r4,r3,20
1000f370:	880697fa 	slli	r3,r17,31
1000f374:	2148b03a 	or	r4,r4,r5
1000f378:	20c6b03a 	or	r3,r4,r3
1000f37c:	dfc00217 	ldw	ra,8(sp)
1000f380:	dc400117 	ldw	r17,4(sp)
1000f384:	dc000017 	ldw	r16,0(sp)
1000f388:	dec00304 	addi	sp,sp,12
1000f38c:	f800283a 	ret
1000f390:	10bffd44 	addi	r2,r2,-11
1000f394:	808a983a 	sll	r5,r16,r2
1000f398:	00800434 	movhi	r2,16
1000f39c:	10bfffc4 	addi	r2,r2,-1
1000f3a0:	288a703a 	and	r5,r5,r2
1000f3a4:	0005883a 	mov	r2,zero
1000f3a8:	003ff006 	br	1000f36c <__floatsidf+0x70>
1000f3ac:	0121c83a 	sub	r16,zero,r4
1000f3b0:	003fda06 	br	1000f31c <__floatsidf+0x20>

1000f3b4 <__floatunsidf>:
1000f3b4:	defffe04 	addi	sp,sp,-8
1000f3b8:	dc000015 	stw	r16,0(sp)
1000f3bc:	dfc00115 	stw	ra,4(sp)
1000f3c0:	2021883a 	mov	r16,r4
1000f3c4:	20000f26 	beq	r4,zero,1000f404 <__floatunsidf+0x50>
1000f3c8:	000f4440 	call	1000f444 <__clzsi2>
1000f3cc:	00c10784 	movi	r3,1054
1000f3d0:	1887c83a 	sub	r3,r3,r2
1000f3d4:	110002c8 	cmpgei	r4,r2,11
1000f3d8:	18c1ffcc 	andi	r3,r3,2047
1000f3dc:	2000121e 	bne	r4,zero,1000f428 <__floatunsidf+0x74>
1000f3e0:	014002c4 	movi	r5,11
1000f3e4:	288bc83a 	sub	r5,r5,r2
1000f3e8:	814ad83a 	srl	r5,r16,r5
1000f3ec:	01000434 	movhi	r4,16
1000f3f0:	10800544 	addi	r2,r2,21
1000f3f4:	213fffc4 	addi	r4,r4,-1
1000f3f8:	80a0983a 	sll	r16,r16,r2
1000f3fc:	290a703a 	and	r5,r5,r4
1000f400:	00000206 	br	1000f40c <__floatunsidf+0x58>
1000f404:	0007883a 	mov	r3,zero
1000f408:	000b883a 	mov	r5,zero
1000f40c:	1806953a 	slli	r3,r3,20
1000f410:	8005883a 	mov	r2,r16
1000f414:	1946b03a 	or	r3,r3,r5
1000f418:	dfc00117 	ldw	ra,4(sp)
1000f41c:	dc000017 	ldw	r16,0(sp)
1000f420:	dec00204 	addi	sp,sp,8
1000f424:	f800283a 	ret
1000f428:	117ffd44 	addi	r5,r2,-11
1000f42c:	814a983a 	sll	r5,r16,r5
1000f430:	00800434 	movhi	r2,16
1000f434:	10bfffc4 	addi	r2,r2,-1
1000f438:	288a703a 	and	r5,r5,r2
1000f43c:	0021883a 	mov	r16,zero
1000f440:	003ff206 	br	1000f40c <__floatunsidf+0x58>

1000f444 <__clzsi2>:
1000f444:	00bfffd4 	movui	r2,65535
1000f448:	11000436 	bltu	r2,r4,1000f45c <__clzsi2+0x18>
1000f44c:	20804030 	cmpltui	r2,r4,256
1000f450:	10000e26 	beq	r2,zero,1000f48c <__clzsi2+0x48>
1000f454:	01400804 	movi	r5,32
1000f458:	00000406 	br	1000f46c <__clzsi2+0x28>
1000f45c:	00804034 	movhi	r2,256
1000f460:	20800736 	bltu	r4,r2,1000f480 <__clzsi2+0x3c>
1000f464:	2008d63a 	srli	r4,r4,24
1000f468:	01400204 	movi	r5,8
1000f46c:	00c40074 	movhi	r3,4097
1000f470:	20c7883a 	add	r3,r4,r3
1000f474:	188a7d03 	ldbu	r2,10740(r3)
1000f478:	2885c83a 	sub	r2,r5,r2
1000f47c:	f800283a 	ret
1000f480:	2008d43a 	srli	r4,r4,16
1000f484:	01400404 	movi	r5,16
1000f488:	003ff806 	br	1000f46c <__clzsi2+0x28>
1000f48c:	2008d23a 	srli	r4,r4,8
1000f490:	01400604 	movi	r5,24
1000f494:	003ff506 	br	1000f46c <__clzsi2+0x28>

1000f498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f498:	defffe04 	addi	sp,sp,-8
1000f49c:	dfc00115 	stw	ra,4(sp)
1000f4a0:	df000015 	stw	fp,0(sp)
1000f4a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f4a8:	d0a00917 	ldw	r2,-32732(gp)
1000f4ac:	10000326 	beq	r2,zero,1000f4bc <alt_get_errno+0x24>
1000f4b0:	d0a00917 	ldw	r2,-32732(gp)
1000f4b4:	103ee83a 	callr	r2
1000f4b8:	00000106 	br	1000f4c0 <alt_get_errno+0x28>
1000f4bc:	d0a70804 	addi	r2,gp,-25568
}
1000f4c0:	e037883a 	mov	sp,fp
1000f4c4:	dfc00117 	ldw	ra,4(sp)
1000f4c8:	df000017 	ldw	fp,0(sp)
1000f4cc:	dec00204 	addi	sp,sp,8
1000f4d0:	f800283a 	ret

1000f4d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000f4d4:	defffb04 	addi	sp,sp,-20
1000f4d8:	dfc00415 	stw	ra,16(sp)
1000f4dc:	df000315 	stw	fp,12(sp)
1000f4e0:	df000304 	addi	fp,sp,12
1000f4e4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000f4e8:	e0bffd17 	ldw	r2,-12(fp)
1000f4ec:	10000916 	blt	r2,zero,1000f514 <close+0x40>
1000f4f0:	e0fffd17 	ldw	r3,-12(fp)
1000f4f4:	1805883a 	mov	r2,r3
1000f4f8:	1085883a 	add	r2,r2,r2
1000f4fc:	10c5883a 	add	r2,r2,r3
1000f500:	100490ba 	slli	r2,r2,2
1000f504:	00c40074 	movhi	r3,4097
1000f508:	18cd3a04 	addi	r3,r3,13544
1000f50c:	10c5883a 	add	r2,r2,r3
1000f510:	00000106 	br	1000f518 <close+0x44>
1000f514:	0005883a 	mov	r2,zero
1000f518:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
1000f51c:	e0bfff17 	ldw	r2,-4(fp)
1000f520:	10001926 	beq	r2,zero,1000f588 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000f524:	e0bfff17 	ldw	r2,-4(fp)
1000f528:	10800017 	ldw	r2,0(r2)
1000f52c:	10800417 	ldw	r2,16(r2)
1000f530:	10000626 	beq	r2,zero,1000f54c <close+0x78>
1000f534:	e0bfff17 	ldw	r2,-4(fp)
1000f538:	10800017 	ldw	r2,0(r2)
1000f53c:	10800417 	ldw	r2,16(r2)
1000f540:	e13fff17 	ldw	r4,-4(fp)
1000f544:	103ee83a 	callr	r2
1000f548:	00000106 	br	1000f550 <close+0x7c>
1000f54c:	0005883a 	mov	r2,zero
1000f550:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000f554:	e13ffd17 	ldw	r4,-12(fp)
1000f558:	000fd900 	call	1000fd90 <alt_release_fd>
    if (rval < 0)
1000f55c:	e0bffe17 	ldw	r2,-8(fp)
1000f560:	1000070e 	bge	r2,zero,1000f580 <close+0xac>
    {
      ALT_ERRNO = -rval;
1000f564:	000f4980 	call	1000f498 <alt_get_errno>
1000f568:	1007883a 	mov	r3,r2
1000f56c:	e0bffe17 	ldw	r2,-8(fp)
1000f570:	0085c83a 	sub	r2,zero,r2
1000f574:	18800015 	stw	r2,0(r3)
      return -1;
1000f578:	00bfffc4 	movi	r2,-1
1000f57c:	00000706 	br	1000f59c <close+0xc8>
    }
    return 0;
1000f580:	0005883a 	mov	r2,zero
1000f584:	00000506 	br	1000f59c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f588:	000f4980 	call	1000f498 <alt_get_errno>
1000f58c:	1007883a 	mov	r3,r2
1000f590:	00801444 	movi	r2,81
1000f594:	18800015 	stw	r2,0(r3)
    return -1;
1000f598:	00bfffc4 	movi	r2,-1
  }
}
1000f59c:	e037883a 	mov	sp,fp
1000f5a0:	dfc00117 	ldw	ra,4(sp)
1000f5a4:	df000017 	ldw	fp,0(sp)
1000f5a8:	dec00204 	addi	sp,sp,8
1000f5ac:	f800283a 	ret

1000f5b0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000f5b0:	defffc04 	addi	sp,sp,-16
1000f5b4:	df000315 	stw	fp,12(sp)
1000f5b8:	df000304 	addi	fp,sp,12
1000f5bc:	e13fff15 	stw	r4,-4(fp)
1000f5c0:	e17ffe15 	stw	r5,-8(fp)
1000f5c4:	e1bffd15 	stw	r6,-12(fp)
  return len;
1000f5c8:	e0bffd17 	ldw	r2,-12(fp)
}
1000f5cc:	e037883a 	mov	sp,fp
1000f5d0:	df000017 	ldw	fp,0(sp)
1000f5d4:	dec00104 	addi	sp,sp,4
1000f5d8:	f800283a 	ret

1000f5dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000f5dc:	defffd04 	addi	sp,sp,-12
1000f5e0:	df000215 	stw	fp,8(sp)
1000f5e4:	df000204 	addi	fp,sp,8
1000f5e8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000f5ec:	0001883a 	nop
1000f5f0:	e0bffe17 	ldw	r2,-8(fp)
1000f5f4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000f5f8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000f5fc:	10000226 	beq	r2,zero,1000f608 <_exit+0x2c>
    ALT_SIM_FAIL();
1000f600:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
1000f604:	00000106 	br	1000f60c <_exit+0x30>
    ALT_SIM_PASS();
1000f608:	002af0b0 	cmpltui	zero,zero,43970
}
1000f60c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000f610:	003fff06 	br	1000f610 <_exit+0x34>

1000f614 <alt_get_errno>:
{
1000f614:	defffe04 	addi	sp,sp,-8
1000f618:	dfc00115 	stw	ra,4(sp)
1000f61c:	df000015 	stw	fp,0(sp)
1000f620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f624:	d0a00917 	ldw	r2,-32732(gp)
1000f628:	10000326 	beq	r2,zero,1000f638 <alt_get_errno+0x24>
1000f62c:	d0a00917 	ldw	r2,-32732(gp)
1000f630:	103ee83a 	callr	r2
1000f634:	00000106 	br	1000f63c <alt_get_errno+0x28>
1000f638:	d0a70804 	addi	r2,gp,-25568
}
1000f63c:	e037883a 	mov	sp,fp
1000f640:	dfc00117 	ldw	ra,4(sp)
1000f644:	df000017 	ldw	fp,0(sp)
1000f648:	dec00204 	addi	sp,sp,8
1000f64c:	f800283a 	ret

1000f650 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000f650:	defffb04 	addi	sp,sp,-20
1000f654:	dfc00415 	stw	ra,16(sp)
1000f658:	df000315 	stw	fp,12(sp)
1000f65c:	df000304 	addi	fp,sp,12
1000f660:	e13ffe15 	stw	r4,-8(fp)
1000f664:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f668:	e0bffe17 	ldw	r2,-8(fp)
1000f66c:	10000916 	blt	r2,zero,1000f694 <fstat+0x44>
1000f670:	e0fffe17 	ldw	r3,-8(fp)
1000f674:	1805883a 	mov	r2,r3
1000f678:	1085883a 	add	r2,r2,r2
1000f67c:	10c5883a 	add	r2,r2,r3
1000f680:	100490ba 	slli	r2,r2,2
1000f684:	00c40074 	movhi	r3,4097
1000f688:	18cd3a04 	addi	r3,r3,13544
1000f68c:	10c5883a 	add	r2,r2,r3
1000f690:	00000106 	br	1000f698 <fstat+0x48>
1000f694:	0005883a 	mov	r2,zero
1000f698:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f69c:	e0bfff17 	ldw	r2,-4(fp)
1000f6a0:	10001026 	beq	r2,zero,1000f6e4 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000f6a4:	e0bfff17 	ldw	r2,-4(fp)
1000f6a8:	10800017 	ldw	r2,0(r2)
1000f6ac:	10800817 	ldw	r2,32(r2)
1000f6b0:	10000726 	beq	r2,zero,1000f6d0 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
1000f6b4:	e0bfff17 	ldw	r2,-4(fp)
1000f6b8:	10800017 	ldw	r2,0(r2)
1000f6bc:	10800817 	ldw	r2,32(r2)
1000f6c0:	e17ffd17 	ldw	r5,-12(fp)
1000f6c4:	e13fff17 	ldw	r4,-4(fp)
1000f6c8:	103ee83a 	callr	r2
1000f6cc:	00000a06 	br	1000f6f8 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000f6d0:	e0bffd17 	ldw	r2,-12(fp)
1000f6d4:	00c80004 	movi	r3,8192
1000f6d8:	10c00115 	stw	r3,4(r2)
      return 0;
1000f6dc:	0005883a 	mov	r2,zero
1000f6e0:	00000506 	br	1000f6f8 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f6e4:	000f6140 	call	1000f614 <alt_get_errno>
1000f6e8:	1007883a 	mov	r3,r2
1000f6ec:	00801444 	movi	r2,81
1000f6f0:	18800015 	stw	r2,0(r3)
    return -1;
1000f6f4:	00bfffc4 	movi	r2,-1
  }
}
1000f6f8:	e037883a 	mov	sp,fp
1000f6fc:	dfc00117 	ldw	ra,4(sp)
1000f700:	df000017 	ldw	fp,0(sp)
1000f704:	dec00204 	addi	sp,sp,8
1000f708:	f800283a 	ret

1000f70c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
1000f70c:	deffff04 	addi	sp,sp,-4
1000f710:	df000015 	stw	fp,0(sp)
1000f714:	d839883a 	mov	fp,sp
  return 0;
1000f718:	0005883a 	mov	r2,zero
}
1000f71c:	e037883a 	mov	sp,fp
1000f720:	df000017 	ldw	fp,0(sp)
1000f724:	dec00104 	addi	sp,sp,4
1000f728:	f800283a 	ret

1000f72c <alt_get_errno>:
{
1000f72c:	defffe04 	addi	sp,sp,-8
1000f730:	dfc00115 	stw	ra,4(sp)
1000f734:	df000015 	stw	fp,0(sp)
1000f738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f73c:	d0a00917 	ldw	r2,-32732(gp)
1000f740:	10000326 	beq	r2,zero,1000f750 <alt_get_errno+0x24>
1000f744:	d0a00917 	ldw	r2,-32732(gp)
1000f748:	103ee83a 	callr	r2
1000f74c:	00000106 	br	1000f754 <alt_get_errno+0x28>
1000f750:	d0a70804 	addi	r2,gp,-25568
}
1000f754:	e037883a 	mov	sp,fp
1000f758:	dfc00117 	ldw	ra,4(sp)
1000f75c:	df000017 	ldw	fp,0(sp)
1000f760:	dec00204 	addi	sp,sp,8
1000f764:	f800283a 	ret

1000f768 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000f768:	deffea04 	addi	sp,sp,-88
1000f76c:	dfc01515 	stw	ra,84(sp)
1000f770:	df001415 	stw	fp,80(sp)
1000f774:	df001404 	addi	fp,sp,80
1000f778:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f77c:	e0bfec17 	ldw	r2,-80(fp)
1000f780:	10000916 	blt	r2,zero,1000f7a8 <isatty+0x40>
1000f784:	e0ffec17 	ldw	r3,-80(fp)
1000f788:	1805883a 	mov	r2,r3
1000f78c:	1085883a 	add	r2,r2,r2
1000f790:	10c5883a 	add	r2,r2,r3
1000f794:	100490ba 	slli	r2,r2,2
1000f798:	00c40074 	movhi	r3,4097
1000f79c:	18cd3a04 	addi	r3,r3,13544
1000f7a0:	10c5883a 	add	r2,r2,r3
1000f7a4:	00000106 	br	1000f7ac <isatty+0x44>
1000f7a8:	0005883a 	mov	r2,zero
1000f7ac:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000f7b0:	e0bfff17 	ldw	r2,-4(fp)
1000f7b4:	10000e26 	beq	r2,zero,1000f7f0 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000f7b8:	e0bfff17 	ldw	r2,-4(fp)
1000f7bc:	10800017 	ldw	r2,0(r2)
1000f7c0:	10800817 	ldw	r2,32(r2)
1000f7c4:	1000021e 	bne	r2,zero,1000f7d0 <isatty+0x68>
    {
      return 1;
1000f7c8:	00800044 	movi	r2,1
1000f7cc:	00000d06 	br	1000f804 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000f7d0:	e0bfed04 	addi	r2,fp,-76
1000f7d4:	100b883a 	mov	r5,r2
1000f7d8:	e13fec17 	ldw	r4,-80(fp)
1000f7dc:	000f6500 	call	1000f650 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000f7e0:	e0bfee17 	ldw	r2,-72(fp)
1000f7e4:	10880020 	cmpeqi	r2,r2,8192
1000f7e8:	10803fcc 	andi	r2,r2,255
1000f7ec:	00000506 	br	1000f804 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000f7f0:	000f72c0 	call	1000f72c <alt_get_errno>
1000f7f4:	1007883a 	mov	r3,r2
1000f7f8:	00801444 	movi	r2,81
1000f7fc:	18800015 	stw	r2,0(r3)
    return 0;
1000f800:	0005883a 	mov	r2,zero
  }
}
1000f804:	e037883a 	mov	sp,fp
1000f808:	dfc00117 	ldw	ra,4(sp)
1000f80c:	df000017 	ldw	fp,0(sp)
1000f810:	dec00204 	addi	sp,sp,8
1000f814:	f800283a 	ret

1000f818 <alt_get_errno>:
{
1000f818:	defffe04 	addi	sp,sp,-8
1000f81c:	dfc00115 	stw	ra,4(sp)
1000f820:	df000015 	stw	fp,0(sp)
1000f824:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f828:	d0a00917 	ldw	r2,-32732(gp)
1000f82c:	10000326 	beq	r2,zero,1000f83c <alt_get_errno+0x24>
1000f830:	d0a00917 	ldw	r2,-32732(gp)
1000f834:	103ee83a 	callr	r2
1000f838:	00000106 	br	1000f840 <alt_get_errno+0x28>
1000f83c:	d0a70804 	addi	r2,gp,-25568
}
1000f840:	e037883a 	mov	sp,fp
1000f844:	dfc00117 	ldw	ra,4(sp)
1000f848:	df000017 	ldw	fp,0(sp)
1000f84c:	dec00204 	addi	sp,sp,8
1000f850:	f800283a 	ret

1000f854 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
1000f854:	defffb04 	addi	sp,sp,-20
1000f858:	dfc00415 	stw	ra,16(sp)
1000f85c:	df000315 	stw	fp,12(sp)
1000f860:	df000304 	addi	fp,sp,12
1000f864:	e13ffe15 	stw	r4,-8(fp)
1000f868:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
1000f86c:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
1000f870:	e0bffe17 	ldw	r2,-8(fp)
1000f874:	00802e16 	blt	zero,r2,1000f930 <kill+0xdc>
1000f878:	e0bffd17 	ldw	r2,-12(fp)
1000f87c:	10800828 	cmpgeui	r2,r2,32
1000f880:	1000281e 	bne	r2,zero,1000f924 <kill+0xd0>
1000f884:	e0bffd17 	ldw	r2,-12(fp)
1000f888:	100690ba 	slli	r3,r2,2
1000f88c:	00840074 	movhi	r2,4097
1000f890:	1885883a 	add	r2,r3,r2
1000f894:	10be2717 	ldw	r2,-1892(r2)
1000f898:	1000683a 	jmp	r2
1000f89c:	1000f944 	addi	zero,r2,997
1000f8a0:	1000f924 	muli	zero,r2,996
1000f8a4:	1000f924 	muli	zero,r2,996
1000f8a8:	1000f91c 	xori	zero,r2,996
1000f8ac:	1000f91c 	xori	zero,r2,996
1000f8b0:	1000f91c 	xori	zero,r2,996
1000f8b4:	1000f91c 	xori	zero,r2,996
1000f8b8:	1000f924 	muli	zero,r2,996
1000f8bc:	1000f91c 	xori	zero,r2,996
1000f8c0:	1000f91c 	xori	zero,r2,996
1000f8c4:	1000f91c 	xori	zero,r2,996
1000f8c8:	1000f91c 	xori	zero,r2,996
1000f8cc:	1000f91c 	xori	zero,r2,996
1000f8d0:	1000f91c 	xori	zero,r2,996
1000f8d4:	1000f91c 	xori	zero,r2,996
1000f8d8:	1000f91c 	xori	zero,r2,996
1000f8dc:	1000f944 	addi	zero,r2,997
1000f8e0:	1000f924 	muli	zero,r2,996
1000f8e4:	1000f924 	muli	zero,r2,996
1000f8e8:	1000f924 	muli	zero,r2,996
1000f8ec:	1000f944 	addi	zero,r2,997
1000f8f0:	1000f924 	muli	zero,r2,996
1000f8f4:	1000f924 	muli	zero,r2,996
1000f8f8:	1000f91c 	xori	zero,r2,996
1000f8fc:	1000f91c 	xori	zero,r2,996
1000f900:	1000f91c 	xori	zero,r2,996
1000f904:	1000f91c 	xori	zero,r2,996
1000f908:	1000f91c 	xori	zero,r2,996
1000f90c:	1000f924 	muli	zero,r2,996
1000f910:	1000f924 	muli	zero,r2,996
1000f914:	1000f91c 	xori	zero,r2,996
1000f918:	1000f91c 	xori	zero,r2,996
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
1000f91c:	0009883a 	mov	r4,zero
1000f920:	000f5dc0 	call	1000f5dc <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
1000f924:	00800584 	movi	r2,22
1000f928:	e0bfff15 	stw	r2,-4(fp)
1000f92c:	00000606 	br	1000f948 <kill+0xf4>
    }
  }

  else if (pid > 0)
1000f930:	e0bffe17 	ldw	r2,-8(fp)
1000f934:	0080040e 	bge	zero,r2,1000f948 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
1000f938:	008000c4 	movi	r2,3
1000f93c:	e0bfff15 	stw	r2,-4(fp)
1000f940:	00000106 	br	1000f948 <kill+0xf4>
      break;
1000f944:	0001883a 	nop
  }

  if (status)
1000f948:	e0bfff17 	ldw	r2,-4(fp)
1000f94c:	10000626 	beq	r2,zero,1000f968 <kill+0x114>
  {
    ALT_ERRNO = status;
1000f950:	000f8180 	call	1000f818 <alt_get_errno>
1000f954:	1007883a 	mov	r3,r2
1000f958:	e0bfff17 	ldw	r2,-4(fp)
1000f95c:	18800015 	stw	r2,0(r3)
    return -1;
1000f960:	00bfffc4 	movi	r2,-1
1000f964:	00000106 	br	1000f96c <kill+0x118>
  }

  return 0;
1000f968:	0005883a 	mov	r2,zero
}
1000f96c:	e037883a 	mov	sp,fp
1000f970:	dfc00117 	ldw	ra,4(sp)
1000f974:	df000017 	ldw	fp,0(sp)
1000f978:	dec00204 	addi	sp,sp,8
1000f97c:	f800283a 	ret

1000f980 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000f980:	defffc04 	addi	sp,sp,-16
1000f984:	df000315 	stw	fp,12(sp)
1000f988:	df000304 	addi	fp,sp,12
1000f98c:	e13fff15 	stw	r4,-4(fp)
1000f990:	e17ffe15 	stw	r5,-8(fp)
1000f994:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
1000f998:	e0fffe17 	ldw	r3,-8(fp)
1000f99c:	e0bfff17 	ldw	r2,-4(fp)
1000f9a0:	18800c26 	beq	r3,r2,1000f9d4 <alt_load_section+0x54>
  {
    while( to != end )
1000f9a4:	00000806 	br	1000f9c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000f9a8:	e0ffff17 	ldw	r3,-4(fp)
1000f9ac:	18800104 	addi	r2,r3,4
1000f9b0:	e0bfff15 	stw	r2,-4(fp)
1000f9b4:	e0bffe17 	ldw	r2,-8(fp)
1000f9b8:	11000104 	addi	r4,r2,4
1000f9bc:	e13ffe15 	stw	r4,-8(fp)
1000f9c0:	18c00017 	ldw	r3,0(r3)
1000f9c4:	10c00015 	stw	r3,0(r2)
    while( to != end )
1000f9c8:	e0fffe17 	ldw	r3,-8(fp)
1000f9cc:	e0bffd17 	ldw	r2,-12(fp)
1000f9d0:	18bff51e 	bne	r3,r2,1000f9a8 <alt_load_section+0x28>
    }
  }
}
1000f9d4:	0001883a 	nop
1000f9d8:	e037883a 	mov	sp,fp
1000f9dc:	df000017 	ldw	fp,0(sp)
1000f9e0:	dec00104 	addi	sp,sp,4
1000f9e4:	f800283a 	ret

1000f9e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000f9e8:	defffe04 	addi	sp,sp,-8
1000f9ec:	dfc00115 	stw	ra,4(sp)
1000f9f0:	df000015 	stw	fp,0(sp)
1000f9f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000f9f8:	01840074 	movhi	r6,4097
1000f9fc:	3191c004 	addi	r6,r6,18176
1000fa00:	01440074 	movhi	r5,4097
1000fa04:	294aca04 	addi	r5,r5,11048
1000fa08:	01040074 	movhi	r4,4097
1000fa0c:	2111c004 	addi	r4,r4,18176
1000fa10:	000f9800 	call	1000f980 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000fa14:	01840034 	movhi	r6,4096
1000fa18:	31808904 	addi	r6,r6,548
1000fa1c:	01440034 	movhi	r5,4096
1000fa20:	29400804 	addi	r5,r5,32
1000fa24:	01040034 	movhi	r4,4096
1000fa28:	21000804 	addi	r4,r4,32
1000fa2c:	000f9800 	call	1000f980 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000fa30:	01840074 	movhi	r6,4097
1000fa34:	318aca04 	addi	r6,r6,11048
1000fa38:	01440074 	movhi	r5,4097
1000fa3c:	29475604 	addi	r5,r5,7512
1000fa40:	01040074 	movhi	r4,4097
1000fa44:	21075604 	addi	r4,r4,7512
1000fa48:	000f9800 	call	1000f980 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000fa4c:	0010de40 	call	10010de4 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000fa50:	0010fb00 	call	10010fb0 <alt_icache_flush_all>
}
1000fa54:	0001883a 	nop
1000fa58:	e037883a 	mov	sp,fp
1000fa5c:	dfc00117 	ldw	ra,4(sp)
1000fa60:	df000017 	ldw	fp,0(sp)
1000fa64:	dec00204 	addi	sp,sp,8
1000fa68:	f800283a 	ret

1000fa6c <alt_get_errno>:
{
1000fa6c:	defffe04 	addi	sp,sp,-8
1000fa70:	dfc00115 	stw	ra,4(sp)
1000fa74:	df000015 	stw	fp,0(sp)
1000fa78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fa7c:	d0a00917 	ldw	r2,-32732(gp)
1000fa80:	10000326 	beq	r2,zero,1000fa90 <alt_get_errno+0x24>
1000fa84:	d0a00917 	ldw	r2,-32732(gp)
1000fa88:	103ee83a 	callr	r2
1000fa8c:	00000106 	br	1000fa94 <alt_get_errno+0x28>
1000fa90:	d0a70804 	addi	r2,gp,-25568
}
1000fa94:	e037883a 	mov	sp,fp
1000fa98:	dfc00117 	ldw	ra,4(sp)
1000fa9c:	df000017 	ldw	fp,0(sp)
1000faa0:	dec00204 	addi	sp,sp,8
1000faa4:	f800283a 	ret

1000faa8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000faa8:	defff904 	addi	sp,sp,-28
1000faac:	dfc00615 	stw	ra,24(sp)
1000fab0:	df000515 	stw	fp,20(sp)
1000fab4:	df000504 	addi	fp,sp,20
1000fab8:	e13ffd15 	stw	r4,-12(fp)
1000fabc:	e17ffc15 	stw	r5,-16(fp)
1000fac0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000fac4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fac8:	e0bffd17 	ldw	r2,-12(fp)
1000facc:	10000916 	blt	r2,zero,1000faf4 <lseek+0x4c>
1000fad0:	e0fffd17 	ldw	r3,-12(fp)
1000fad4:	1805883a 	mov	r2,r3
1000fad8:	1085883a 	add	r2,r2,r2
1000fadc:	10c5883a 	add	r2,r2,r3
1000fae0:	100490ba 	slli	r2,r2,2
1000fae4:	00c40074 	movhi	r3,4097
1000fae8:	18cd3a04 	addi	r3,r3,13544
1000faec:	10c5883a 	add	r2,r2,r3
1000faf0:	00000106 	br	1000faf8 <lseek+0x50>
1000faf4:	0005883a 	mov	r2,zero
1000faf8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
1000fafc:	e0bffe17 	ldw	r2,-8(fp)
1000fb00:	10001026 	beq	r2,zero,1000fb44 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000fb04:	e0bffe17 	ldw	r2,-8(fp)
1000fb08:	10800017 	ldw	r2,0(r2)
1000fb0c:	10800717 	ldw	r2,28(r2)
1000fb10:	10000926 	beq	r2,zero,1000fb38 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000fb14:	e0bffe17 	ldw	r2,-8(fp)
1000fb18:	10800017 	ldw	r2,0(r2)
1000fb1c:	10800717 	ldw	r2,28(r2)
1000fb20:	e1bffb17 	ldw	r6,-20(fp)
1000fb24:	e17ffc17 	ldw	r5,-16(fp)
1000fb28:	e13ffe17 	ldw	r4,-8(fp)
1000fb2c:	103ee83a 	callr	r2
1000fb30:	e0bfff15 	stw	r2,-4(fp)
1000fb34:	00000506 	br	1000fb4c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000fb38:	00bfde84 	movi	r2,-134
1000fb3c:	e0bfff15 	stw	r2,-4(fp)
1000fb40:	00000206 	br	1000fb4c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
1000fb44:	00bfebc4 	movi	r2,-81
1000fb48:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
1000fb4c:	e0bfff17 	ldw	r2,-4(fp)
1000fb50:	1000070e 	bge	r2,zero,1000fb70 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
1000fb54:	000fa6c0 	call	1000fa6c <alt_get_errno>
1000fb58:	1007883a 	mov	r3,r2
1000fb5c:	e0bfff17 	ldw	r2,-4(fp)
1000fb60:	0085c83a 	sub	r2,zero,r2
1000fb64:	18800015 	stw	r2,0(r3)
    rc = -1;
1000fb68:	00bfffc4 	movi	r2,-1
1000fb6c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
1000fb70:	e0bfff17 	ldw	r2,-4(fp)
}
1000fb74:	e037883a 	mov	sp,fp
1000fb78:	dfc00117 	ldw	ra,4(sp)
1000fb7c:	df000017 	ldw	fp,0(sp)
1000fb80:	dec00204 	addi	sp,sp,8
1000fb84:	f800283a 	ret

1000fb88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000fb88:	defffd04 	addi	sp,sp,-12
1000fb8c:	dfc00215 	stw	ra,8(sp)
1000fb90:	df000115 	stw	fp,4(sp)
1000fb94:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000fb98:	0009883a 	mov	r4,zero
1000fb9c:	001005c0 	call	1001005c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000fba0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000fba4:	00100980 	call	10010098 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000fba8:	01840074 	movhi	r6,4097
1000fbac:	318ac004 	addi	r6,r6,11008
1000fbb0:	01440074 	movhi	r5,4097
1000fbb4:	294ac004 	addi	r5,r5,11008
1000fbb8:	01040074 	movhi	r4,4097
1000fbbc:	210ac004 	addi	r4,r4,11008
1000fbc0:	001133c0 	call	1001133c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000fbc4:	0010ee80 	call	10010ee8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000fbc8:	01040074 	movhi	r4,4097
1000fbcc:	2103d304 	addi	r4,r4,3916
1000fbd0:	0011ae80 	call	10011ae8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000fbd4:	d0a70a17 	ldw	r2,-25560(gp)
1000fbd8:	d0e70b17 	ldw	r3,-25556(gp)
1000fbdc:	d1270c17 	ldw	r4,-25552(gp)
1000fbe0:	200d883a 	mov	r6,r4
1000fbe4:	180b883a 	mov	r5,r3
1000fbe8:	1009883a 	mov	r4,r2
1000fbec:	00003c40 	call	100003c4 <main>
1000fbf0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000fbf4:	01000044 	movi	r4,1
1000fbf8:	000f4d40 	call	1000f4d4 <close>
  exit (result);
1000fbfc:	e13fff17 	ldw	r4,-4(fp)
1000fc00:	0011afc0 	call	10011afc <exit>

1000fc04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000fc04:	defffe04 	addi	sp,sp,-8
1000fc08:	df000115 	stw	fp,4(sp)
1000fc0c:	df000104 	addi	fp,sp,4
1000fc10:	e13fff15 	stw	r4,-4(fp)
}
1000fc14:	0001883a 	nop
1000fc18:	e037883a 	mov	sp,fp
1000fc1c:	df000017 	ldw	fp,0(sp)
1000fc20:	dec00104 	addi	sp,sp,4
1000fc24:	f800283a 	ret

1000fc28 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000fc28:	defffe04 	addi	sp,sp,-8
1000fc2c:	df000115 	stw	fp,4(sp)
1000fc30:	df000104 	addi	fp,sp,4
1000fc34:	e13fff15 	stw	r4,-4(fp)
}
1000fc38:	0001883a 	nop
1000fc3c:	e037883a 	mov	sp,fp
1000fc40:	df000017 	ldw	fp,0(sp)
1000fc44:	dec00104 	addi	sp,sp,4
1000fc48:	f800283a 	ret

1000fc4c <alt_get_errno>:
{
1000fc4c:	defffe04 	addi	sp,sp,-8
1000fc50:	dfc00115 	stw	ra,4(sp)
1000fc54:	df000015 	stw	fp,0(sp)
1000fc58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fc5c:	d0a00917 	ldw	r2,-32732(gp)
1000fc60:	10000326 	beq	r2,zero,1000fc70 <alt_get_errno+0x24>
1000fc64:	d0a00917 	ldw	r2,-32732(gp)
1000fc68:	103ee83a 	callr	r2
1000fc6c:	00000106 	br	1000fc74 <alt_get_errno+0x28>
1000fc70:	d0a70804 	addi	r2,gp,-25568
}
1000fc74:	e037883a 	mov	sp,fp
1000fc78:	dfc00117 	ldw	ra,4(sp)
1000fc7c:	df000017 	ldw	fp,0(sp)
1000fc80:	dec00204 	addi	sp,sp,8
1000fc84:	f800283a 	ret

1000fc88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000fc88:	defff904 	addi	sp,sp,-28
1000fc8c:	dfc00615 	stw	ra,24(sp)
1000fc90:	df000515 	stw	fp,20(sp)
1000fc94:	df000504 	addi	fp,sp,20
1000fc98:	e13ffd15 	stw	r4,-12(fp)
1000fc9c:	e17ffc15 	stw	r5,-16(fp)
1000fca0:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000fca4:	e0bffd17 	ldw	r2,-12(fp)
1000fca8:	10000916 	blt	r2,zero,1000fcd0 <read+0x48>
1000fcac:	e0fffd17 	ldw	r3,-12(fp)
1000fcb0:	1805883a 	mov	r2,r3
1000fcb4:	1085883a 	add	r2,r2,r2
1000fcb8:	10c5883a 	add	r2,r2,r3
1000fcbc:	100490ba 	slli	r2,r2,2
1000fcc0:	00c40074 	movhi	r3,4097
1000fcc4:	18cd3a04 	addi	r3,r3,13544
1000fcc8:	10c5883a 	add	r2,r2,r3
1000fccc:	00000106 	br	1000fcd4 <read+0x4c>
1000fcd0:	0005883a 	mov	r2,zero
1000fcd4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000fcd8:	e0bfff17 	ldw	r2,-4(fp)
1000fcdc:	10002226 	beq	r2,zero,1000fd68 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fce0:	e0bfff17 	ldw	r2,-4(fp)
1000fce4:	10800217 	ldw	r2,8(r2)
1000fce8:	108000cc 	andi	r2,r2,3
1000fcec:	10800060 	cmpeqi	r2,r2,1
1000fcf0:	1000181e 	bne	r2,zero,1000fd54 <read+0xcc>
        (fd->dev->read))
1000fcf4:	e0bfff17 	ldw	r2,-4(fp)
1000fcf8:	10800017 	ldw	r2,0(r2)
1000fcfc:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000fd00:	10001426 	beq	r2,zero,1000fd54 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000fd04:	e0bfff17 	ldw	r2,-4(fp)
1000fd08:	10800017 	ldw	r2,0(r2)
1000fd0c:	10800517 	ldw	r2,20(r2)
1000fd10:	e0fffb17 	ldw	r3,-20(fp)
1000fd14:	180d883a 	mov	r6,r3
1000fd18:	e17ffc17 	ldw	r5,-16(fp)
1000fd1c:	e13fff17 	ldw	r4,-4(fp)
1000fd20:	103ee83a 	callr	r2
1000fd24:	e0bffe15 	stw	r2,-8(fp)
1000fd28:	e0bffe17 	ldw	r2,-8(fp)
1000fd2c:	1000070e 	bge	r2,zero,1000fd4c <read+0xc4>
        {
          ALT_ERRNO = -rval;
1000fd30:	000fc4c0 	call	1000fc4c <alt_get_errno>
1000fd34:	1007883a 	mov	r3,r2
1000fd38:	e0bffe17 	ldw	r2,-8(fp)
1000fd3c:	0085c83a 	sub	r2,zero,r2
1000fd40:	18800015 	stw	r2,0(r3)
          return -1;
1000fd44:	00bfffc4 	movi	r2,-1
1000fd48:	00000c06 	br	1000fd7c <read+0xf4>
        }
        return rval;
1000fd4c:	e0bffe17 	ldw	r2,-8(fp)
1000fd50:	00000a06 	br	1000fd7c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000fd54:	000fc4c0 	call	1000fc4c <alt_get_errno>
1000fd58:	1007883a 	mov	r3,r2
1000fd5c:	00800344 	movi	r2,13
1000fd60:	18800015 	stw	r2,0(r3)
1000fd64:	00000406 	br	1000fd78 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000fd68:	000fc4c0 	call	1000fc4c <alt_get_errno>
1000fd6c:	1007883a 	mov	r3,r2
1000fd70:	00801444 	movi	r2,81
1000fd74:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000fd78:	00bfffc4 	movi	r2,-1
}
1000fd7c:	e037883a 	mov	sp,fp
1000fd80:	dfc00117 	ldw	ra,4(sp)
1000fd84:	df000017 	ldw	fp,0(sp)
1000fd88:	dec00204 	addi	sp,sp,8
1000fd8c:	f800283a 	ret

1000fd90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000fd90:	defffe04 	addi	sp,sp,-8
1000fd94:	df000115 	stw	fp,4(sp)
1000fd98:	df000104 	addi	fp,sp,4
1000fd9c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1000fda0:	e0bfff17 	ldw	r2,-4(fp)
1000fda4:	108000d0 	cmplti	r2,r2,3
1000fda8:	1000101e 	bne	r2,zero,1000fdec <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
1000fdac:	e0ffff17 	ldw	r3,-4(fp)
1000fdb0:	1805883a 	mov	r2,r3
1000fdb4:	1085883a 	add	r2,r2,r2
1000fdb8:	10c5883a 	add	r2,r2,r3
1000fdbc:	100490ba 	slli	r2,r2,2
1000fdc0:	00c40074 	movhi	r3,4097
1000fdc4:	10c7883a 	add	r3,r2,r3
1000fdc8:	180d3c15 	stw	zero,13552(r3)
    alt_fd_list[fd].dev      = 0;
1000fdcc:	e0ffff17 	ldw	r3,-4(fp)
1000fdd0:	1805883a 	mov	r2,r3
1000fdd4:	1085883a 	add	r2,r2,r2
1000fdd8:	10c5883a 	add	r2,r2,r3
1000fddc:	100490ba 	slli	r2,r2,2
1000fde0:	00c40074 	movhi	r3,4097
1000fde4:	10c7883a 	add	r3,r2,r3
1000fde8:	180d3a15 	stw	zero,13544(r3)
  }
}
1000fdec:	0001883a 	nop
1000fdf0:	e037883a 	mov	sp,fp
1000fdf4:	df000017 	ldw	fp,0(sp)
1000fdf8:	dec00104 	addi	sp,sp,4
1000fdfc:	f800283a 	ret

1000fe00 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000fe00:	defff904 	addi	sp,sp,-28
1000fe04:	df000615 	stw	fp,24(sp)
1000fe08:	df000604 	addi	fp,sp,24
1000fe0c:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
1000fe10:	0005303a 	rdctl	r2,status
1000fe14:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fe18:	e0fffd17 	ldw	r3,-12(fp)
1000fe1c:	00bfff84 	movi	r2,-2
1000fe20:	1884703a 	and	r2,r3,r2
1000fe24:	1001703a 	wrctl	status,r2
  return context;
1000fe28:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000fe2c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000fe30:	d0a00a17 	ldw	r2,-32728(gp)
1000fe34:	10c000c4 	addi	r3,r2,3
1000fe38:	00bfff04 	movi	r2,-4
1000fe3c:	1884703a 	and	r2,r3,r2
1000fe40:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000fe44:	d0e00a17 	ldw	r3,-32728(gp)
1000fe48:	e0bffa17 	ldw	r2,-24(fp)
1000fe4c:	1887883a 	add	r3,r3,r2
1000fe50:	00860034 	movhi	r2,6144
1000fe54:	10800004 	addi	r2,r2,0
1000fe58:	10c0072e 	bgeu	r2,r3,1000fe78 <sbrk+0x78>
1000fe5c:	e0bfff17 	ldw	r2,-4(fp)
1000fe60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
1000fe64:	e0bffc17 	ldw	r2,-16(fp)
1000fe68:	1001703a 	wrctl	status,r2
}
1000fe6c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000fe70:	00bfffc4 	movi	r2,-1
1000fe74:	00000c06 	br	1000fea8 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
1000fe78:	d0a00a17 	ldw	r2,-32728(gp)
1000fe7c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
1000fe80:	d0e00a17 	ldw	r3,-32728(gp)
1000fe84:	e0bffa17 	ldw	r2,-24(fp)
1000fe88:	1885883a 	add	r2,r3,r2
1000fe8c:	d0a00a15 	stw	r2,-32728(gp)
1000fe90:	e0bfff17 	ldw	r2,-4(fp)
1000fe94:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
1000fe98:	e0bffb17 	ldw	r2,-20(fp)
1000fe9c:	1001703a 	wrctl	status,r2
}
1000fea0:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000fea4:	e0bffe17 	ldw	r2,-8(fp)
} 
1000fea8:	e037883a 	mov	sp,fp
1000feac:	df000017 	ldw	fp,0(sp)
1000feb0:	dec00104 	addi	sp,sp,4
1000feb4:	f800283a 	ret

1000feb8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000feb8:	defffd04 	addi	sp,sp,-12
1000febc:	dfc00215 	stw	ra,8(sp)
1000fec0:	df000115 	stw	fp,4(sp)
1000fec4:	df000104 	addi	fp,sp,4
1000fec8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000fecc:	e13fff17 	ldw	r4,-4(fp)
1000fed0:	0010c8c0 	call	10010c8c <alt_busy_sleep>
}
1000fed4:	e037883a 	mov	sp,fp
1000fed8:	dfc00117 	ldw	ra,4(sp)
1000fedc:	df000017 	ldw	fp,0(sp)
1000fee0:	dec00204 	addi	sp,sp,8
1000fee4:	f800283a 	ret

1000fee8 <alt_get_errno>:
{
1000fee8:	defffe04 	addi	sp,sp,-8
1000feec:	dfc00115 	stw	ra,4(sp)
1000fef0:	df000015 	stw	fp,0(sp)
1000fef4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000fef8:	d0a00917 	ldw	r2,-32732(gp)
1000fefc:	10000326 	beq	r2,zero,1000ff0c <alt_get_errno+0x24>
1000ff00:	d0a00917 	ldw	r2,-32732(gp)
1000ff04:	103ee83a 	callr	r2
1000ff08:	00000106 	br	1000ff10 <alt_get_errno+0x28>
1000ff0c:	d0a70804 	addi	r2,gp,-25568
}
1000ff10:	e037883a 	mov	sp,fp
1000ff14:	dfc00117 	ldw	ra,4(sp)
1000ff18:	df000017 	ldw	fp,0(sp)
1000ff1c:	dec00204 	addi	sp,sp,8
1000ff20:	f800283a 	ret

1000ff24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000ff24:	defff904 	addi	sp,sp,-28
1000ff28:	dfc00615 	stw	ra,24(sp)
1000ff2c:	df000515 	stw	fp,20(sp)
1000ff30:	df000504 	addi	fp,sp,20
1000ff34:	e13ffd15 	stw	r4,-12(fp)
1000ff38:	e17ffc15 	stw	r5,-16(fp)
1000ff3c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ff40:	e0bffd17 	ldw	r2,-12(fp)
1000ff44:	10000916 	blt	r2,zero,1000ff6c <write+0x48>
1000ff48:	e0fffd17 	ldw	r3,-12(fp)
1000ff4c:	1805883a 	mov	r2,r3
1000ff50:	1085883a 	add	r2,r2,r2
1000ff54:	10c5883a 	add	r2,r2,r3
1000ff58:	100490ba 	slli	r2,r2,2
1000ff5c:	00c40074 	movhi	r3,4097
1000ff60:	18cd3a04 	addi	r3,r3,13544
1000ff64:	10c5883a 	add	r2,r2,r3
1000ff68:	00000106 	br	1000ff70 <write+0x4c>
1000ff6c:	0005883a 	mov	r2,zero
1000ff70:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
1000ff74:	e0bfff17 	ldw	r2,-4(fp)
1000ff78:	10002126 	beq	r2,zero,10010000 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000ff7c:	e0bfff17 	ldw	r2,-4(fp)
1000ff80:	10800217 	ldw	r2,8(r2)
1000ff84:	108000cc 	andi	r2,r2,3
1000ff88:	10001826 	beq	r2,zero,1000ffec <write+0xc8>
1000ff8c:	e0bfff17 	ldw	r2,-4(fp)
1000ff90:	10800017 	ldw	r2,0(r2)
1000ff94:	10800617 	ldw	r2,24(r2)
1000ff98:	10001426 	beq	r2,zero,1000ffec <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000ff9c:	e0bfff17 	ldw	r2,-4(fp)
1000ffa0:	10800017 	ldw	r2,0(r2)
1000ffa4:	10800617 	ldw	r2,24(r2)
1000ffa8:	e0fffb17 	ldw	r3,-20(fp)
1000ffac:	180d883a 	mov	r6,r3
1000ffb0:	e17ffc17 	ldw	r5,-16(fp)
1000ffb4:	e13fff17 	ldw	r4,-4(fp)
1000ffb8:	103ee83a 	callr	r2
1000ffbc:	e0bffe15 	stw	r2,-8(fp)
1000ffc0:	e0bffe17 	ldw	r2,-8(fp)
1000ffc4:	1000070e 	bge	r2,zero,1000ffe4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
1000ffc8:	000fee80 	call	1000fee8 <alt_get_errno>
1000ffcc:	1007883a 	mov	r3,r2
1000ffd0:	e0bffe17 	ldw	r2,-8(fp)
1000ffd4:	0085c83a 	sub	r2,zero,r2
1000ffd8:	18800015 	stw	r2,0(r3)
        return -1;
1000ffdc:	00bfffc4 	movi	r2,-1
1000ffe0:	00000c06 	br	10010014 <write+0xf0>
      }
      return rval;
1000ffe4:	e0bffe17 	ldw	r2,-8(fp)
1000ffe8:	00000a06 	br	10010014 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000ffec:	000fee80 	call	1000fee8 <alt_get_errno>
1000fff0:	1007883a 	mov	r3,r2
1000fff4:	00800344 	movi	r2,13
1000fff8:	18800015 	stw	r2,0(r3)
1000fffc:	00000406 	br	10010010 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010000:	000fee80 	call	1000fee8 <alt_get_errno>
10010004:	1007883a 	mov	r3,r2
10010008:	00801444 	movi	r2,81
1001000c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010010:	00bfffc4 	movi	r2,-1
}
10010014:	e037883a 	mov	sp,fp
10010018:	dfc00117 	ldw	ra,4(sp)
1001001c:	df000017 	ldw	fp,0(sp)
10010020:	dec00204 	addi	sp,sp,8
10010024:	f800283a 	ret

10010028 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010028:	defffd04 	addi	sp,sp,-12
1001002c:	dfc00215 	stw	ra,8(sp)
10010030:	df000115 	stw	fp,4(sp)
10010034:	df000104 	addi	fp,sp,4
10010038:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1001003c:	d1600604 	addi	r5,gp,-32744
10010040:	e13fff17 	ldw	r4,-4(fp)
10010044:	0010e400 	call	10010e40 <alt_dev_llist_insert>
}
10010048:	e037883a 	mov	sp,fp
1001004c:	dfc00117 	ldw	ra,4(sp)
10010050:	df000017 	ldw	fp,0(sp)
10010054:	dec00204 	addi	sp,sp,8
10010058:	f800283a 	ret

1001005c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001005c:	defffd04 	addi	sp,sp,-12
10010060:	dfc00215 	stw	ra,8(sp)
10010064:	df000115 	stw	fp,4(sp)
10010068:	df000104 	addi	fp,sp,4
1001006c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10010070:	00117dc0 	call	100117dc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010074:	00800044 	movi	r2,1
10010078:	1001703a 	wrctl	status,r2
}
1001007c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
10010080:	0001883a 	nop
10010084:	e037883a 	mov	sp,fp
10010088:	dfc00117 	ldw	ra,4(sp)
1001008c:	df000017 	ldw	fp,0(sp)
10010090:	dec00204 	addi	sp,sp,8
10010094:	f800283a 	ret

10010098 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010098:	defffe04 	addi	sp,sp,-8
1001009c:	dfc00115 	stw	ra,4(sp)
100100a0:	df000015 	stw	fp,0(sp)
100100a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100100a8:	01800144 	movi	r6,5
100100ac:	000b883a 	mov	r5,zero
100100b0:	01040074 	movhi	r4,4097
100100b4:	210da404 	addi	r4,r4,13968
100100b8:	00102480 	call	10010248 <altera_avalon_jtag_uart_init>
100100bc:	01040074 	movhi	r4,4097
100100c0:	210d9a04 	addi	r4,r4,13928
100100c4:	00100280 	call	10010028 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100100c8:	0001883a 	nop
}
100100cc:	0001883a 	nop
100100d0:	e037883a 	mov	sp,fp
100100d4:	dfc00117 	ldw	ra,4(sp)
100100d8:	df000017 	ldw	fp,0(sp)
100100dc:	dec00204 	addi	sp,sp,8
100100e0:	f800283a 	ret

100100e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100100e4:	defffa04 	addi	sp,sp,-24
100100e8:	dfc00515 	stw	ra,20(sp)
100100ec:	df000415 	stw	fp,16(sp)
100100f0:	df000404 	addi	fp,sp,16
100100f4:	e13ffe15 	stw	r4,-8(fp)
100100f8:	e17ffd15 	stw	r5,-12(fp)
100100fc:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010100:	e0bffe17 	ldw	r2,-8(fp)
10010104:	10800017 	ldw	r2,0(r2)
10010108:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001010c:	e0bfff17 	ldw	r2,-4(fp)
10010110:	10c00a04 	addi	r3,r2,40
10010114:	e0bffe17 	ldw	r2,-8(fp)
10010118:	10800217 	ldw	r2,8(r2)
1001011c:	100f883a 	mov	r7,r2
10010120:	e1bffc17 	ldw	r6,-16(fp)
10010124:	e17ffd17 	ldw	r5,-12(fp)
10010128:	1809883a 	mov	r4,r3
1001012c:	00107100 	call	10010710 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010130:	e037883a 	mov	sp,fp
10010134:	dfc00117 	ldw	ra,4(sp)
10010138:	df000017 	ldw	fp,0(sp)
1001013c:	dec00204 	addi	sp,sp,8
10010140:	f800283a 	ret

10010144 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010144:	defffa04 	addi	sp,sp,-24
10010148:	dfc00515 	stw	ra,20(sp)
1001014c:	df000415 	stw	fp,16(sp)
10010150:	df000404 	addi	fp,sp,16
10010154:	e13ffe15 	stw	r4,-8(fp)
10010158:	e17ffd15 	stw	r5,-12(fp)
1001015c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010160:	e0bffe17 	ldw	r2,-8(fp)
10010164:	10800017 	ldw	r2,0(r2)
10010168:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001016c:	e0bfff17 	ldw	r2,-4(fp)
10010170:	10c00a04 	addi	r3,r2,40
10010174:	e0bffe17 	ldw	r2,-8(fp)
10010178:	10800217 	ldw	r2,8(r2)
1001017c:	100f883a 	mov	r7,r2
10010180:	e1bffc17 	ldw	r6,-16(fp)
10010184:	e17ffd17 	ldw	r5,-12(fp)
10010188:	1809883a 	mov	r4,r3
1001018c:	00109300 	call	10010930 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010190:	e037883a 	mov	sp,fp
10010194:	dfc00117 	ldw	ra,4(sp)
10010198:	df000017 	ldw	fp,0(sp)
1001019c:	dec00204 	addi	sp,sp,8
100101a0:	f800283a 	ret

100101a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100101a4:	defffc04 	addi	sp,sp,-16
100101a8:	dfc00315 	stw	ra,12(sp)
100101ac:	df000215 	stw	fp,8(sp)
100101b0:	df000204 	addi	fp,sp,8
100101b4:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100101b8:	e0bffe17 	ldw	r2,-8(fp)
100101bc:	10800017 	ldw	r2,0(r2)
100101c0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100101c4:	e0bfff17 	ldw	r2,-4(fp)
100101c8:	10c00a04 	addi	r3,r2,40
100101cc:	e0bffe17 	ldw	r2,-8(fp)
100101d0:	10800217 	ldw	r2,8(r2)
100101d4:	100b883a 	mov	r5,r2
100101d8:	1809883a 	mov	r4,r3
100101dc:	00105b40 	call	100105b4 <altera_avalon_jtag_uart_close>
}
100101e0:	e037883a 	mov	sp,fp
100101e4:	dfc00117 	ldw	ra,4(sp)
100101e8:	df000017 	ldw	fp,0(sp)
100101ec:	dec00204 	addi	sp,sp,8
100101f0:	f800283a 	ret

100101f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100101f4:	defffa04 	addi	sp,sp,-24
100101f8:	dfc00515 	stw	ra,20(sp)
100101fc:	df000415 	stw	fp,16(sp)
10010200:	df000404 	addi	fp,sp,16
10010204:	e13ffe15 	stw	r4,-8(fp)
10010208:	e17ffd15 	stw	r5,-12(fp)
1001020c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010210:	e0bffe17 	ldw	r2,-8(fp)
10010214:	10800017 	ldw	r2,0(r2)
10010218:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001021c:	e0bfff17 	ldw	r2,-4(fp)
10010220:	10800a04 	addi	r2,r2,40
10010224:	e1bffc17 	ldw	r6,-16(fp)
10010228:	e17ffd17 	ldw	r5,-12(fp)
1001022c:	1009883a 	mov	r4,r2
10010230:	001061c0 	call	1001061c <altera_avalon_jtag_uart_ioctl>
}
10010234:	e037883a 	mov	sp,fp
10010238:	dfc00117 	ldw	ra,4(sp)
1001023c:	df000017 	ldw	fp,0(sp)
10010240:	dec00204 	addi	sp,sp,8
10010244:	f800283a 	ret

10010248 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010248:	defffa04 	addi	sp,sp,-24
1001024c:	dfc00515 	stw	ra,20(sp)
10010250:	df000415 	stw	fp,16(sp)
10010254:	df000404 	addi	fp,sp,16
10010258:	e13fff15 	stw	r4,-4(fp)
1001025c:	e17ffe15 	stw	r5,-8(fp)
10010260:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010264:	e0bfff17 	ldw	r2,-4(fp)
10010268:	00c00044 	movi	r3,1
1001026c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010270:	e0bfff17 	ldw	r2,-4(fp)
10010274:	10800017 	ldw	r2,0(r2)
10010278:	10800104 	addi	r2,r2,4
1001027c:	1007883a 	mov	r3,r2
10010280:	e0bfff17 	ldw	r2,-4(fp)
10010284:	10800817 	ldw	r2,32(r2)
10010288:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001028c:	e0bffe17 	ldw	r2,-8(fp)
10010290:	e0fffd17 	ldw	r3,-12(fp)
10010294:	d8000015 	stw	zero,0(sp)
10010298:	e1ffff17 	ldw	r7,-4(fp)
1001029c:	01840074 	movhi	r6,4097
100102a0:	3180c204 	addi	r6,r6,776
100102a4:	180b883a 	mov	r5,r3
100102a8:	1009883a 	mov	r4,r2
100102ac:	0010fd00 	call	10010fd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100102b0:	e0bfff17 	ldw	r2,-4(fp)
100102b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100102b8:	e0bfff17 	ldw	r2,-4(fp)
100102bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100102c0:	d0e70e17 	ldw	r3,-25544(gp)
100102c4:	e1ffff17 	ldw	r7,-4(fp)
100102c8:	01840074 	movhi	r6,4097
100102cc:	31814504 	addi	r6,r6,1300
100102d0:	180b883a 	mov	r5,r3
100102d4:	1009883a 	mov	r4,r2
100102d8:	0010b580 	call	10010b58 <alt_alarm_start>
100102dc:	1000040e 	bge	r2,zero,100102f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100102e0:	e0ffff17 	ldw	r3,-4(fp)
100102e4:	00a00034 	movhi	r2,32768
100102e8:	10bfffc4 	addi	r2,r2,-1
100102ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100102f0:	0001883a 	nop
100102f4:	e037883a 	mov	sp,fp
100102f8:	dfc00117 	ldw	ra,4(sp)
100102fc:	df000017 	ldw	fp,0(sp)
10010300:	dec00204 	addi	sp,sp,8
10010304:	f800283a 	ret

10010308 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010308:	defff804 	addi	sp,sp,-32
1001030c:	df000715 	stw	fp,28(sp)
10010310:	df000704 	addi	fp,sp,28
10010314:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010318:	e0bff917 	ldw	r2,-28(fp)
1001031c:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
10010320:	e0bffd17 	ldw	r2,-12(fp)
10010324:	10800017 	ldw	r2,0(r2)
10010328:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001032c:	e0bffc17 	ldw	r2,-16(fp)
10010330:	10800104 	addi	r2,r2,4
10010334:	10800037 	ldwio	r2,0(r2)
10010338:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001033c:	e0bffb17 	ldw	r2,-20(fp)
10010340:	1080c00c 	andi	r2,r2,768
10010344:	10006d26 	beq	r2,zero,100104fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010348:	e0bffb17 	ldw	r2,-20(fp)
1001034c:	1080400c 	andi	r2,r2,256
10010350:	10003526 	beq	r2,zero,10010428 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10010354:	00800074 	movhi	r2,1
10010358:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001035c:	e0bffd17 	ldw	r2,-12(fp)
10010360:	10800a17 	ldw	r2,40(r2)
10010364:	10800044 	addi	r2,r2,1
10010368:	1081ffcc 	andi	r2,r2,2047
1001036c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
10010370:	e0bffd17 	ldw	r2,-12(fp)
10010374:	10800b17 	ldw	r2,44(r2)
10010378:	e0fffa17 	ldw	r3,-24(fp)
1001037c:	18801526 	beq	r3,r2,100103d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10010380:	e0bffc17 	ldw	r2,-16(fp)
10010384:	10800037 	ldwio	r2,0(r2)
10010388:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1001038c:	e0bfff17 	ldw	r2,-4(fp)
10010390:	10a0000c 	andi	r2,r2,32768
10010394:	10001126 	beq	r2,zero,100103dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10010398:	e0bffd17 	ldw	r2,-12(fp)
1001039c:	10800a17 	ldw	r2,40(r2)
100103a0:	e0ffff17 	ldw	r3,-4(fp)
100103a4:	1809883a 	mov	r4,r3
100103a8:	e0fffd17 	ldw	r3,-12(fp)
100103ac:	1885883a 	add	r2,r3,r2
100103b0:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100103b4:	e0bffd17 	ldw	r2,-12(fp)
100103b8:	10800a17 	ldw	r2,40(r2)
100103bc:	10800044 	addi	r2,r2,1
100103c0:	10c1ffcc 	andi	r3,r2,2047
100103c4:	e0bffd17 	ldw	r2,-12(fp)
100103c8:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
100103cc:	0001883a 	nop
      {
100103d0:	003fe206 	br	1001035c <altera_avalon_jtag_uart_irq+0x54>
          break;
100103d4:	0001883a 	nop
100103d8:	00000106 	br	100103e0 <altera_avalon_jtag_uart_irq+0xd8>
          break;
100103dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100103e0:	e0bfff17 	ldw	r2,-4(fp)
100103e4:	10bfffec 	andhi	r2,r2,65535
100103e8:	10000f26 	beq	r2,zero,10010428 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100103ec:	e0bffd17 	ldw	r2,-12(fp)
100103f0:	10c00817 	ldw	r3,32(r2)
100103f4:	00bfff84 	movi	r2,-2
100103f8:	1886703a 	and	r3,r3,r2
100103fc:	e0bffd17 	ldw	r2,-12(fp)
10010400:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10010404:	e0bffc17 	ldw	r2,-16(fp)
10010408:	10800104 	addi	r2,r2,4
1001040c:	1007883a 	mov	r3,r2
10010410:	e0bffd17 	ldw	r2,-12(fp)
10010414:	10800817 	ldw	r2,32(r2)
10010418:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001041c:	e0bffc17 	ldw	r2,-16(fp)
10010420:	10800104 	addi	r2,r2,4
10010424:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10010428:	e0bffb17 	ldw	r2,-20(fp)
1001042c:	1080800c 	andi	r2,r2,512
10010430:	103fbe26 	beq	r2,zero,1001032c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10010434:	e0bffb17 	ldw	r2,-20(fp)
10010438:	1004d43a 	srli	r2,r2,16
1001043c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10010440:	00001406 	br	10010494 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10010444:	e0bffc17 	ldw	r2,-16(fp)
10010448:	e0fffd17 	ldw	r3,-12(fp)
1001044c:	18c00d17 	ldw	r3,52(r3)
10010450:	e13ffd17 	ldw	r4,-12(fp)
10010454:	20c7883a 	add	r3,r4,r3
10010458:	18c20e03 	ldbu	r3,2104(r3)
1001045c:	18c03fcc 	andi	r3,r3,255
10010460:	18c0201c 	xori	r3,r3,128
10010464:	18ffe004 	addi	r3,r3,-128
10010468:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001046c:	e0bffd17 	ldw	r2,-12(fp)
10010470:	10800d17 	ldw	r2,52(r2)
10010474:	10800044 	addi	r2,r2,1
10010478:	10c1ffcc 	andi	r3,r2,2047
1001047c:	e0bffd17 	ldw	r2,-12(fp)
10010480:	10c00d15 	stw	r3,52(r2)
10010484:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10010488:	e0bffe17 	ldw	r2,-8(fp)
1001048c:	10bfffc4 	addi	r2,r2,-1
10010490:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
10010494:	e0bffe17 	ldw	r2,-8(fp)
10010498:	10000526 	beq	r2,zero,100104b0 <altera_avalon_jtag_uart_irq+0x1a8>
1001049c:	e0bffd17 	ldw	r2,-12(fp)
100104a0:	10c00d17 	ldw	r3,52(r2)
100104a4:	e0bffd17 	ldw	r2,-12(fp)
100104a8:	10800c17 	ldw	r2,48(r2)
100104ac:	18bfe51e 	bne	r3,r2,10010444 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
100104b0:	e0bffe17 	ldw	r2,-8(fp)
100104b4:	103f9d26 	beq	r2,zero,1001032c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100104b8:	e0bffd17 	ldw	r2,-12(fp)
100104bc:	10c00817 	ldw	r3,32(r2)
100104c0:	00bfff44 	movi	r2,-3
100104c4:	1886703a 	and	r3,r3,r2
100104c8:	e0bffd17 	ldw	r2,-12(fp)
100104cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100104d0:	e0bffd17 	ldw	r2,-12(fp)
100104d4:	10800017 	ldw	r2,0(r2)
100104d8:	10800104 	addi	r2,r2,4
100104dc:	1007883a 	mov	r3,r2
100104e0:	e0bffd17 	ldw	r2,-12(fp)
100104e4:	10800817 	ldw	r2,32(r2)
100104e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100104ec:	e0bffc17 	ldw	r2,-16(fp)
100104f0:	10800104 	addi	r2,r2,4
100104f4:	10800037 	ldwio	r2,0(r2)
  {
100104f8:	003f8c06 	br	1001032c <altera_avalon_jtag_uart_irq+0x24>
      break;
100104fc:	0001883a 	nop
      }
    }
  }
}
10010500:	0001883a 	nop
10010504:	e037883a 	mov	sp,fp
10010508:	df000017 	ldw	fp,0(sp)
1001050c:	dec00104 	addi	sp,sp,4
10010510:	f800283a 	ret

10010514 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10010514:	defffc04 	addi	sp,sp,-16
10010518:	df000315 	stw	fp,12(sp)
1001051c:	df000304 	addi	fp,sp,12
10010520:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10010524:	e0bffd17 	ldw	r2,-12(fp)
10010528:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001052c:	e0bfff17 	ldw	r2,-4(fp)
10010530:	10800017 	ldw	r2,0(r2)
10010534:	10800104 	addi	r2,r2,4
10010538:	10800037 	ldwio	r2,0(r2)
1001053c:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10010540:	e0bffe17 	ldw	r2,-8(fp)
10010544:	1081000c 	andi	r2,r2,1024
10010548:	10000b26 	beq	r2,zero,10010578 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001054c:	e0bfff17 	ldw	r2,-4(fp)
10010550:	10800017 	ldw	r2,0(r2)
10010554:	10800104 	addi	r2,r2,4
10010558:	1007883a 	mov	r3,r2
1001055c:	e0bfff17 	ldw	r2,-4(fp)
10010560:	10800817 	ldw	r2,32(r2)
10010564:	10810014 	ori	r2,r2,1024
10010568:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001056c:	e0bfff17 	ldw	r2,-4(fp)
10010570:	10000915 	stw	zero,36(r2)
10010574:	00000a06 	br	100105a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10010578:	e0bfff17 	ldw	r2,-4(fp)
1001057c:	10c00917 	ldw	r3,36(r2)
10010580:	00a00034 	movhi	r2,32768
10010584:	10bfff04 	addi	r2,r2,-4
10010588:	10c00536 	bltu	r2,r3,100105a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1001058c:	e0bfff17 	ldw	r2,-4(fp)
10010590:	10800917 	ldw	r2,36(r2)
10010594:	10c00044 	addi	r3,r2,1
10010598:	e0bfff17 	ldw	r2,-4(fp)
1001059c:	10c00915 	stw	r3,36(r2)
100105a0:	d0a70e17 	ldw	r2,-25544(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100105a4:	e037883a 	mov	sp,fp
100105a8:	df000017 	ldw	fp,0(sp)
100105ac:	dec00104 	addi	sp,sp,4
100105b0:	f800283a 	ret

100105b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100105b4:	defffd04 	addi	sp,sp,-12
100105b8:	df000215 	stw	fp,8(sp)
100105bc:	df000204 	addi	fp,sp,8
100105c0:	e13fff15 	stw	r4,-4(fp)
100105c4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100105c8:	00000506 	br	100105e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100105cc:	e0bffe17 	ldw	r2,-8(fp)
100105d0:	1090000c 	andi	r2,r2,16384
100105d4:	10000226 	beq	r2,zero,100105e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100105d8:	00bffd44 	movi	r2,-11
100105dc:	00000b06 	br	1001060c <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100105e0:	e0bfff17 	ldw	r2,-4(fp)
100105e4:	10c00d17 	ldw	r3,52(r2)
100105e8:	e0bfff17 	ldw	r2,-4(fp)
100105ec:	10800c17 	ldw	r2,48(r2)
100105f0:	18800526 	beq	r3,r2,10010608 <altera_avalon_jtag_uart_close+0x54>
100105f4:	e0bfff17 	ldw	r2,-4(fp)
100105f8:	10c00917 	ldw	r3,36(r2)
100105fc:	e0bfff17 	ldw	r2,-4(fp)
10010600:	10800117 	ldw	r2,4(r2)
10010604:	18bff136 	bltu	r3,r2,100105cc <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
10010608:	0005883a 	mov	r2,zero
}
1001060c:	e037883a 	mov	sp,fp
10010610:	df000017 	ldw	fp,0(sp)
10010614:	dec00104 	addi	sp,sp,4
10010618:	f800283a 	ret

1001061c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1001061c:	defffa04 	addi	sp,sp,-24
10010620:	df000515 	stw	fp,20(sp)
10010624:	df000504 	addi	fp,sp,20
10010628:	e13ffd15 	stw	r4,-12(fp)
1001062c:	e17ffc15 	stw	r5,-16(fp)
10010630:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
10010634:	00bff9c4 	movi	r2,-25
10010638:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
1001063c:	e0bffc17 	ldw	r2,-16(fp)
10010640:	109a8060 	cmpeqi	r2,r2,27137
10010644:	1000041e 	bne	r2,zero,10010658 <altera_avalon_jtag_uart_ioctl+0x3c>
10010648:	e0bffc17 	ldw	r2,-16(fp)
1001064c:	109a80a0 	cmpeqi	r2,r2,27138
10010650:	1000181e 	bne	r2,zero,100106b4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10010654:	00002906 	br	100106fc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
10010658:	e0bffd17 	ldw	r2,-12(fp)
1001065c:	10c00117 	ldw	r3,4(r2)
10010660:	00a00034 	movhi	r2,32768
10010664:	10bfffc4 	addi	r2,r2,-1
10010668:	18802126 	beq	r3,r2,100106f0 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
1001066c:	e0bffb17 	ldw	r2,-20(fp)
10010670:	10800017 	ldw	r2,0(r2)
10010674:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10010678:	e0bffe17 	ldw	r2,-8(fp)
1001067c:	10800090 	cmplti	r2,r2,2
10010680:	1000061e 	bne	r2,zero,1001069c <altera_avalon_jtag_uart_ioctl+0x80>
10010684:	e0fffe17 	ldw	r3,-8(fp)
10010688:	00a00034 	movhi	r2,32768
1001068c:	10bfffc4 	addi	r2,r2,-1
10010690:	18800226 	beq	r3,r2,1001069c <altera_avalon_jtag_uart_ioctl+0x80>
10010694:	e0bffe17 	ldw	r2,-8(fp)
10010698:	00000206 	br	100106a4 <altera_avalon_jtag_uart_ioctl+0x88>
1001069c:	00a00034 	movhi	r2,32768
100106a0:	10bfff84 	addi	r2,r2,-2
100106a4:	e0fffd17 	ldw	r3,-12(fp)
100106a8:	18800115 	stw	r2,4(r3)
      rc = 0;
100106ac:	e03fff15 	stw	zero,-4(fp)
    break;
100106b0:	00000f06 	br	100106f0 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
100106b4:	e0bffd17 	ldw	r2,-12(fp)
100106b8:	10c00117 	ldw	r3,4(r2)
100106bc:	00a00034 	movhi	r2,32768
100106c0:	10bfffc4 	addi	r2,r2,-1
100106c4:	18800c26 	beq	r3,r2,100106f8 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100106c8:	e0bffd17 	ldw	r2,-12(fp)
100106cc:	10c00917 	ldw	r3,36(r2)
100106d0:	e0bffd17 	ldw	r2,-12(fp)
100106d4:	10800117 	ldw	r2,4(r2)
100106d8:	1885803a 	cmpltu	r2,r3,r2
100106dc:	10c03fcc 	andi	r3,r2,255
100106e0:	e0bffb17 	ldw	r2,-20(fp)
100106e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
100106e8:	e03fff15 	stw	zero,-4(fp)
    break;
100106ec:	00000206 	br	100106f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
100106f0:	0001883a 	nop
100106f4:	00000106 	br	100106fc <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
100106f8:	0001883a 	nop
  }

  return rc;
100106fc:	e0bfff17 	ldw	r2,-4(fp)
}
10010700:	e037883a 	mov	sp,fp
10010704:	df000017 	ldw	fp,0(sp)
10010708:	dec00104 	addi	sp,sp,4
1001070c:	f800283a 	ret

10010710 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10010710:	defff304 	addi	sp,sp,-52
10010714:	dfc00c15 	stw	ra,48(sp)
10010718:	df000b15 	stw	fp,44(sp)
1001071c:	df000b04 	addi	fp,sp,44
10010720:	e13ff815 	stw	r4,-32(fp)
10010724:	e17ff715 	stw	r5,-36(fp)
10010728:	e1bff615 	stw	r6,-40(fp)
1001072c:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
10010730:	e0bff717 	ldw	r2,-36(fp)
10010734:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10010738:	00004706 	br	10010858 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1001073c:	e0bff817 	ldw	r2,-32(fp)
10010740:	10800a17 	ldw	r2,40(r2)
10010744:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
10010748:	e0bff817 	ldw	r2,-32(fp)
1001074c:	10800b17 	ldw	r2,44(r2)
10010750:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
10010754:	e0fffd17 	ldw	r3,-12(fp)
10010758:	e0bffc17 	ldw	r2,-16(fp)
1001075c:	18800536 	bltu	r3,r2,10010774 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10010760:	e0fffd17 	ldw	r3,-12(fp)
10010764:	e0bffc17 	ldw	r2,-16(fp)
10010768:	1885c83a 	sub	r2,r3,r2
1001076c:	e0bffe15 	stw	r2,-8(fp)
10010770:	00000406 	br	10010784 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10010774:	00c20004 	movi	r3,2048
10010778:	e0bffc17 	ldw	r2,-16(fp)
1001077c:	1885c83a 	sub	r2,r3,r2
10010780:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
10010784:	e0bffe17 	ldw	r2,-8(fp)
10010788:	10001e26 	beq	r2,zero,10010804 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1001078c:	e0fff617 	ldw	r3,-40(fp)
10010790:	e0bffe17 	ldw	r2,-8(fp)
10010794:	1880022e 	bgeu	r3,r2,100107a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10010798:	e0bff617 	ldw	r2,-40(fp)
1001079c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100107a0:	e0bff817 	ldw	r2,-32(fp)
100107a4:	10c00e04 	addi	r3,r2,56
100107a8:	e0bffc17 	ldw	r2,-16(fp)
100107ac:	1885883a 	add	r2,r3,r2
100107b0:	e1bffe17 	ldw	r6,-8(fp)
100107b4:	100b883a 	mov	r5,r2
100107b8:	e13fff17 	ldw	r4,-4(fp)
100107bc:	0007cfc0 	call	10007cfc <memcpy>
      ptr   += n;
100107c0:	e0ffff17 	ldw	r3,-4(fp)
100107c4:	e0bffe17 	ldw	r2,-8(fp)
100107c8:	1885883a 	add	r2,r3,r2
100107cc:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
100107d0:	e0fff617 	ldw	r3,-40(fp)
100107d4:	e0bffe17 	ldw	r2,-8(fp)
100107d8:	1885c83a 	sub	r2,r3,r2
100107dc:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100107e0:	e0fffc17 	ldw	r3,-16(fp)
100107e4:	e0bffe17 	ldw	r2,-8(fp)
100107e8:	1885883a 	add	r2,r3,r2
100107ec:	10c1ffcc 	andi	r3,r2,2047
100107f0:	e0bff817 	ldw	r2,-32(fp)
100107f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100107f8:	e0bff617 	ldw	r2,-40(fp)
100107fc:	00bfcf16 	blt	zero,r2,1001073c <altera_avalon_jtag_uart_read+0x2c>
10010800:	00000106 	br	10010808 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
10010804:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
10010808:	e0ffff17 	ldw	r3,-4(fp)
1001080c:	e0bff717 	ldw	r2,-36(fp)
10010810:	1880141e 	bne	r3,r2,10010864 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10010814:	e0bff517 	ldw	r2,-44(fp)
10010818:	1090000c 	andi	r2,r2,16384
1001081c:	1000131e 	bne	r2,zero,1001086c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10010820:	0001883a 	nop
10010824:	e0bff817 	ldw	r2,-32(fp)
10010828:	10800a17 	ldw	r2,40(r2)
1001082c:	e0fffd17 	ldw	r3,-12(fp)
10010830:	1880051e 	bne	r3,r2,10010848 <altera_avalon_jtag_uart_read+0x138>
10010834:	e0bff817 	ldw	r2,-32(fp)
10010838:	10c00917 	ldw	r3,36(r2)
1001083c:	e0bff817 	ldw	r2,-32(fp)
10010840:	10800117 	ldw	r2,4(r2)
10010844:	18bff736 	bltu	r3,r2,10010824 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10010848:	e0bff817 	ldw	r2,-32(fp)
1001084c:	10800a17 	ldw	r2,40(r2)
10010850:	e0fffd17 	ldw	r3,-12(fp)
10010854:	18800726 	beq	r3,r2,10010874 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
10010858:	e0bff617 	ldw	r2,-40(fp)
1001085c:	00bfb716 	blt	zero,r2,1001073c <altera_avalon_jtag_uart_read+0x2c>
10010860:	00000506 	br	10010878 <altera_avalon_jtag_uart_read+0x168>
      break;
10010864:	0001883a 	nop
10010868:	00000306 	br	10010878 <altera_avalon_jtag_uart_read+0x168>
      break;
1001086c:	0001883a 	nop
10010870:	00000106 	br	10010878 <altera_avalon_jtag_uart_read+0x168>
      break;
10010874:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10010878:	e0ffff17 	ldw	r3,-4(fp)
1001087c:	e0bff717 	ldw	r2,-36(fp)
10010880:	18801926 	beq	r3,r2,100108e8 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
10010884:	0005303a 	rdctl	r2,status
10010888:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001088c:	e0fff917 	ldw	r3,-28(fp)
10010890:	00bfff84 	movi	r2,-2
10010894:	1884703a 	and	r2,r3,r2
10010898:	1001703a 	wrctl	status,r2
  return context;
1001089c:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100108a0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100108a4:	e0bff817 	ldw	r2,-32(fp)
100108a8:	10800817 	ldw	r2,32(r2)
100108ac:	10c00054 	ori	r3,r2,1
100108b0:	e0bff817 	ldw	r2,-32(fp)
100108b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100108b8:	e0bff817 	ldw	r2,-32(fp)
100108bc:	10800017 	ldw	r2,0(r2)
100108c0:	10800104 	addi	r2,r2,4
100108c4:	1007883a 	mov	r3,r2
100108c8:	e0bff817 	ldw	r2,-32(fp)
100108cc:	10800817 	ldw	r2,32(r2)
100108d0:	18800035 	stwio	r2,0(r3)
100108d4:	e0bffb17 	ldw	r2,-20(fp)
100108d8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
100108dc:	e0bffa17 	ldw	r2,-24(fp)
100108e0:	1001703a 	wrctl	status,r2
}
100108e4:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100108e8:	e0ffff17 	ldw	r3,-4(fp)
100108ec:	e0bff717 	ldw	r2,-36(fp)
100108f0:	18800426 	beq	r3,r2,10010904 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
100108f4:	e0ffff17 	ldw	r3,-4(fp)
100108f8:	e0bff717 	ldw	r2,-36(fp)
100108fc:	1885c83a 	sub	r2,r3,r2
10010900:	00000606 	br	1001091c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
10010904:	e0bff517 	ldw	r2,-44(fp)
10010908:	1090000c 	andi	r2,r2,16384
1001090c:	10000226 	beq	r2,zero,10010918 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
10010910:	00bffd44 	movi	r2,-11
10010914:	00000106 	br	1001091c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
10010918:	00bffec4 	movi	r2,-5
}
1001091c:	e037883a 	mov	sp,fp
10010920:	dfc00117 	ldw	ra,4(sp)
10010924:	df000017 	ldw	fp,0(sp)
10010928:	dec00204 	addi	sp,sp,8
1001092c:	f800283a 	ret

10010930 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10010930:	defff304 	addi	sp,sp,-52
10010934:	dfc00c15 	stw	ra,48(sp)
10010938:	df000b15 	stw	fp,44(sp)
1001093c:	df000b04 	addi	fp,sp,44
10010940:	e13ff815 	stw	r4,-32(fp)
10010944:	e17ff715 	stw	r5,-36(fp)
10010948:	e1bff615 	stw	r6,-40(fp)
1001094c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10010950:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10010954:	e0bff717 	ldw	r2,-36(fp)
10010958:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1001095c:	00003706 	br	10010a3c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10010960:	e0bff817 	ldw	r2,-32(fp)
10010964:	10800c17 	ldw	r2,48(r2)
10010968:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
1001096c:	e0bff817 	ldw	r2,-32(fp)
10010970:	10800d17 	ldw	r2,52(r2)
10010974:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
10010978:	e0fffc17 	ldw	r3,-16(fp)
1001097c:	e0bfff17 	ldw	r2,-4(fp)
10010980:	1880062e 	bgeu	r3,r2,1001099c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10010984:	e0ffff17 	ldw	r3,-4(fp)
10010988:	e0bffc17 	ldw	r2,-16(fp)
1001098c:	1885c83a 	sub	r2,r3,r2
10010990:	10bfffc4 	addi	r2,r2,-1
10010994:	e0bffe15 	stw	r2,-8(fp)
10010998:	00000b06 	br	100109c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001099c:	e0bfff17 	ldw	r2,-4(fp)
100109a0:	10000526 	beq	r2,zero,100109b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100109a4:	00c20004 	movi	r3,2048
100109a8:	e0bffc17 	ldw	r2,-16(fp)
100109ac:	1885c83a 	sub	r2,r3,r2
100109b0:	e0bffe15 	stw	r2,-8(fp)
100109b4:	00000406 	br	100109c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100109b8:	00c1ffc4 	movi	r3,2047
100109bc:	e0bffc17 	ldw	r2,-16(fp)
100109c0:	1885c83a 	sub	r2,r3,r2
100109c4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
100109c8:	e0bffe17 	ldw	r2,-8(fp)
100109cc:	10001e26 	beq	r2,zero,10010a48 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100109d0:	e0fff617 	ldw	r3,-40(fp)
100109d4:	e0bffe17 	ldw	r2,-8(fp)
100109d8:	1880022e 	bgeu	r3,r2,100109e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100109dc:	e0bff617 	ldw	r2,-40(fp)
100109e0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100109e4:	e0bff817 	ldw	r2,-32(fp)
100109e8:	10c20e04 	addi	r3,r2,2104
100109ec:	e0bffc17 	ldw	r2,-16(fp)
100109f0:	1885883a 	add	r2,r3,r2
100109f4:	e1bffe17 	ldw	r6,-8(fp)
100109f8:	e17ff717 	ldw	r5,-36(fp)
100109fc:	1009883a 	mov	r4,r2
10010a00:	0007cfc0 	call	10007cfc <memcpy>
      ptr   += n;
10010a04:	e0fff717 	ldw	r3,-36(fp)
10010a08:	e0bffe17 	ldw	r2,-8(fp)
10010a0c:	1885883a 	add	r2,r3,r2
10010a10:	e0bff715 	stw	r2,-36(fp)
      count -= n;
10010a14:	e0fff617 	ldw	r3,-40(fp)
10010a18:	e0bffe17 	ldw	r2,-8(fp)
10010a1c:	1885c83a 	sub	r2,r3,r2
10010a20:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10010a24:	e0fffc17 	ldw	r3,-16(fp)
10010a28:	e0bffe17 	ldw	r2,-8(fp)
10010a2c:	1885883a 	add	r2,r3,r2
10010a30:	10c1ffcc 	andi	r3,r2,2047
10010a34:	e0bff817 	ldw	r2,-32(fp)
10010a38:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
10010a3c:	e0bff617 	ldw	r2,-40(fp)
10010a40:	00bfc716 	blt	zero,r2,10010960 <altera_avalon_jtag_uart_write+0x30>
10010a44:	00000106 	br	10010a4c <altera_avalon_jtag_uart_write+0x11c>
        break;
10010a48:	0001883a 	nop
  NIOS2_READ_STATUS (context);
10010a4c:	0005303a 	rdctl	r2,status
10010a50:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010a54:	e0fff917 	ldw	r3,-28(fp)
10010a58:	00bfff84 	movi	r2,-2
10010a5c:	1884703a 	and	r2,r3,r2
10010a60:	1001703a 	wrctl	status,r2
  return context;
10010a64:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10010a68:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10010a6c:	e0bff817 	ldw	r2,-32(fp)
10010a70:	10800817 	ldw	r2,32(r2)
10010a74:	10c00094 	ori	r3,r2,2
10010a78:	e0bff817 	ldw	r2,-32(fp)
10010a7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10010a80:	e0bff817 	ldw	r2,-32(fp)
10010a84:	10800017 	ldw	r2,0(r2)
10010a88:	10800104 	addi	r2,r2,4
10010a8c:	1007883a 	mov	r3,r2
10010a90:	e0bff817 	ldw	r2,-32(fp)
10010a94:	10800817 	ldw	r2,32(r2)
10010a98:	18800035 	stwio	r2,0(r3)
10010a9c:	e0bffb17 	ldw	r2,-20(fp)
10010aa0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
10010aa4:	e0bffa17 	ldw	r2,-24(fp)
10010aa8:	1001703a 	wrctl	status,r2
}
10010aac:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010ab0:	e0bff617 	ldw	r2,-40(fp)
10010ab4:	0080100e 	bge	zero,r2,10010af8 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10010ab8:	e0bff517 	ldw	r2,-44(fp)
10010abc:	1090000c 	andi	r2,r2,16384
10010ac0:	1000101e 	bne	r2,zero,10010b04 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010ac4:	0001883a 	nop
10010ac8:	e0bff817 	ldw	r2,-32(fp)
10010acc:	10800d17 	ldw	r2,52(r2)
10010ad0:	e0ffff17 	ldw	r3,-4(fp)
10010ad4:	1880051e 	bne	r3,r2,10010aec <altera_avalon_jtag_uart_write+0x1bc>
10010ad8:	e0bff817 	ldw	r2,-32(fp)
10010adc:	10c00917 	ldw	r3,36(r2)
10010ae0:	e0bff817 	ldw	r2,-32(fp)
10010ae4:	10800117 	ldw	r2,4(r2)
10010ae8:	18bff736 	bltu	r3,r2,10010ac8 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010aec:	e0bff817 	ldw	r2,-32(fp)
10010af0:	10800917 	ldw	r2,36(r2)
10010af4:	1000051e 	bne	r2,zero,10010b0c <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
10010af8:	e0bff617 	ldw	r2,-40(fp)
10010afc:	00bfcf16 	blt	zero,r2,10010a3c <altera_avalon_jtag_uart_write+0x10c>
10010b00:	00000306 	br	10010b10 <altera_avalon_jtag_uart_write+0x1e0>
        break;
10010b04:	0001883a 	nop
10010b08:	00000106 	br	10010b10 <altera_avalon_jtag_uart_write+0x1e0>
         break;
10010b0c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010b10:	e0fff717 	ldw	r3,-36(fp)
10010b14:	e0bffd17 	ldw	r2,-12(fp)
10010b18:	18800426 	beq	r3,r2,10010b2c <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
10010b1c:	e0fff717 	ldw	r3,-36(fp)
10010b20:	e0bffd17 	ldw	r2,-12(fp)
10010b24:	1885c83a 	sub	r2,r3,r2
10010b28:	00000606 	br	10010b44 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
10010b2c:	e0bff517 	ldw	r2,-44(fp)
10010b30:	1090000c 	andi	r2,r2,16384
10010b34:	10000226 	beq	r2,zero,10010b40 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
10010b38:	00bffd44 	movi	r2,-11
10010b3c:	00000106 	br	10010b44 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10010b40:	00bffec4 	movi	r2,-5
}
10010b44:	e037883a 	mov	sp,fp
10010b48:	dfc00117 	ldw	ra,4(sp)
10010b4c:	df000017 	ldw	fp,0(sp)
10010b50:	dec00204 	addi	sp,sp,8
10010b54:	f800283a 	ret

10010b58 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010b58:	defff504 	addi	sp,sp,-44
10010b5c:	df000a15 	stw	fp,40(sp)
10010b60:	df000a04 	addi	fp,sp,40
10010b64:	e13ff915 	stw	r4,-28(fp)
10010b68:	e17ff815 	stw	r5,-32(fp)
10010b6c:	e1bff715 	stw	r6,-36(fp)
10010b70:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010b74:	e03fff15 	stw	zero,-4(fp)
10010b78:	d0a70e17 	ldw	r2,-25544(gp)
  
  if (alt_ticks_per_second ())
10010b7c:	10003e26 	beq	r2,zero,10010c78 <alt_alarm_start+0x120>
  {
    if (alarm)
10010b80:	e0bff917 	ldw	r2,-28(fp)
10010b84:	10003a26 	beq	r2,zero,10010c70 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
10010b88:	e0bff917 	ldw	r2,-28(fp)
10010b8c:	e0fff717 	ldw	r3,-36(fp)
10010b90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010b94:	e0bff917 	ldw	r2,-28(fp)
10010b98:	e0fff617 	ldw	r3,-40(fp)
10010b9c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
10010ba0:	0005303a 	rdctl	r2,status
10010ba4:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010ba8:	e0fffd17 	ldw	r3,-12(fp)
10010bac:	00bfff84 	movi	r2,-2
10010bb0:	1884703a 	and	r2,r3,r2
10010bb4:	1001703a 	wrctl	status,r2
  return context;
10010bb8:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
10010bbc:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010bc0:	d0a70f17 	ldw	r2,-25540(gp)
      
      current_nticks = alt_nticks();
10010bc4:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010bc8:	e0fff817 	ldw	r3,-32(fp)
10010bcc:	e0bfff17 	ldw	r2,-4(fp)
10010bd0:	1885883a 	add	r2,r3,r2
10010bd4:	10c00044 	addi	r3,r2,1
10010bd8:	e0bff917 	ldw	r2,-28(fp)
10010bdc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010be0:	e0bff917 	ldw	r2,-28(fp)
10010be4:	10c00217 	ldw	r3,8(r2)
10010be8:	e0bfff17 	ldw	r2,-4(fp)
10010bec:	1880042e 	bgeu	r3,r2,10010c00 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10010bf0:	e0bff917 	ldw	r2,-28(fp)
10010bf4:	00c00044 	movi	r3,1
10010bf8:	10c00405 	stb	r3,16(r2)
10010bfc:	00000206 	br	10010c08 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10010c00:	e0bff917 	ldw	r2,-28(fp)
10010c04:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010c08:	e0bff917 	ldw	r2,-28(fp)
10010c0c:	d0e00c04 	addi	r3,gp,-32720
10010c10:	e0fffb15 	stw	r3,-20(fp)
10010c14:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010c18:	e0bffa17 	ldw	r2,-24(fp)
10010c1c:	e0fffb17 	ldw	r3,-20(fp)
10010c20:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010c24:	e0bffb17 	ldw	r2,-20(fp)
10010c28:	10c00017 	ldw	r3,0(r2)
10010c2c:	e0bffa17 	ldw	r2,-24(fp)
10010c30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010c34:	e0bffb17 	ldw	r2,-20(fp)
10010c38:	10800017 	ldw	r2,0(r2)
10010c3c:	e0fffa17 	ldw	r3,-24(fp)
10010c40:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010c44:	e0bffb17 	ldw	r2,-20(fp)
10010c48:	e0fffa17 	ldw	r3,-24(fp)
10010c4c:	10c00015 	stw	r3,0(r2)
}
10010c50:	0001883a 	nop
10010c54:	e0bffe17 	ldw	r2,-8(fp)
10010c58:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10010c5c:	e0bffc17 	ldw	r2,-16(fp)
10010c60:	1001703a 	wrctl	status,r2
}
10010c64:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
10010c68:	0005883a 	mov	r2,zero
10010c6c:	00000306 	br	10010c7c <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
10010c70:	00bffa84 	movi	r2,-22
10010c74:	00000106 	br	10010c7c <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
10010c78:	00bfde84 	movi	r2,-134
  }
}
10010c7c:	e037883a 	mov	sp,fp
10010c80:	df000017 	ldw	fp,0(sp)
10010c84:	dec00104 	addi	sp,sp,4
10010c88:	f800283a 	ret

10010c8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010c8c:	defffa04 	addi	sp,sp,-24
10010c90:	dfc00515 	stw	ra,20(sp)
10010c94:	df000415 	stw	fp,16(sp)
10010c98:	df000404 	addi	fp,sp,16
10010c9c:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010ca0:	00800244 	movi	r2,9
10010ca4:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010ca8:	014003f4 	movhi	r5,15
10010cac:	29509004 	addi	r5,r5,16960
10010cb0:	e13ffe17 	ldw	r4,-8(fp)
10010cb4:	000cd300 	call	1000cd30 <__mulsi3>
10010cb8:	100b883a 	mov	r5,r2
10010cbc:	0100bef4 	movhi	r4,763
10010cc0:	213c2004 	addi	r4,r4,-3968
10010cc4:	000cc700 	call	1000cc70 <__udivsi3>
  big_loops = us / (INT_MAX/
10010cc8:	100b883a 	mov	r5,r2
10010ccc:	01200034 	movhi	r4,32768
10010cd0:	213fffc4 	addi	r4,r4,-1
10010cd4:	000cc700 	call	1000cc70 <__udivsi3>
10010cd8:	100b883a 	mov	r5,r2
10010cdc:	e13ffc17 	ldw	r4,-16(fp)
10010ce0:	000cc700 	call	1000cc70 <__udivsi3>
10010ce4:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
10010ce8:	e0bffd17 	ldw	r2,-12(fp)
10010cec:	10002a26 	beq	r2,zero,10010d98 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010cf0:	e03fff15 	stw	zero,-4(fp)
10010cf4:	00001706 	br	10010d54 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10010cf8:	00a00034 	movhi	r2,32768
10010cfc:	10bfffc4 	addi	r2,r2,-1
10010d00:	10bfffc4 	addi	r2,r2,-1
10010d04:	103ffe1e 	bne	r2,zero,10010d00 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10010d08:	014003f4 	movhi	r5,15
10010d0c:	29509004 	addi	r5,r5,16960
10010d10:	e13ffe17 	ldw	r4,-8(fp)
10010d14:	000cd300 	call	1000cd30 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010d18:	100b883a 	mov	r5,r2
10010d1c:	0100bef4 	movhi	r4,763
10010d20:	213c2004 	addi	r4,r4,-3968
10010d24:	000cc700 	call	1000cc70 <__udivsi3>
10010d28:	100b883a 	mov	r5,r2
10010d2c:	01200034 	movhi	r4,32768
10010d30:	213fffc4 	addi	r4,r4,-1
10010d34:	000cc700 	call	1000cc70 <__udivsi3>
10010d38:	1007883a 	mov	r3,r2
10010d3c:	e0bffc17 	ldw	r2,-16(fp)
10010d40:	10c5c83a 	sub	r2,r2,r3
10010d44:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
10010d48:	e0bfff17 	ldw	r2,-4(fp)
10010d4c:	10800044 	addi	r2,r2,1
10010d50:	e0bfff15 	stw	r2,-4(fp)
10010d54:	e0ffff17 	ldw	r3,-4(fp)
10010d58:	e0bffd17 	ldw	r2,-12(fp)
10010d5c:	18bfe616 	blt	r3,r2,10010cf8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010d60:	014003f4 	movhi	r5,15
10010d64:	29509004 	addi	r5,r5,16960
10010d68:	e13ffe17 	ldw	r4,-8(fp)
10010d6c:	000cd300 	call	1000cd30 <__mulsi3>
10010d70:	100b883a 	mov	r5,r2
10010d74:	0100bef4 	movhi	r4,763
10010d78:	213c2004 	addi	r4,r4,-3968
10010d7c:	000cc700 	call	1000cc70 <__udivsi3>
10010d80:	e17ffc17 	ldw	r5,-16(fp)
10010d84:	1009883a 	mov	r4,r2
10010d88:	000cd300 	call	1000cd30 <__mulsi3>
    __asm__ volatile (
10010d8c:	10bfffc4 	addi	r2,r2,-1
10010d90:	103ffe1e 	bne	r2,zero,10010d8c <alt_busy_sleep+0x100>
10010d94:	00000d06 	br	10010dcc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010d98:	014003f4 	movhi	r5,15
10010d9c:	29509004 	addi	r5,r5,16960
10010da0:	e13ffe17 	ldw	r4,-8(fp)
10010da4:	000cd300 	call	1000cd30 <__mulsi3>
10010da8:	100b883a 	mov	r5,r2
10010dac:	0100bef4 	movhi	r4,763
10010db0:	213c2004 	addi	r4,r4,-3968
10010db4:	000cc700 	call	1000cc70 <__udivsi3>
10010db8:	e17ffc17 	ldw	r5,-16(fp)
10010dbc:	1009883a 	mov	r4,r2
10010dc0:	000cd300 	call	1000cd30 <__mulsi3>
    __asm__ volatile (
10010dc4:	10bfffc4 	addi	r2,r2,-1
10010dc8:	00bffe16 	blt	zero,r2,10010dc4 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010dcc:	0005883a 	mov	r2,zero
}
10010dd0:	e037883a 	mov	sp,fp
10010dd4:	dfc00117 	ldw	ra,4(sp)
10010dd8:	df000017 	ldw	fp,0(sp)
10010ddc:	dec00204 	addi	sp,sp,8
10010de0:	f800283a 	ret

10010de4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010de4:	deffff04 	addi	sp,sp,-4
10010de8:	df000015 	stw	fp,0(sp)
10010dec:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010df0:	0001883a 	nop
10010df4:	e037883a 	mov	sp,fp
10010df8:	df000017 	ldw	fp,0(sp)
10010dfc:	dec00104 	addi	sp,sp,4
10010e00:	f800283a 	ret

10010e04 <alt_get_errno>:
{
10010e04:	defffe04 	addi	sp,sp,-8
10010e08:	dfc00115 	stw	ra,4(sp)
10010e0c:	df000015 	stw	fp,0(sp)
10010e10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010e14:	d0a00917 	ldw	r2,-32732(gp)
10010e18:	10000326 	beq	r2,zero,10010e28 <alt_get_errno+0x24>
10010e1c:	d0a00917 	ldw	r2,-32732(gp)
10010e20:	103ee83a 	callr	r2
10010e24:	00000106 	br	10010e2c <alt_get_errno+0x28>
10010e28:	d0a70804 	addi	r2,gp,-25568
}
10010e2c:	e037883a 	mov	sp,fp
10010e30:	dfc00117 	ldw	ra,4(sp)
10010e34:	df000017 	ldw	fp,0(sp)
10010e38:	dec00204 	addi	sp,sp,8
10010e3c:	f800283a 	ret

10010e40 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010e40:	defffa04 	addi	sp,sp,-24
10010e44:	dfc00515 	stw	ra,20(sp)
10010e48:	df000415 	stw	fp,16(sp)
10010e4c:	df000404 	addi	fp,sp,16
10010e50:	e13ffd15 	stw	r4,-12(fp)
10010e54:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010e58:	e0bffd17 	ldw	r2,-12(fp)
10010e5c:	10000326 	beq	r2,zero,10010e6c <alt_dev_llist_insert+0x2c>
10010e60:	e0bffd17 	ldw	r2,-12(fp)
10010e64:	10800217 	ldw	r2,8(r2)
10010e68:	1000061e 	bne	r2,zero,10010e84 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010e6c:	0010e040 	call	10010e04 <alt_get_errno>
10010e70:	1007883a 	mov	r3,r2
10010e74:	00800584 	movi	r2,22
10010e78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010e7c:	00bffa84 	movi	r2,-22
10010e80:	00001406 	br	10010ed4 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010e84:	e0bffd17 	ldw	r2,-12(fp)
10010e88:	e0fffc17 	ldw	r3,-16(fp)
10010e8c:	e0ffff15 	stw	r3,-4(fp)
10010e90:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
10010e94:	e0bffe17 	ldw	r2,-8(fp)
10010e98:	e0ffff17 	ldw	r3,-4(fp)
10010e9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010ea0:	e0bfff17 	ldw	r2,-4(fp)
10010ea4:	10c00017 	ldw	r3,0(r2)
10010ea8:	e0bffe17 	ldw	r2,-8(fp)
10010eac:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
10010eb0:	e0bfff17 	ldw	r2,-4(fp)
10010eb4:	10800017 	ldw	r2,0(r2)
10010eb8:	e0fffe17 	ldw	r3,-8(fp)
10010ebc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010ec0:	e0bfff17 	ldw	r2,-4(fp)
10010ec4:	e0fffe17 	ldw	r3,-8(fp)
10010ec8:	10c00015 	stw	r3,0(r2)
}
10010ecc:	0001883a 	nop

  return 0;  
10010ed0:	0005883a 	mov	r2,zero
}
10010ed4:	e037883a 	mov	sp,fp
10010ed8:	dfc00117 	ldw	ra,4(sp)
10010edc:	df000017 	ldw	fp,0(sp)
10010ee0:	dec00204 	addi	sp,sp,8
10010ee4:	f800283a 	ret

10010ee8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010ee8:	defffd04 	addi	sp,sp,-12
10010eec:	dfc00215 	stw	ra,8(sp)
10010ef0:	df000115 	stw	fp,4(sp)
10010ef4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010ef8:	00840074 	movhi	r2,4097
10010efc:	10875504 	addi	r2,r2,7508
10010f00:	e0bfff15 	stw	r2,-4(fp)
10010f04:	00000606 	br	10010f20 <_do_ctors+0x38>
        (*ctor) (); 
10010f08:	e0bfff17 	ldw	r2,-4(fp)
10010f0c:	10800017 	ldw	r2,0(r2)
10010f10:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010f14:	e0bfff17 	ldw	r2,-4(fp)
10010f18:	10bfff04 	addi	r2,r2,-4
10010f1c:	e0bfff15 	stw	r2,-4(fp)
10010f20:	e0ffff17 	ldw	r3,-4(fp)
10010f24:	00840074 	movhi	r2,4097
10010f28:	10875604 	addi	r2,r2,7512
10010f2c:	18bff62e 	bgeu	r3,r2,10010f08 <_do_ctors+0x20>
}
10010f30:	0001883a 	nop
10010f34:	0001883a 	nop
10010f38:	e037883a 	mov	sp,fp
10010f3c:	dfc00117 	ldw	ra,4(sp)
10010f40:	df000017 	ldw	fp,0(sp)
10010f44:	dec00204 	addi	sp,sp,8
10010f48:	f800283a 	ret

10010f4c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010f4c:	defffd04 	addi	sp,sp,-12
10010f50:	dfc00215 	stw	ra,8(sp)
10010f54:	df000115 	stw	fp,4(sp)
10010f58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010f5c:	00840074 	movhi	r2,4097
10010f60:	10875504 	addi	r2,r2,7508
10010f64:	e0bfff15 	stw	r2,-4(fp)
10010f68:	00000606 	br	10010f84 <_do_dtors+0x38>
        (*dtor) (); 
10010f6c:	e0bfff17 	ldw	r2,-4(fp)
10010f70:	10800017 	ldw	r2,0(r2)
10010f74:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010f78:	e0bfff17 	ldw	r2,-4(fp)
10010f7c:	10bfff04 	addi	r2,r2,-4
10010f80:	e0bfff15 	stw	r2,-4(fp)
10010f84:	e0ffff17 	ldw	r3,-4(fp)
10010f88:	00840074 	movhi	r2,4097
10010f8c:	10875604 	addi	r2,r2,7512
10010f90:	18bff62e 	bgeu	r3,r2,10010f6c <_do_dtors+0x20>
}
10010f94:	0001883a 	nop
10010f98:	0001883a 	nop
10010f9c:	e037883a 	mov	sp,fp
10010fa0:	dfc00117 	ldw	ra,4(sp)
10010fa4:	df000017 	ldw	fp,0(sp)
10010fa8:	dec00204 	addi	sp,sp,8
10010fac:	f800283a 	ret

10010fb0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010fb0:	deffff04 	addi	sp,sp,-4
10010fb4:	df000015 	stw	fp,0(sp)
10010fb8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10010fbc:	0001883a 	nop
10010fc0:	e037883a 	mov	sp,fp
10010fc4:	df000017 	ldw	fp,0(sp)
10010fc8:	dec00104 	addi	sp,sp,4
10010fcc:	f800283a 	ret

10010fd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010fd0:	defff904 	addi	sp,sp,-28
10010fd4:	dfc00615 	stw	ra,24(sp)
10010fd8:	df000515 	stw	fp,20(sp)
10010fdc:	df000504 	addi	fp,sp,20
10010fe0:	e13fff15 	stw	r4,-4(fp)
10010fe4:	e17ffe15 	stw	r5,-8(fp)
10010fe8:	e1bffd15 	stw	r6,-12(fp)
10010fec:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10010ff0:	e0800217 	ldw	r2,8(fp)
10010ff4:	d8800015 	stw	r2,0(sp)
10010ff8:	e1fffc17 	ldw	r7,-16(fp)
10010ffc:	e1bffd17 	ldw	r6,-12(fp)
10011000:	e17ffe17 	ldw	r5,-8(fp)
10011004:	e13fff17 	ldw	r4,-4(fp)
10011008:	00111800 	call	10011180 <alt_iic_isr_register>
}  
1001100c:	e037883a 	mov	sp,fp
10011010:	dfc00117 	ldw	ra,4(sp)
10011014:	df000017 	ldw	fp,0(sp)
10011018:	dec00204 	addi	sp,sp,8
1001101c:	f800283a 	ret

10011020 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011020:	defff904 	addi	sp,sp,-28
10011024:	df000615 	stw	fp,24(sp)
10011028:	df000604 	addi	fp,sp,24
1001102c:	e13ffb15 	stw	r4,-20(fp)
10011030:	e17ffa15 	stw	r5,-24(fp)
10011034:	e0bffa17 	ldw	r2,-24(fp)
10011038:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
1001103c:	0005303a 	rdctl	r2,status
10011040:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011044:	e0fffe17 	ldw	r3,-8(fp)
10011048:	00bfff84 	movi	r2,-2
1001104c:	1884703a 	and	r2,r3,r2
10011050:	1001703a 	wrctl	status,r2
  return context;
10011054:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011058:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
1001105c:	00c00044 	movi	r3,1
10011060:	e0bfff17 	ldw	r2,-4(fp)
10011064:	1884983a 	sll	r2,r3,r2
10011068:	1007883a 	mov	r3,r2
1001106c:	d0a70d17 	ldw	r2,-25548(gp)
10011070:	1884b03a 	or	r2,r3,r2
10011074:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011078:	d0a70d17 	ldw	r2,-25548(gp)
1001107c:	100170fa 	wrctl	ienable,r2
10011080:	e0bffd17 	ldw	r2,-12(fp)
10011084:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011088:	e0bffc17 	ldw	r2,-16(fp)
1001108c:	1001703a 	wrctl	status,r2
}
10011090:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
10011094:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
10011098:	e037883a 	mov	sp,fp
1001109c:	df000017 	ldw	fp,0(sp)
100110a0:	dec00104 	addi	sp,sp,4
100110a4:	f800283a 	ret

100110a8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100110a8:	defff904 	addi	sp,sp,-28
100110ac:	df000615 	stw	fp,24(sp)
100110b0:	df000604 	addi	fp,sp,24
100110b4:	e13ffb15 	stw	r4,-20(fp)
100110b8:	e17ffa15 	stw	r5,-24(fp)
100110bc:	e0bffa17 	ldw	r2,-24(fp)
100110c0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
100110c4:	0005303a 	rdctl	r2,status
100110c8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100110cc:	e0fffe17 	ldw	r3,-8(fp)
100110d0:	00bfff84 	movi	r2,-2
100110d4:	1884703a 	and	r2,r3,r2
100110d8:	1001703a 	wrctl	status,r2
  return context;
100110dc:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
100110e0:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
100110e4:	00c00044 	movi	r3,1
100110e8:	e0bfff17 	ldw	r2,-4(fp)
100110ec:	1884983a 	sll	r2,r3,r2
100110f0:	0084303a 	nor	r2,zero,r2
100110f4:	1007883a 	mov	r3,r2
100110f8:	d0a70d17 	ldw	r2,-25548(gp)
100110fc:	1884703a 	and	r2,r3,r2
10011100:	d0a70d15 	stw	r2,-25548(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011104:	d0a70d17 	ldw	r2,-25548(gp)
10011108:	100170fa 	wrctl	ienable,r2
1001110c:	e0bffd17 	ldw	r2,-12(fp)
10011110:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
10011114:	e0bffc17 	ldw	r2,-16(fp)
10011118:	1001703a 	wrctl	status,r2
}
1001111c:	0001883a 	nop
  return 0;
10011120:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
10011124:	e037883a 	mov	sp,fp
10011128:	df000017 	ldw	fp,0(sp)
1001112c:	dec00104 	addi	sp,sp,4
10011130:	f800283a 	ret

10011134 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011134:	defffc04 	addi	sp,sp,-16
10011138:	df000315 	stw	fp,12(sp)
1001113c:	df000304 	addi	fp,sp,12
10011140:	e13ffe15 	stw	r4,-8(fp)
10011144:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011148:	000530fa 	rdctl	r2,ienable
1001114c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011150:	00c00044 	movi	r3,1
10011154:	e0bffd17 	ldw	r2,-12(fp)
10011158:	1884983a 	sll	r2,r3,r2
1001115c:	1007883a 	mov	r3,r2
10011160:	e0bfff17 	ldw	r2,-4(fp)
10011164:	1884703a 	and	r2,r3,r2
10011168:	1004c03a 	cmpne	r2,r2,zero
1001116c:	10803fcc 	andi	r2,r2,255
}
10011170:	e037883a 	mov	sp,fp
10011174:	df000017 	ldw	fp,0(sp)
10011178:	dec00104 	addi	sp,sp,4
1001117c:	f800283a 	ret

10011180 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011180:	defff504 	addi	sp,sp,-44
10011184:	dfc00a15 	stw	ra,40(sp)
10011188:	df000915 	stw	fp,36(sp)
1001118c:	df000904 	addi	fp,sp,36
10011190:	e13ffa15 	stw	r4,-24(fp)
10011194:	e17ff915 	stw	r5,-28(fp)
10011198:	e1bff815 	stw	r6,-32(fp)
1001119c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
100111a0:	00bffa84 	movi	r2,-22
100111a4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100111a8:	e0bff917 	ldw	r2,-28(fp)
100111ac:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100111b0:	e0bffe17 	ldw	r2,-8(fp)
100111b4:	10800808 	cmpgei	r2,r2,32
100111b8:	1000251e 	bne	r2,zero,10011250 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
100111bc:	0005303a 	rdctl	r2,status
100111c0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100111c4:	e0fffc17 	ldw	r3,-16(fp)
100111c8:	00bfff84 	movi	r2,-2
100111cc:	1884703a 	and	r2,r3,r2
100111d0:	1001703a 	wrctl	status,r2
  return context;
100111d4:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100111d8:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
100111dc:	e0bffe17 	ldw	r2,-8(fp)
100111e0:	100890fa 	slli	r4,r2,3
100111e4:	e0fff817 	ldw	r3,-32(fp)
100111e8:	00840074 	movhi	r2,4097
100111ec:	2085883a 	add	r2,r4,r2
100111f0:	10d8cd15 	stw	r3,25396(r2)
    alt_irq[id].context = isr_context;
100111f4:	e0bffe17 	ldw	r2,-8(fp)
100111f8:	100890fa 	slli	r4,r2,3
100111fc:	e0fff717 	ldw	r3,-36(fp)
10011200:	00840074 	movhi	r2,4097
10011204:	2085883a 	add	r2,r4,r2
10011208:	10d8ce15 	stw	r3,25400(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1001120c:	e0bff817 	ldw	r2,-32(fp)
10011210:	10000526 	beq	r2,zero,10011228 <alt_iic_isr_register+0xa8>
10011214:	e0bffe17 	ldw	r2,-8(fp)
10011218:	100b883a 	mov	r5,r2
1001121c:	e13ffa17 	ldw	r4,-24(fp)
10011220:	00110200 	call	10011020 <alt_ic_irq_enable>
10011224:	00000406 	br	10011238 <alt_iic_isr_register+0xb8>
10011228:	e0bffe17 	ldw	r2,-8(fp)
1001122c:	100b883a 	mov	r5,r2
10011230:	e13ffa17 	ldw	r4,-24(fp)
10011234:	00110a80 	call	100110a8 <alt_ic_irq_disable>
10011238:	e0bfff15 	stw	r2,-4(fp)
1001123c:	e0bffd17 	ldw	r2,-12(fp)
10011240:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
10011244:	e0bffb17 	ldw	r2,-20(fp)
10011248:	1001703a 	wrctl	status,r2
}
1001124c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
10011250:	e0bfff17 	ldw	r2,-4(fp)
}
10011254:	e037883a 	mov	sp,fp
10011258:	dfc00117 	ldw	ra,4(sp)
1001125c:	df000017 	ldw	fp,0(sp)
10011260:	dec00204 	addi	sp,sp,8
10011264:	f800283a 	ret

10011268 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011268:	defff904 	addi	sp,sp,-28
1001126c:	dfc00615 	stw	ra,24(sp)
10011270:	df000515 	stw	fp,20(sp)
10011274:	df000504 	addi	fp,sp,20
10011278:	e13ffe15 	stw	r4,-8(fp)
1001127c:	e17ffd15 	stw	r5,-12(fp)
10011280:	e1bffc15 	stw	r6,-16(fp)
10011284:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
10011288:	e1bffb17 	ldw	r6,-20(fp)
1001128c:	e17ffc17 	ldw	r5,-16(fp)
10011290:	e13ffd17 	ldw	r4,-12(fp)
10011294:	00114d00 	call	100114d0 <open>
10011298:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
1001129c:	e0bfff17 	ldw	r2,-4(fp)
100112a0:	10002016 	blt	r2,zero,10011324 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
100112a4:	e0ffff17 	ldw	r3,-4(fp)
100112a8:	1805883a 	mov	r2,r3
100112ac:	1085883a 	add	r2,r2,r2
100112b0:	10c5883a 	add	r2,r2,r3
100112b4:	100490ba 	slli	r2,r2,2
100112b8:	00c40074 	movhi	r3,4097
100112bc:	10c7883a 	add	r3,r2,r3
100112c0:	18cd3a17 	ldw	r3,13544(r3)
100112c4:	e0bffe17 	ldw	r2,-8(fp)
100112c8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100112cc:	e0ffff17 	ldw	r3,-4(fp)
100112d0:	1805883a 	mov	r2,r3
100112d4:	1085883a 	add	r2,r2,r2
100112d8:	10c5883a 	add	r2,r2,r3
100112dc:	100490ba 	slli	r2,r2,2
100112e0:	00c40074 	movhi	r3,4097
100112e4:	10c7883a 	add	r3,r2,r3
100112e8:	18cd3b17 	ldw	r3,13548(r3)
100112ec:	e0bffe17 	ldw	r2,-8(fp)
100112f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100112f4:	e0ffff17 	ldw	r3,-4(fp)
100112f8:	1805883a 	mov	r2,r3
100112fc:	1085883a 	add	r2,r2,r2
10011300:	10c5883a 	add	r2,r2,r3
10011304:	100490ba 	slli	r2,r2,2
10011308:	00c40074 	movhi	r3,4097
1001130c:	10c7883a 	add	r3,r2,r3
10011310:	18cd3c17 	ldw	r3,13552(r3)
10011314:	e0bffe17 	ldw	r2,-8(fp)
10011318:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1001131c:	e13fff17 	ldw	r4,-4(fp)
10011320:	000fd900 	call	1000fd90 <alt_release_fd>
  }
} 
10011324:	0001883a 	nop
10011328:	e037883a 	mov	sp,fp
1001132c:	dfc00117 	ldw	ra,4(sp)
10011330:	df000017 	ldw	fp,0(sp)
10011334:	dec00204 	addi	sp,sp,8
10011338:	f800283a 	ret

1001133c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001133c:	defffb04 	addi	sp,sp,-20
10011340:	dfc00415 	stw	ra,16(sp)
10011344:	df000315 	stw	fp,12(sp)
10011348:	df000304 	addi	fp,sp,12
1001134c:	e13fff15 	stw	r4,-4(fp)
10011350:	e17ffe15 	stw	r5,-8(fp)
10011354:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10011358:	01c07fc4 	movi	r7,511
1001135c:	01800044 	movi	r6,1
10011360:	e17fff17 	ldw	r5,-4(fp)
10011364:	01040074 	movhi	r4,4097
10011368:	210d3d04 	addi	r4,r4,13556
1001136c:	00112680 	call	10011268 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10011370:	01c07fc4 	movi	r7,511
10011374:	000d883a 	mov	r6,zero
10011378:	e17ffe17 	ldw	r5,-8(fp)
1001137c:	01040074 	movhi	r4,4097
10011380:	210d3a04 	addi	r4,r4,13544
10011384:	00112680 	call	10011268 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10011388:	01c07fc4 	movi	r7,511
1001138c:	01800044 	movi	r6,1
10011390:	e17ffd17 	ldw	r5,-12(fp)
10011394:	01040074 	movhi	r4,4097
10011398:	210d4004 	addi	r4,r4,13568
1001139c:	00112680 	call	10011268 <alt_open_fd>
}  
100113a0:	0001883a 	nop
100113a4:	e037883a 	mov	sp,fp
100113a8:	dfc00117 	ldw	ra,4(sp)
100113ac:	df000017 	ldw	fp,0(sp)
100113b0:	dec00204 	addi	sp,sp,8
100113b4:	f800283a 	ret

100113b8 <alt_get_errno>:
{
100113b8:	defffe04 	addi	sp,sp,-8
100113bc:	dfc00115 	stw	ra,4(sp)
100113c0:	df000015 	stw	fp,0(sp)
100113c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100113c8:	d0a00917 	ldw	r2,-32732(gp)
100113cc:	10000326 	beq	r2,zero,100113dc <alt_get_errno+0x24>
100113d0:	d0a00917 	ldw	r2,-32732(gp)
100113d4:	103ee83a 	callr	r2
100113d8:	00000106 	br	100113e0 <alt_get_errno+0x28>
100113dc:	d0a70804 	addi	r2,gp,-25568
}
100113e0:	e037883a 	mov	sp,fp
100113e4:	dfc00117 	ldw	ra,4(sp)
100113e8:	df000017 	ldw	fp,0(sp)
100113ec:	dec00204 	addi	sp,sp,8
100113f0:	f800283a 	ret

100113f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100113f4:	defffd04 	addi	sp,sp,-12
100113f8:	df000215 	stw	fp,8(sp)
100113fc:	df000204 	addi	fp,sp,8
10011400:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10011404:	e0bffe17 	ldw	r2,-8(fp)
10011408:	10800217 	ldw	r2,8(r2)
1001140c:	10d00034 	orhi	r3,r2,16384
10011410:	e0bffe17 	ldw	r2,-8(fp)
10011414:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10011418:	e03fff15 	stw	zero,-4(fp)
1001141c:	00002306 	br	100114ac <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10011420:	e0ffff17 	ldw	r3,-4(fp)
10011424:	1805883a 	mov	r2,r3
10011428:	1085883a 	add	r2,r2,r2
1001142c:	10c5883a 	add	r2,r2,r3
10011430:	100490ba 	slli	r2,r2,2
10011434:	00c40074 	movhi	r3,4097
10011438:	10c7883a 	add	r3,r2,r3
1001143c:	18cd3a17 	ldw	r3,13544(r3)
10011440:	e0bffe17 	ldw	r2,-8(fp)
10011444:	10800017 	ldw	r2,0(r2)
10011448:	1880151e 	bne	r3,r2,100114a0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001144c:	e0ffff17 	ldw	r3,-4(fp)
10011450:	1805883a 	mov	r2,r3
10011454:	1085883a 	add	r2,r2,r2
10011458:	10c5883a 	add	r2,r2,r3
1001145c:	100490ba 	slli	r2,r2,2
10011460:	00c40074 	movhi	r3,4097
10011464:	10c7883a 	add	r3,r2,r3
10011468:	188d3c17 	ldw	r2,13552(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
1001146c:	10000c0e 	bge	r2,zero,100114a0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
10011470:	e0ffff17 	ldw	r3,-4(fp)
10011474:	1805883a 	mov	r2,r3
10011478:	1085883a 	add	r2,r2,r2
1001147c:	10c5883a 	add	r2,r2,r3
10011480:	100490ba 	slli	r2,r2,2
10011484:	00c40074 	movhi	r3,4097
10011488:	18cd3a04 	addi	r3,r3,13544
1001148c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10011490:	e0fffe17 	ldw	r3,-8(fp)
10011494:	18800226 	beq	r3,r2,100114a0 <alt_file_locked+0xac>
    {
      return -EACCES;
10011498:	00bffcc4 	movi	r2,-13
1001149c:	00000806 	br	100114c0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
100114a0:	e0bfff17 	ldw	r2,-4(fp)
100114a4:	10800044 	addi	r2,r2,1
100114a8:	e0bfff15 	stw	r2,-4(fp)
100114ac:	d0a00817 	ldw	r2,-32736(gp)
100114b0:	1007883a 	mov	r3,r2
100114b4:	e0bfff17 	ldw	r2,-4(fp)
100114b8:	18bfd92e 	bgeu	r3,r2,10011420 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100114bc:	0005883a 	mov	r2,zero
}
100114c0:	e037883a 	mov	sp,fp
100114c4:	df000017 	ldw	fp,0(sp)
100114c8:	dec00104 	addi	sp,sp,4
100114cc:	f800283a 	ret

100114d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100114d0:	defff604 	addi	sp,sp,-40
100114d4:	dfc00915 	stw	ra,36(sp)
100114d8:	df000815 	stw	fp,32(sp)
100114dc:	df000804 	addi	fp,sp,32
100114e0:	e13ffa15 	stw	r4,-24(fp)
100114e4:	e17ff915 	stw	r5,-28(fp)
100114e8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100114ec:	00bfffc4 	movi	r2,-1
100114f0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
100114f4:	00bffb44 	movi	r2,-19
100114f8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
100114fc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10011500:	d1600604 	addi	r5,gp,-32744
10011504:	e13ffa17 	ldw	r4,-24(fp)
10011508:	00118000 	call	10011800 <alt_find_dev>
1001150c:	e0bfff15 	stw	r2,-4(fp)
10011510:	e0bfff17 	ldw	r2,-4(fp)
10011514:	1000051e 	bne	r2,zero,1001152c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10011518:	e13ffa17 	ldw	r4,-24(fp)
1001151c:	00118900 	call	10011890 <alt_find_file>
10011520:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
10011524:	00800044 	movi	r2,1
10011528:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1001152c:	e0bfff17 	ldw	r2,-4(fp)
10011530:	10002c26 	beq	r2,zero,100115e4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10011534:	e13fff17 	ldw	r4,-4(fp)
10011538:	00119980 	call	10011998 <alt_get_fd>
1001153c:	e0bffe15 	stw	r2,-8(fp)
10011540:	e0bffe17 	ldw	r2,-8(fp)
10011544:	1000030e 	bge	r2,zero,10011554 <open+0x84>
    {
      status = index;
10011548:	e0bffe17 	ldw	r2,-8(fp)
1001154c:	e0bffd15 	stw	r2,-12(fp)
10011550:	00002606 	br	100115ec <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10011554:	e0fffe17 	ldw	r3,-8(fp)
10011558:	1805883a 	mov	r2,r3
1001155c:	1085883a 	add	r2,r2,r2
10011560:	10c5883a 	add	r2,r2,r3
10011564:	100490ba 	slli	r2,r2,2
10011568:	00c40074 	movhi	r3,4097
1001156c:	18cd3a04 	addi	r3,r3,13544
10011570:	10c5883a 	add	r2,r2,r3
10011574:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10011578:	e0fff917 	ldw	r3,-28(fp)
1001157c:	00900034 	movhi	r2,16384
10011580:	10bfffc4 	addi	r2,r2,-1
10011584:	1886703a 	and	r3,r3,r2
10011588:	e0bffb17 	ldw	r2,-20(fp)
1001158c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10011590:	e0bffc17 	ldw	r2,-16(fp)
10011594:	1000051e 	bne	r2,zero,100115ac <open+0xdc>
10011598:	e13ffb17 	ldw	r4,-20(fp)
1001159c:	00113f40 	call	100113f4 <alt_file_locked>
100115a0:	e0bffd15 	stw	r2,-12(fp)
100115a4:	e0bffd17 	ldw	r2,-12(fp)
100115a8:	10001016 	blt	r2,zero,100115ec <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100115ac:	e0bfff17 	ldw	r2,-4(fp)
100115b0:	10800317 	ldw	r2,12(r2)
100115b4:	10000826 	beq	r2,zero,100115d8 <open+0x108>
100115b8:	e0bfff17 	ldw	r2,-4(fp)
100115bc:	10800317 	ldw	r2,12(r2)
100115c0:	e1fff817 	ldw	r7,-32(fp)
100115c4:	e1bff917 	ldw	r6,-28(fp)
100115c8:	e17ffa17 	ldw	r5,-24(fp)
100115cc:	e13ffb17 	ldw	r4,-20(fp)
100115d0:	103ee83a 	callr	r2
100115d4:	00000106 	br	100115dc <open+0x10c>
100115d8:	0005883a 	mov	r2,zero
100115dc:	e0bffd15 	stw	r2,-12(fp)
100115e0:	00000206 	br	100115ec <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100115e4:	00bffb44 	movi	r2,-19
100115e8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100115ec:	e0bffd17 	ldw	r2,-12(fp)
100115f0:	1000090e 	bge	r2,zero,10011618 <open+0x148>
  {
    alt_release_fd (index);  
100115f4:	e13ffe17 	ldw	r4,-8(fp)
100115f8:	000fd900 	call	1000fd90 <alt_release_fd>
    ALT_ERRNO = -status;
100115fc:	00113b80 	call	100113b8 <alt_get_errno>
10011600:	1007883a 	mov	r3,r2
10011604:	e0bffd17 	ldw	r2,-12(fp)
10011608:	0085c83a 	sub	r2,zero,r2
1001160c:	18800015 	stw	r2,0(r3)
    return -1;
10011610:	00bfffc4 	movi	r2,-1
10011614:	00000106 	br	1001161c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10011618:	e0bffe17 	ldw	r2,-8(fp)
}
1001161c:	e037883a 	mov	sp,fp
10011620:	dfc00117 	ldw	ra,4(sp)
10011624:	df000017 	ldw	fp,0(sp)
10011628:	dec00204 	addi	sp,sp,8
1001162c:	f800283a 	ret

10011630 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10011630:	defffa04 	addi	sp,sp,-24
10011634:	df000515 	stw	fp,20(sp)
10011638:	df000504 	addi	fp,sp,20
1001163c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
10011640:	0005303a 	rdctl	r2,status
10011644:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011648:	e0fffc17 	ldw	r3,-16(fp)
1001164c:	00bfff84 	movi	r2,-2
10011650:	1884703a 	and	r2,r3,r2
10011654:	1001703a 	wrctl	status,r2
  return context;
10011658:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001165c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
10011660:	e0bffb17 	ldw	r2,-20(fp)
10011664:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10011668:	e0bffd17 	ldw	r2,-12(fp)
1001166c:	10800017 	ldw	r2,0(r2)
10011670:	e0fffd17 	ldw	r3,-12(fp)
10011674:	18c00117 	ldw	r3,4(r3)
10011678:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001167c:	e0bffd17 	ldw	r2,-12(fp)
10011680:	10800117 	ldw	r2,4(r2)
10011684:	e0fffd17 	ldw	r3,-12(fp)
10011688:	18c00017 	ldw	r3,0(r3)
1001168c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10011690:	e0bffd17 	ldw	r2,-12(fp)
10011694:	e0fffd17 	ldw	r3,-12(fp)
10011698:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1001169c:	e0bffd17 	ldw	r2,-12(fp)
100116a0:	e0fffd17 	ldw	r3,-12(fp)
100116a4:	10c00015 	stw	r3,0(r2)
} 
100116a8:	0001883a 	nop
100116ac:	e0bfff17 	ldw	r2,-4(fp)
100116b0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
100116b4:	e0bffe17 	ldw	r2,-8(fp)
100116b8:	1001703a 	wrctl	status,r2
}
100116bc:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
100116c0:	0001883a 	nop
100116c4:	e037883a 	mov	sp,fp
100116c8:	df000017 	ldw	fp,0(sp)
100116cc:	dec00104 	addi	sp,sp,4
100116d0:	f800283a 	ret

100116d4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100116d4:	defffb04 	addi	sp,sp,-20
100116d8:	dfc00415 	stw	ra,16(sp)
100116dc:	df000315 	stw	fp,12(sp)
100116e0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100116e4:	d0a00c17 	ldw	r2,-32720(gp)
100116e8:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100116ec:	d0a70f17 	ldw	r2,-25540(gp)
100116f0:	10800044 	addi	r2,r2,1
100116f4:	d0a70f15 	stw	r2,-25540(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100116f8:	00002e06 	br	100117b4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100116fc:	e0bfff17 	ldw	r2,-4(fp)
10011700:	10800017 	ldw	r2,0(r2)
10011704:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10011708:	e0bfff17 	ldw	r2,-4(fp)
1001170c:	10800403 	ldbu	r2,16(r2)
10011710:	10803fcc 	andi	r2,r2,255
10011714:	10000426 	beq	r2,zero,10011728 <alt_tick+0x54>
10011718:	d0a70f17 	ldw	r2,-25540(gp)
1001171c:	1000021e 	bne	r2,zero,10011728 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10011720:	e0bfff17 	ldw	r2,-4(fp)
10011724:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10011728:	e0bfff17 	ldw	r2,-4(fp)
1001172c:	10800217 	ldw	r2,8(r2)
10011730:	d0e70f17 	ldw	r3,-25540(gp)
10011734:	18801d36 	bltu	r3,r2,100117ac <alt_tick+0xd8>
10011738:	e0bfff17 	ldw	r2,-4(fp)
1001173c:	10800403 	ldbu	r2,16(r2)
10011740:	10803fcc 	andi	r2,r2,255
10011744:	1000191e 	bne	r2,zero,100117ac <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10011748:	e0bfff17 	ldw	r2,-4(fp)
1001174c:	10800317 	ldw	r2,12(r2)
10011750:	e0ffff17 	ldw	r3,-4(fp)
10011754:	18c00517 	ldw	r3,20(r3)
10011758:	1809883a 	mov	r4,r3
1001175c:	103ee83a 	callr	r2
10011760:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10011764:	e0bffd17 	ldw	r2,-12(fp)
10011768:	1000031e 	bne	r2,zero,10011778 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1001176c:	e13fff17 	ldw	r4,-4(fp)
10011770:	00116300 	call	10011630 <alt_alarm_stop>
10011774:	00000d06 	br	100117ac <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10011778:	e0bfff17 	ldw	r2,-4(fp)
1001177c:	10c00217 	ldw	r3,8(r2)
10011780:	e0bffd17 	ldw	r2,-12(fp)
10011784:	1887883a 	add	r3,r3,r2
10011788:	e0bfff17 	ldw	r2,-4(fp)
1001178c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10011790:	e0bfff17 	ldw	r2,-4(fp)
10011794:	10c00217 	ldw	r3,8(r2)
10011798:	d0a70f17 	ldw	r2,-25540(gp)
1001179c:	1880032e 	bgeu	r3,r2,100117ac <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100117a0:	e0bfff17 	ldw	r2,-4(fp)
100117a4:	00c00044 	movi	r3,1
100117a8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100117ac:	e0bffe17 	ldw	r2,-8(fp)
100117b0:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
100117b4:	e0ffff17 	ldw	r3,-4(fp)
100117b8:	d0a00c04 	addi	r2,gp,-32720
100117bc:	18bfcf1e 	bne	r3,r2,100116fc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100117c0:	0001883a 	nop
}
100117c4:	0001883a 	nop
100117c8:	e037883a 	mov	sp,fp
100117cc:	dfc00117 	ldw	ra,4(sp)
100117d0:	df000017 	ldw	fp,0(sp)
100117d4:	dec00204 	addi	sp,sp,8
100117d8:	f800283a 	ret

100117dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100117dc:	deffff04 	addi	sp,sp,-4
100117e0:	df000015 	stw	fp,0(sp)
100117e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100117e8:	000170fa 	wrctl	ienable,zero
}
100117ec:	0001883a 	nop
100117f0:	e037883a 	mov	sp,fp
100117f4:	df000017 	ldw	fp,0(sp)
100117f8:	dec00104 	addi	sp,sp,4
100117fc:	f800283a 	ret

10011800 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10011800:	defffa04 	addi	sp,sp,-24
10011804:	dfc00515 	stw	ra,20(sp)
10011808:	df000415 	stw	fp,16(sp)
1001180c:	df000404 	addi	fp,sp,16
10011810:	e13ffd15 	stw	r4,-12(fp)
10011814:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
10011818:	e0bffc17 	ldw	r2,-16(fp)
1001181c:	10800017 	ldw	r2,0(r2)
10011820:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10011824:	e13ffd17 	ldw	r4,-12(fp)
10011828:	00023c80 	call	100023c8 <strlen>
1001182c:	10800044 	addi	r2,r2,1
10011830:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10011834:	00000d06 	br	1001186c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10011838:	e0bfff17 	ldw	r2,-4(fp)
1001183c:	10800217 	ldw	r2,8(r2)
10011840:	e0fffe17 	ldw	r3,-8(fp)
10011844:	180d883a 	mov	r6,r3
10011848:	e17ffd17 	ldw	r5,-12(fp)
1001184c:	1009883a 	mov	r4,r2
10011850:	0011b300 	call	10011b30 <memcmp>
10011854:	1000021e 	bne	r2,zero,10011860 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10011858:	e0bfff17 	ldw	r2,-4(fp)
1001185c:	00000706 	br	1001187c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10011860:	e0bfff17 	ldw	r2,-4(fp)
10011864:	10800017 	ldw	r2,0(r2)
10011868:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
1001186c:	e0ffff17 	ldw	r3,-4(fp)
10011870:	e0bffc17 	ldw	r2,-16(fp)
10011874:	18bff01e 	bne	r3,r2,10011838 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
10011878:	0005883a 	mov	r2,zero
}
1001187c:	e037883a 	mov	sp,fp
10011880:	dfc00117 	ldw	ra,4(sp)
10011884:	df000017 	ldw	fp,0(sp)
10011888:	dec00204 	addi	sp,sp,8
1001188c:	f800283a 	ret

10011890 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10011890:	defffb04 	addi	sp,sp,-20
10011894:	dfc00415 	stw	ra,16(sp)
10011898:	df000315 	stw	fp,12(sp)
1001189c:	df000304 	addi	fp,sp,12
100118a0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100118a4:	d0a00417 	ldw	r2,-32752(gp)
100118a8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100118ac:	00003106 	br	10011974 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100118b0:	e0bfff17 	ldw	r2,-4(fp)
100118b4:	10800217 	ldw	r2,8(r2)
100118b8:	1009883a 	mov	r4,r2
100118bc:	00023c80 	call	100023c8 <strlen>
100118c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100118c4:	e0bfff17 	ldw	r2,-4(fp)
100118c8:	10c00217 	ldw	r3,8(r2)
100118cc:	e0bffe17 	ldw	r2,-8(fp)
100118d0:	10bfffc4 	addi	r2,r2,-1
100118d4:	1885883a 	add	r2,r3,r2
100118d8:	10800003 	ldbu	r2,0(r2)
100118dc:	10803fcc 	andi	r2,r2,255
100118e0:	1080201c 	xori	r2,r2,128
100118e4:	10bfe004 	addi	r2,r2,-128
100118e8:	10800bd8 	cmpnei	r2,r2,47
100118ec:	1000031e 	bne	r2,zero,100118fc <alt_find_file+0x6c>
    {
      len -= 1;
100118f0:	e0bffe17 	ldw	r2,-8(fp)
100118f4:	10bfffc4 	addi	r2,r2,-1
100118f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100118fc:	e0bffe17 	ldw	r2,-8(fp)
10011900:	e0fffd17 	ldw	r3,-12(fp)
10011904:	1885883a 	add	r2,r3,r2
10011908:	10800003 	ldbu	r2,0(r2)
1001190c:	10803fcc 	andi	r2,r2,255
10011910:	1080201c 	xori	r2,r2,128
10011914:	10bfe004 	addi	r2,r2,-128
10011918:	10800be0 	cmpeqi	r2,r2,47
1001191c:	1000081e 	bne	r2,zero,10011940 <alt_find_file+0xb0>
10011920:	e0bffe17 	ldw	r2,-8(fp)
10011924:	e0fffd17 	ldw	r3,-12(fp)
10011928:	1885883a 	add	r2,r3,r2
1001192c:	10800003 	ldbu	r2,0(r2)
10011930:	10803fcc 	andi	r2,r2,255
10011934:	1080201c 	xori	r2,r2,128
10011938:	10bfe004 	addi	r2,r2,-128
1001193c:	10000a1e 	bne	r2,zero,10011968 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10011940:	e0bfff17 	ldw	r2,-4(fp)
10011944:	10800217 	ldw	r2,8(r2)
10011948:	e0fffe17 	ldw	r3,-8(fp)
1001194c:	180d883a 	mov	r6,r3
10011950:	e17ffd17 	ldw	r5,-12(fp)
10011954:	1009883a 	mov	r4,r2
10011958:	0011b300 	call	10011b30 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
1001195c:	1000021e 	bne	r2,zero,10011968 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
10011960:	e0bfff17 	ldw	r2,-4(fp)
10011964:	00000706 	br	10011984 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10011968:	e0bfff17 	ldw	r2,-4(fp)
1001196c:	10800017 	ldw	r2,0(r2)
10011970:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
10011974:	e0ffff17 	ldw	r3,-4(fp)
10011978:	d0a00404 	addi	r2,gp,-32752
1001197c:	18bfcc1e 	bne	r3,r2,100118b0 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
10011980:	0005883a 	mov	r2,zero
}
10011984:	e037883a 	mov	sp,fp
10011988:	dfc00117 	ldw	ra,4(sp)
1001198c:	df000017 	ldw	fp,0(sp)
10011990:	dec00204 	addi	sp,sp,8
10011994:	f800283a 	ret

10011998 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10011998:	defffc04 	addi	sp,sp,-16
1001199c:	df000315 	stw	fp,12(sp)
100119a0:	df000304 	addi	fp,sp,12
100119a4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
100119a8:	00bffa04 	movi	r2,-24
100119ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100119b0:	e03fff15 	stw	zero,-4(fp)
100119b4:	00001d06 	br	10011a2c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
100119b8:	e0ffff17 	ldw	r3,-4(fp)
100119bc:	1805883a 	mov	r2,r3
100119c0:	1085883a 	add	r2,r2,r2
100119c4:	10c5883a 	add	r2,r2,r3
100119c8:	100490ba 	slli	r2,r2,2
100119cc:	00c40074 	movhi	r3,4097
100119d0:	10c7883a 	add	r3,r2,r3
100119d4:	188d3a17 	ldw	r2,13544(r3)
100119d8:	1000111e 	bne	r2,zero,10011a20 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
100119dc:	e0ffff17 	ldw	r3,-4(fp)
100119e0:	1805883a 	mov	r2,r3
100119e4:	1085883a 	add	r2,r2,r2
100119e8:	10c5883a 	add	r2,r2,r3
100119ec:	100490ba 	slli	r2,r2,2
100119f0:	e13ffd17 	ldw	r4,-12(fp)
100119f4:	00c40074 	movhi	r3,4097
100119f8:	10c7883a 	add	r3,r2,r3
100119fc:	190d3a15 	stw	r4,13544(r3)
      if (i > alt_max_fd)
10011a00:	d0e00817 	ldw	r3,-32736(gp)
10011a04:	e0bfff17 	ldw	r2,-4(fp)
10011a08:	1880020e 	bge	r3,r2,10011a14 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10011a14:	e0bfff17 	ldw	r2,-4(fp)
10011a18:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10011a1c:	00000706 	br	10011a3c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
10011a20:	e0bfff17 	ldw	r2,-4(fp)
10011a24:	10800044 	addi	r2,r2,1
10011a28:	e0bfff15 	stw	r2,-4(fp)
10011a2c:	e0bfff17 	ldw	r2,-4(fp)
10011a30:	10800810 	cmplti	r2,r2,32
10011a34:	103fe01e 	bne	r2,zero,100119b8 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
10011a38:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011a3c:	e0bffe17 	ldw	r2,-8(fp)
}
10011a40:	e037883a 	mov	sp,fp
10011a44:	df000017 	ldw	fp,0(sp)
10011a48:	dec00104 	addi	sp,sp,4
10011a4c:	f800283a 	ret

10011a50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10011a50:	defffe04 	addi	sp,sp,-8
10011a54:	df000115 	stw	fp,4(sp)
10011a58:	df000104 	addi	fp,sp,4
10011a5c:	e13fff15 	stw	r4,-4(fp)
10011a60:	e0bfff17 	ldw	r2,-4(fp)
10011a64:	10bffe84 	addi	r2,r2,-6
10011a68:	10c00428 	cmpgeui	r3,r2,16
10011a6c:	1800191e 	bne	r3,zero,10011ad4 <alt_exception_cause_generated_bad_addr+0x84>
10011a70:	100690ba 	slli	r3,r2,2
10011a74:	00840074 	movhi	r2,4097
10011a78:	1885883a 	add	r2,r3,r2
10011a7c:	1086a117 	ldw	r2,6788(r2)
10011a80:	1000683a 	jmp	r2
10011a84:	10011ac4 	addi	zero,r2,1131
10011a88:	10011ac4 	addi	zero,r2,1131
10011a8c:	10011ad4 	ori	zero,r2,1131
10011a90:	10011ad4 	ori	zero,r2,1131
10011a94:	10011ad4 	ori	zero,r2,1131
10011a98:	10011ac4 	addi	zero,r2,1131
10011a9c:	10011acc 	andi	zero,r2,1131
10011aa0:	10011ad4 	ori	zero,r2,1131
10011aa4:	10011ac4 	addi	zero,r2,1131
10011aa8:	10011ac4 	addi	zero,r2,1131
10011aac:	10011ad4 	ori	zero,r2,1131
10011ab0:	10011ac4 	addi	zero,r2,1131
10011ab4:	10011acc 	andi	zero,r2,1131
10011ab8:	10011ad4 	ori	zero,r2,1131
10011abc:	10011ad4 	ori	zero,r2,1131
10011ac0:	10011ac4 	addi	zero,r2,1131
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10011ac4:	00800044 	movi	r2,1
10011ac8:	00000306 	br	10011ad8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10011acc:	0005883a 	mov	r2,zero
10011ad0:	00000106 	br	10011ad8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
10011ad4:	0005883a 	mov	r2,zero
  }
}
10011ad8:	e037883a 	mov	sp,fp
10011adc:	df000017 	ldw	fp,0(sp)
10011ae0:	dec00104 	addi	sp,sp,4
10011ae4:	f800283a 	ret

10011ae8 <atexit>:
10011ae8:	200b883a 	mov	r5,r4
10011aec:	000f883a 	mov	r7,zero
10011af0:	000d883a 	mov	r6,zero
10011af4:	0009883a 	mov	r4,zero
10011af8:	0011ba81 	jmpi	10011ba8 <__register_exitproc>

10011afc <exit>:
10011afc:	defffe04 	addi	sp,sp,-8
10011b00:	000b883a 	mov	r5,zero
10011b04:	dc000015 	stw	r16,0(sp)
10011b08:	dfc00115 	stw	ra,4(sp)
10011b0c:	2021883a 	mov	r16,r4
10011b10:	0011c380 	call	10011c38 <__call_exitprocs>
10011b14:	00840074 	movhi	r2,4097
10011b18:	1111b217 	ldw	r4,18120(r2)
10011b1c:	20800f17 	ldw	r2,60(r4)
10011b20:	10000126 	beq	r2,zero,10011b28 <exit+0x2c>
10011b24:	103ee83a 	callr	r2
10011b28:	8009883a 	mov	r4,r16
10011b2c:	000f5dc0 	call	1000f5dc <_exit>

10011b30 <memcmp>:
10011b30:	30800130 	cmpltui	r2,r6,4
10011b34:	10000b1e 	bne	r2,zero,10011b64 <memcmp+0x34>
10011b38:	2144b03a 	or	r2,r4,r5
10011b3c:	108000cc 	andi	r2,r2,3
10011b40:	1000171e 	bne	r2,zero,10011ba0 <memcmp+0x70>
10011b44:	20c00017 	ldw	r3,0(r4)
10011b48:	28800017 	ldw	r2,0(r5)
10011b4c:	1880141e 	bne	r3,r2,10011ba0 <memcmp+0x70>
10011b50:	31bfff04 	addi	r6,r6,-4
10011b54:	30800128 	cmpgeui	r2,r6,4
10011b58:	21000104 	addi	r4,r4,4
10011b5c:	29400104 	addi	r5,r5,4
10011b60:	103ff81e 	bne	r2,zero,10011b44 <memcmp+0x14>
10011b64:	30bfffc4 	addi	r2,r6,-1
10011b68:	30000b26 	beq	r6,zero,10011b98 <memcmp+0x68>
10011b6c:	11800044 	addi	r6,r2,1
10011b70:	218d883a 	add	r6,r4,r6
10011b74:	00000106 	br	10011b7c <memcmp+0x4c>
10011b78:	21800726 	beq	r4,r6,10011b98 <memcmp+0x68>
10011b7c:	20800003 	ldbu	r2,0(r4)
10011b80:	28c00003 	ldbu	r3,0(r5)
10011b84:	21000044 	addi	r4,r4,1
10011b88:	29400044 	addi	r5,r5,1
10011b8c:	10fffa26 	beq	r2,r3,10011b78 <memcmp+0x48>
10011b90:	10c5c83a 	sub	r2,r2,r3
10011b94:	f800283a 	ret
10011b98:	0005883a 	mov	r2,zero
10011b9c:	f800283a 	ret
10011ba0:	30bfffc4 	addi	r2,r6,-1
10011ba4:	003ff106 	br	10011b6c <memcmp+0x3c>

10011ba8 <__register_exitproc>:
10011ba8:	00840074 	movhi	r2,4097
10011bac:	10d1b217 	ldw	r3,18120(r2)
10011bb0:	18805217 	ldw	r2,328(r3)
10011bb4:	10001726 	beq	r2,zero,10011c14 <__register_exitproc+0x6c>
10011bb8:	10c00117 	ldw	r3,4(r2)
10011bbc:	1a000808 	cmpgei	r8,r3,32
10011bc0:	40001b1e 	bne	r8,zero,10011c30 <__register_exitproc+0x88>
10011bc4:	20000b26 	beq	r4,zero,10011bf4 <__register_exitproc+0x4c>
10011bc8:	181090ba 	slli	r8,r3,2
10011bcc:	02400044 	movi	r9,1
10011bd0:	48d2983a 	sll	r9,r9,r3
10011bd4:	1211883a 	add	r8,r2,r8
10011bd8:	41802215 	stw	r6,136(r8)
10011bdc:	11806217 	ldw	r6,392(r2)
10011be0:	21000098 	cmpnei	r4,r4,2
10011be4:	324cb03a 	or	r6,r6,r9
10011be8:	11806215 	stw	r6,392(r2)
10011bec:	41c04215 	stw	r7,264(r8)
10011bf0:	20000b26 	beq	r4,zero,10011c20 <__register_exitproc+0x78>
10011bf4:	19000084 	addi	r4,r3,2
10011bf8:	200890ba 	slli	r4,r4,2
10011bfc:	18c00044 	addi	r3,r3,1
10011c00:	10c00115 	stw	r3,4(r2)
10011c04:	1105883a 	add	r2,r2,r4
10011c08:	11400015 	stw	r5,0(r2)
10011c0c:	0005883a 	mov	r2,zero
10011c10:	f800283a 	ret
10011c14:	18805304 	addi	r2,r3,332
10011c18:	18805215 	stw	r2,328(r3)
10011c1c:	003fe606 	br	10011bb8 <__register_exitproc+0x10>
10011c20:	11006317 	ldw	r4,396(r2)
10011c24:	2252b03a 	or	r9,r4,r9
10011c28:	12406315 	stw	r9,396(r2)
10011c2c:	003ff106 	br	10011bf4 <__register_exitproc+0x4c>
10011c30:	00bfffc4 	movi	r2,-1
10011c34:	f800283a 	ret

10011c38 <__call_exitprocs>:
10011c38:	defff704 	addi	sp,sp,-36
10011c3c:	00840074 	movhi	r2,4097
10011c40:	dcc00315 	stw	r19,12(sp)
10011c44:	14d1b217 	ldw	r19,18120(r2)
10011c48:	dc800215 	stw	r18,8(sp)
10011c4c:	dfc00815 	stw	ra,32(sp)
10011c50:	9c805217 	ldw	r18,328(r19)
10011c54:	ddc00715 	stw	r23,28(sp)
10011c58:	dd800615 	stw	r22,24(sp)
10011c5c:	dd400515 	stw	r21,20(sp)
10011c60:	dd000415 	stw	r20,16(sp)
10011c64:	dc400115 	stw	r17,4(sp)
10011c68:	dc000015 	stw	r16,0(sp)
10011c6c:	90001026 	beq	r18,zero,10011cb0 <__call_exitprocs+0x78>
10011c70:	202b883a 	mov	r21,r4
10011c74:	282d883a 	mov	r22,r5
10011c78:	05000044 	movi	r20,1
10011c7c:	94000117 	ldw	r16,4(r18)
10011c80:	847fffc4 	addi	r17,r16,-1
10011c84:	88000a16 	blt	r17,zero,10011cb0 <__call_exitprocs+0x78>
10011c88:	84000044 	addi	r16,r16,1
10011c8c:	802090ba 	slli	r16,r16,2
10011c90:	9421883a 	add	r16,r18,r16
10011c94:	b0001126 	beq	r22,zero,10011cdc <__call_exitprocs+0xa4>
10011c98:	80804017 	ldw	r2,256(r16)
10011c9c:	15800f26 	beq	r2,r22,10011cdc <__call_exitprocs+0xa4>
10011ca0:	8c7fffc4 	addi	r17,r17,-1
10011ca4:	88bfffd8 	cmpnei	r2,r17,-1
10011ca8:	843fff04 	addi	r16,r16,-4
10011cac:	103ff91e 	bne	r2,zero,10011c94 <__call_exitprocs+0x5c>
10011cb0:	dfc00817 	ldw	ra,32(sp)
10011cb4:	ddc00717 	ldw	r23,28(sp)
10011cb8:	dd800617 	ldw	r22,24(sp)
10011cbc:	dd400517 	ldw	r21,20(sp)
10011cc0:	dd000417 	ldw	r20,16(sp)
10011cc4:	dcc00317 	ldw	r19,12(sp)
10011cc8:	dc800217 	ldw	r18,8(sp)
10011ccc:	dc400117 	ldw	r17,4(sp)
10011cd0:	dc000017 	ldw	r16,0(sp)
10011cd4:	dec00904 	addi	sp,sp,36
10011cd8:	f800283a 	ret
10011cdc:	90800117 	ldw	r2,4(r18)
10011ce0:	81800017 	ldw	r6,0(r16)
10011ce4:	10bfffc4 	addi	r2,r2,-1
10011ce8:	14401726 	beq	r2,r17,10011d48 <__call_exitprocs+0x110>
10011cec:	80000015 	stw	zero,0(r16)
10011cf0:	303feb26 	beq	r6,zero,10011ca0 <__call_exitprocs+0x68>
10011cf4:	a446983a 	sll	r3,r20,r17
10011cf8:	90806217 	ldw	r2,392(r18)
10011cfc:	95c00117 	ldw	r23,4(r18)
10011d00:	1884703a 	and	r2,r3,r2
10011d04:	1000081e 	bne	r2,zero,10011d28 <__call_exitprocs+0xf0>
10011d08:	303ee83a 	callr	r6
10011d0c:	90c00117 	ldw	r3,4(r18)
10011d10:	98805217 	ldw	r2,328(r19)
10011d14:	1dc0011e 	bne	r3,r23,10011d1c <__call_exitprocs+0xe4>
10011d18:	90bfe126 	beq	r18,r2,10011ca0 <__call_exitprocs+0x68>
10011d1c:	103fe426 	beq	r2,zero,10011cb0 <__call_exitprocs+0x78>
10011d20:	1025883a 	mov	r18,r2
10011d24:	003fd506 	br	10011c7c <__call_exitprocs+0x44>
10011d28:	90806317 	ldw	r2,396(r18)
10011d2c:	81002017 	ldw	r4,128(r16)
10011d30:	1886703a 	and	r3,r3,r2
10011d34:	1800061e 	bne	r3,zero,10011d50 <__call_exitprocs+0x118>
10011d38:	200b883a 	mov	r5,r4
10011d3c:	a809883a 	mov	r4,r21
10011d40:	303ee83a 	callr	r6
10011d44:	003ff106 	br	10011d0c <__call_exitprocs+0xd4>
10011d48:	94400115 	stw	r17,4(r18)
10011d4c:	003fe806 	br	10011cf0 <__call_exitprocs+0xb8>
10011d50:	303ee83a 	callr	r6
10011d54:	003fed06 	br	10011d0c <__call_exitprocs+0xd4>
