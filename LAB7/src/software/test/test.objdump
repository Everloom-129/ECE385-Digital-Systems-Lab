
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x02000020

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000007bc memsz 0x000007bc flags r-x
    LOAD off    0x000017dc vaddr 0x020007dc paddr 0x02000dc8 align 2**12
         filesz 0x000005ec memsz 0x000005ec flags rw-
    LOAD off    0x000023b4 vaddr 0x020013b4 paddr 0x020013b4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  02000020  02000020  00001dc8  2**0
                  CONTENTS
  2 .text         000007b0  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  020007d0  020007d0  000017d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005ec  020007dc  02000dc8  000017dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  020013b4  020013b4  000023b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00001dc8  2**0
                  CONTENTS
  7 .sdram        00000000  020013c4  020013c4  00001dc8  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000290  00000000  00000000  00001df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00003b47  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000011e3  00000000  00000000  00005bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   000012d0  00000000  00000000  00006db2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  000003cc  00000000  00000000  00008084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00000dcb  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000315  00000000  00000000  0000921b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000010  00000000  00000000  00009530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000088  00000000  00000000  00009540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  0000a758  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0000a75b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000a767  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000a768  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0000a769  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0000a76d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0000a771  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0000a775  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0000a779  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0000a77d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0000a781  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000035  00000000  00000000  0000a789  2**0
                  CONTENTS, READONLY
 30 .jdi          00003db5  00000000  00000000  0000a7be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
02000020 l    d  .text	00000000 .text
020007d0 l    d  .rodata	00000000 .rodata
020007dc l    d  .rwdata	00000000 .rwdata
020013b4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
020013c4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 d:/intelFPGA_lite/GYH-WORK/Labs_and_reports/LAB7/LAB7/software/test_bsp//obj/HAL/src/crt0.o
02000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
02000114 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
020002c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
020003f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
02000984 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
02000200 g     F .text	00000060 alt_main
02000dc8 g       *ABS*	00000000 __flash_rwdata_start
0200057c g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000000c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
020013c0 g     O .bss	00000004 errno
020013b8 g     O .bss	00000004 alt_argv
02008da8 g       *ABS*	00000000 _gp
02000804 g     O .rwdata	00000180 alt_fd_list
020007d0 g       *ABS*	00000000 __DTOR_END__
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
02000db8 g     O .rwdata	00000004 alt_max_fd
02000dc0 g     O .rwdata	00000004 _global_impure_ptr
020013c4 g       *ABS*	00000000 __bss_end
020007dc g     O .rwdata	00000028 alt_dev_null
020003d8 g     F .text	00000020 alt_dcache_flush_all
02000dc8 g       *ABS*	00000000 __ram_rwdata_end
02000db0 g     O .rwdata	00000008 alt_dev_list
020007dc g       *ABS*	00000000 __ram_rodata_end
020013c4 g       *ABS*	00000000 end
020007d0 g       *ABS*	00000000 __CTOR_LIST__
03000000 g       *ABS*	00000000 __alt_stack_pointer
02000678 g     F .text	00000120 __call_exitprocs
02000020 g     F .text	0000003c _start
0200029c g     F .text	00000024 alt_sys_init
020005e8 g     F .text	00000090 __register_exitproc
020007dc g       *ABS*	00000000 __ram_rwdata_start
020007d0 g       *ABS*	00000000 __ram_rodata_start
020013c4 g       *ABS*	00000000 __alt_stack_base
020013b4 g       *ABS*	00000000 __bss_start
0200005c g     F .text	000000b8 main
020013bc g     O .bss	00000004 alt_envp
02000dbc g     O .rwdata	00000004 alt_errno
020007d0 g       *ABS*	00000000 __CTOR_END__
020007d0 g       *ABS*	00000000 __flash_rodata_start
020007d0 g       *ABS*	00000000 __DTOR_LIST__
02000260 g     F .text	0000003c alt_irq_init
0200050c g     F .text	00000070 alt_release_fd
020005a0 g     F .text	00000014 atexit
02000dc4 g     O .rwdata	00000004 _impure_ptr
020013b4 g     O .bss	00000004 alt_argc
02000488 g     F .text	00000064 _do_dtors
02000da8 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
02000dc8 g       *ABS*	00000000 _edata
020013c4 g       *ABS*	00000000 _end
02000020 g       *ABS*	00000000 __ram_exceptions_end
020005b4 g     F .text	00000034 exit
03000000 g       *ABS*	00000000 __alt_data_end
02000000 g       *ABS*	00000000 __alt_mem_sdram
02000798 g     F .text	00000038 _exit
020004ec g     F .text	00000020 alt_icache_flush_all
02000424 g     F .text	00000064 _do_ctors
020002fc g     F .text	000000dc close
0200017c g     F .text	00000084 alt_load



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08400814 	ori	at,at,32
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

02000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 2000020:	06c0c034 	movhi	sp,768
    ori sp, sp, %lo(__alt_stack_pointer)
 2000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 2000028:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 200002c:	d6a36a14 	ori	gp,gp,36264
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 2000030:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 2000034:	1084ed14 	ori	r2,r2,5044

    movhi r3, %hi(__bss_end)
 2000038:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 200003c:	18c4f114 	ori	r3,r3,5060

    beq r2, r3, 1f
 2000040:	10c00326 	beq	r2,r3,2000050 <_start+0x30>

0:
    stw zero, (r2)
 2000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 2000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 200004c:	10fffd36 	bltu	r2,r3,2000044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 2000050:	200017c0 	call	200017c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 2000054:	20002000 	call	2000200 <alt_main>

02000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000058:	003fff06 	br	2000058 <alt_after_alt_main>

0200005c <main>:
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
 200005c:	defff904 	addi	sp,sp,-28
 2000060:	df000615 	stw	fp,24(sp)
 2000064:	df000604 	addi	fp,sp,24
	volatile unsigned int *LED_PIO = (unsigned int*)0x90; //make a pointer to access the PIO block
 2000068:	00802404 	movi	r2,144
 200006c:	e0bfff15 	stw	r2,-4(fp)
	volatile unsigned int *SWITCH = (unsigned int*)0x80;
 2000070:	00802004 	movi	r2,128
 2000074:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int *RUN = (unsigned int*)0x70;
 2000078:	00801c04 	movi	r2,112
 200007c:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *RESET = (unsigned int*)0x60;
 2000080:	00801804 	movi	r2,96
 2000084:	e0bffc15 	stw	r2,-16(fp)

	*LED_PIO = 0; //clear all LEDs
 2000088:	e0bfff17 	ldw	r2,-4(fp)
 200008c:	10000015 	stw	zero,0(r2)
//		for (i = 0; i < 100000; i++); //software delay
//		*LED_PIO &= ~0x1; //clear LSB
//	}
//	return 1; //never gets here

	volatile unsigned int value = 0;
 2000090:	e03ffb15 	stw	zero,-20(fp)
	volatile unsigned int halt = 0;
 2000094:	e03ffa15 	stw	zero,-24(fp)

	while ((1+1) != 3){
		if (*RESET == 1){
 2000098:	e0bffc17 	ldw	r2,-16(fp)
 200009c:	10800017 	ldw	r2,0(r2)
 20000a0:	10800058 	cmpnei	r2,r2,1
 20000a4:	1000031e 	bne	r2,zero,20000b4 <main+0x58>
			*LED_PIO = 0;
 20000a8:	e0bfff17 	ldw	r2,-4(fp)
 20000ac:	10000015 	stw	zero,0(r2)
 20000b0:	003ff906 	br	2000098 <main+0x3c>
		}
		else{
		if (*RUN == 1 && halt == 0){
 20000b4:	e0bffd17 	ldw	r2,-12(fp)
 20000b8:	10800017 	ldw	r2,0(r2)
 20000bc:	10800058 	cmpnei	r2,r2,1
 20000c0:	10000c1e 	bne	r2,zero,20000f4 <main+0x98>
 20000c4:	e0bffa17 	ldw	r2,-24(fp)
 20000c8:	10000a1e 	bne	r2,zero,20000f4 <main+0x98>
			value += *SWITCH;
 20000cc:	e0bffe17 	ldw	r2,-8(fp)
 20000d0:	10c00017 	ldw	r3,0(r2)
 20000d4:	e0bffb17 	ldw	r2,-20(fp)
 20000d8:	1885883a 	add	r2,r3,r2
 20000dc:	e0bffb15 	stw	r2,-20(fp)
			*LED_PIO = value;
 20000e0:	e0fffb17 	ldw	r3,-20(fp)
 20000e4:	e0bfff17 	ldw	r2,-4(fp)
 20000e8:	10c00015 	stw	r3,0(r2)
			halt = 1;
 20000ec:	00800044 	movi	r2,1
 20000f0:	e0bffa15 	stw	r2,-24(fp)
		}
		if (*RUN == 0 && halt == 1){
 20000f4:	e0bffd17 	ldw	r2,-12(fp)
 20000f8:	10800017 	ldw	r2,0(r2)
 20000fc:	103fe61e 	bne	r2,zero,2000098 <main+0x3c>
 2000100:	e0bffa17 	ldw	r2,-24(fp)
 2000104:	10800058 	cmpnei	r2,r2,1
 2000108:	103fe31e 	bne	r2,zero,2000098 <main+0x3c>
			halt = 0;
 200010c:	e03ffa15 	stw	zero,-24(fp)
		if (*RESET == 1){
 2000110:	003fe106 	br	2000098 <main+0x3c>

02000114 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2000114:	defffc04 	addi	sp,sp,-16
 2000118:	df000315 	stw	fp,12(sp)
 200011c:	df000304 	addi	fp,sp,12
 2000120:	e13fff15 	stw	r4,-4(fp)
 2000124:	e17ffe15 	stw	r5,-8(fp)
 2000128:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 200012c:	e0fffe17 	ldw	r3,-8(fp)
 2000130:	e0bfff17 	ldw	r2,-4(fp)
 2000134:	18800c26 	beq	r3,r2,2000168 <alt_load_section+0x54>
  {
    while( to != end )
 2000138:	00000806 	br	200015c <alt_load_section+0x48>
    {
      *to++ = *from++;
 200013c:	e0ffff17 	ldw	r3,-4(fp)
 2000140:	18800104 	addi	r2,r3,4
 2000144:	e0bfff15 	stw	r2,-4(fp)
 2000148:	e0bffe17 	ldw	r2,-8(fp)
 200014c:	11000104 	addi	r4,r2,4
 2000150:	e13ffe15 	stw	r4,-8(fp)
 2000154:	18c00017 	ldw	r3,0(r3)
 2000158:	10c00015 	stw	r3,0(r2)
    while( to != end )
 200015c:	e0fffe17 	ldw	r3,-8(fp)
 2000160:	e0bffd17 	ldw	r2,-12(fp)
 2000164:	18bff51e 	bne	r3,r2,200013c <alt_load_section+0x28>
    }
  }
}
 2000168:	0001883a 	nop
 200016c:	e037883a 	mov	sp,fp
 2000170:	df000017 	ldw	fp,0(sp)
 2000174:	dec00104 	addi	sp,sp,4
 2000178:	f800283a 	ret

0200017c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200017c:	defffe04 	addi	sp,sp,-8
 2000180:	dfc00115 	stw	ra,4(sp)
 2000184:	df000015 	stw	fp,0(sp)
 2000188:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200018c:	01808034 	movhi	r6,512
 2000190:	31837204 	addi	r6,r6,3528
 2000194:	01408034 	movhi	r5,512
 2000198:	2941f704 	addi	r5,r5,2012
 200019c:	01008034 	movhi	r4,512
 20001a0:	21037204 	addi	r4,r4,3528
 20001a4:	20001140 	call	2000114 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 20001a8:	01808034 	movhi	r6,512
 20001ac:	31800804 	addi	r6,r6,32
 20001b0:	01408034 	movhi	r5,512
 20001b4:	29400804 	addi	r5,r5,32
 20001b8:	01008034 	movhi	r4,512
 20001bc:	21000804 	addi	r4,r4,32
 20001c0:	20001140 	call	2000114 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 20001c4:	01808034 	movhi	r6,512
 20001c8:	3181f704 	addi	r6,r6,2012
 20001cc:	01408034 	movhi	r5,512
 20001d0:	2941f404 	addi	r5,r5,2000
 20001d4:	01008034 	movhi	r4,512
 20001d8:	2101f404 	addi	r4,r4,2000
 20001dc:	20001140 	call	2000114 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 20001e0:	20003d80 	call	20003d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 20001e4:	20004ec0 	call	20004ec <alt_icache_flush_all>
}
 20001e8:	0001883a 	nop
 20001ec:	e037883a 	mov	sp,fp
 20001f0:	dfc00117 	ldw	ra,4(sp)
 20001f4:	df000017 	ldw	fp,0(sp)
 20001f8:	dec00204 	addi	sp,sp,8
 20001fc:	f800283a 	ret

02000200 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2000200:	defffd04 	addi	sp,sp,-12
 2000204:	dfc00215 	stw	ra,8(sp)
 2000208:	df000115 	stw	fp,4(sp)
 200020c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2000210:	0009883a 	mov	r4,zero
 2000214:	20002600 	call	2000260 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2000218:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200021c:	200029c0 	call	200029c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2000220:	20004240 	call	2000424 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2000224:	01008034 	movhi	r4,512
 2000228:	21012204 	addi	r4,r4,1160
 200022c:	20005a00 	call	20005a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2000230:	d0a18317 	ldw	r2,-31220(gp)
 2000234:	d0e18417 	ldw	r3,-31216(gp)
 2000238:	d1218517 	ldw	r4,-31212(gp)
 200023c:	200d883a 	mov	r6,r4
 2000240:	180b883a 	mov	r5,r3
 2000244:	1009883a 	mov	r4,r2
 2000248:	200005c0 	call	200005c <main>
 200024c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2000250:	01000044 	movi	r4,1
 2000254:	20002fc0 	call	20002fc <close>
  exit (result);
 2000258:	e13fff17 	ldw	r4,-4(fp)
 200025c:	20005b40 	call	20005b4 <exit>

02000260 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2000260:	defffd04 	addi	sp,sp,-12
 2000264:	dfc00215 	stw	ra,8(sp)
 2000268:	df000115 	stw	fp,4(sp)
 200026c:	df000104 	addi	fp,sp,4
 2000270:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 2000274:	200057c0 	call	200057c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2000278:	00800044 	movi	r2,1
 200027c:	1001703a 	wrctl	status,r2
#if defined(NIOS2_EIC_PRESENT) && (NIOS2_NUM_OF_SHADOW_REG_SETS > 0)
    | NIOS2_STATUS_RSIE_MSK
#endif      
      );
}
 2000280:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 2000284:	0001883a 	nop
 2000288:	e037883a 	mov	sp,fp
 200028c:	dfc00117 	ldw	ra,4(sp)
 2000290:	df000017 	ldw	fp,0(sp)
 2000294:	dec00204 	addi	sp,sp,8
 2000298:	f800283a 	ret

0200029c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 200029c:	deffff04 	addi	sp,sp,-4
 20002a0:	df000015 	stw	fp,0(sp)
 20002a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 20002a8:	0001883a 	nop
}
 20002ac:	0001883a 	nop
 20002b0:	e037883a 	mov	sp,fp
 20002b4:	df000017 	ldw	fp,0(sp)
 20002b8:	dec00104 	addi	sp,sp,4
 20002bc:	f800283a 	ret

020002c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20002c0:	defffe04 	addi	sp,sp,-8
 20002c4:	dfc00115 	stw	ra,4(sp)
 20002c8:	df000015 	stw	fp,0(sp)
 20002cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20002d0:	d0a00517 	ldw	r2,-32748(gp)
 20002d4:	10000326 	beq	r2,zero,20002e4 <alt_get_errno+0x24>
 20002d8:	d0a00517 	ldw	r2,-32748(gp)
 20002dc:	103ee83a 	callr	r2
 20002e0:	00000106 	br	20002e8 <alt_get_errno+0x28>
 20002e4:	d0a18604 	addi	r2,gp,-31208
}
 20002e8:	e037883a 	mov	sp,fp
 20002ec:	dfc00117 	ldw	ra,4(sp)
 20002f0:	df000017 	ldw	fp,0(sp)
 20002f4:	dec00204 	addi	sp,sp,8
 20002f8:	f800283a 	ret

020002fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 20002fc:	defffb04 	addi	sp,sp,-20
 2000300:	dfc00415 	stw	ra,16(sp)
 2000304:	df000315 	stw	fp,12(sp)
 2000308:	df000304 	addi	fp,sp,12
 200030c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2000310:	e0bffd17 	ldw	r2,-12(fp)
 2000314:	10000916 	blt	r2,zero,200033c <close+0x40>
 2000318:	e0fffd17 	ldw	r3,-12(fp)
 200031c:	1805883a 	mov	r2,r3
 2000320:	1085883a 	add	r2,r2,r2
 2000324:	10c5883a 	add	r2,r2,r3
 2000328:	100490ba 	slli	r2,r2,2
 200032c:	00c08034 	movhi	r3,512
 2000330:	18c20104 	addi	r3,r3,2052
 2000334:	10c5883a 	add	r2,r2,r3
 2000338:	00000106 	br	2000340 <close+0x44>
 200033c:	0005883a 	mov	r2,zero
 2000340:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 2000344:	e0bfff17 	ldw	r2,-4(fp)
 2000348:	10001926 	beq	r2,zero,20003b0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200034c:	e0bfff17 	ldw	r2,-4(fp)
 2000350:	10800017 	ldw	r2,0(r2)
 2000354:	10800417 	ldw	r2,16(r2)
 2000358:	10000626 	beq	r2,zero,2000374 <close+0x78>
 200035c:	e0bfff17 	ldw	r2,-4(fp)
 2000360:	10800017 	ldw	r2,0(r2)
 2000364:	10800417 	ldw	r2,16(r2)
 2000368:	e13fff17 	ldw	r4,-4(fp)
 200036c:	103ee83a 	callr	r2
 2000370:	00000106 	br	2000378 <close+0x7c>
 2000374:	0005883a 	mov	r2,zero
 2000378:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200037c:	e13ffd17 	ldw	r4,-12(fp)
 2000380:	200050c0 	call	200050c <alt_release_fd>
    if (rval < 0)
 2000384:	e0bffe17 	ldw	r2,-8(fp)
 2000388:	1000070e 	bge	r2,zero,20003a8 <close+0xac>
    {
      ALT_ERRNO = -rval;
 200038c:	20002c00 	call	20002c0 <alt_get_errno>
 2000390:	1007883a 	mov	r3,r2
 2000394:	e0bffe17 	ldw	r2,-8(fp)
 2000398:	0085c83a 	sub	r2,zero,r2
 200039c:	18800015 	stw	r2,0(r3)
      return -1;
 20003a0:	00bfffc4 	movi	r2,-1
 20003a4:	00000706 	br	20003c4 <close+0xc8>
    }
    return 0;
 20003a8:	0005883a 	mov	r2,zero
 20003ac:	00000506 	br	20003c4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20003b0:	20002c00 	call	20002c0 <alt_get_errno>
 20003b4:	1007883a 	mov	r3,r2
 20003b8:	00801444 	movi	r2,81
 20003bc:	18800015 	stw	r2,0(r3)
    return -1;
 20003c0:	00bfffc4 	movi	r2,-1
  }
}
 20003c4:	e037883a 	mov	sp,fp
 20003c8:	dfc00117 	ldw	ra,4(sp)
 20003cc:	df000017 	ldw	fp,0(sp)
 20003d0:	dec00204 	addi	sp,sp,8
 20003d4:	f800283a 	ret

020003d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 20003d8:	deffff04 	addi	sp,sp,-4
 20003dc:	df000015 	stw	fp,0(sp)
 20003e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 20003e4:	0001883a 	nop
 20003e8:	e037883a 	mov	sp,fp
 20003ec:	df000017 	ldw	fp,0(sp)
 20003f0:	dec00104 	addi	sp,sp,4
 20003f4:	f800283a 	ret

020003f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 20003f8:	defffc04 	addi	sp,sp,-16
 20003fc:	df000315 	stw	fp,12(sp)
 2000400:	df000304 	addi	fp,sp,12
 2000404:	e13fff15 	stw	r4,-4(fp)
 2000408:	e17ffe15 	stw	r5,-8(fp)
 200040c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 2000410:	e0bffd17 	ldw	r2,-12(fp)
}
 2000414:	e037883a 	mov	sp,fp
 2000418:	df000017 	ldw	fp,0(sp)
 200041c:	dec00104 	addi	sp,sp,4
 2000420:	f800283a 	ret

02000424 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2000424:	defffd04 	addi	sp,sp,-12
 2000428:	dfc00215 	stw	ra,8(sp)
 200042c:	df000115 	stw	fp,4(sp)
 2000430:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2000434:	00808034 	movhi	r2,512
 2000438:	1081f304 	addi	r2,r2,1996
 200043c:	e0bfff15 	stw	r2,-4(fp)
 2000440:	00000606 	br	200045c <_do_ctors+0x38>
        (*ctor) (); 
 2000444:	e0bfff17 	ldw	r2,-4(fp)
 2000448:	10800017 	ldw	r2,0(r2)
 200044c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2000450:	e0bfff17 	ldw	r2,-4(fp)
 2000454:	10bfff04 	addi	r2,r2,-4
 2000458:	e0bfff15 	stw	r2,-4(fp)
 200045c:	e0ffff17 	ldw	r3,-4(fp)
 2000460:	00808034 	movhi	r2,512
 2000464:	1081f404 	addi	r2,r2,2000
 2000468:	18bff62e 	bgeu	r3,r2,2000444 <_do_ctors+0x20>
}
 200046c:	0001883a 	nop
 2000470:	0001883a 	nop
 2000474:	e037883a 	mov	sp,fp
 2000478:	dfc00117 	ldw	ra,4(sp)
 200047c:	df000017 	ldw	fp,0(sp)
 2000480:	dec00204 	addi	sp,sp,8
 2000484:	f800283a 	ret

02000488 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2000488:	defffd04 	addi	sp,sp,-12
 200048c:	dfc00215 	stw	ra,8(sp)
 2000490:	df000115 	stw	fp,4(sp)
 2000494:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2000498:	00808034 	movhi	r2,512
 200049c:	1081f304 	addi	r2,r2,1996
 20004a0:	e0bfff15 	stw	r2,-4(fp)
 20004a4:	00000606 	br	20004c0 <_do_dtors+0x38>
        (*dtor) (); 
 20004a8:	e0bfff17 	ldw	r2,-4(fp)
 20004ac:	10800017 	ldw	r2,0(r2)
 20004b0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 20004b4:	e0bfff17 	ldw	r2,-4(fp)
 20004b8:	10bfff04 	addi	r2,r2,-4
 20004bc:	e0bfff15 	stw	r2,-4(fp)
 20004c0:	e0ffff17 	ldw	r3,-4(fp)
 20004c4:	00808034 	movhi	r2,512
 20004c8:	1081f404 	addi	r2,r2,2000
 20004cc:	18bff62e 	bgeu	r3,r2,20004a8 <_do_dtors+0x20>
}
 20004d0:	0001883a 	nop
 20004d4:	0001883a 	nop
 20004d8:	e037883a 	mov	sp,fp
 20004dc:	dfc00117 	ldw	ra,4(sp)
 20004e0:	df000017 	ldw	fp,0(sp)
 20004e4:	dec00204 	addi	sp,sp,8
 20004e8:	f800283a 	ret

020004ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 20004ec:	deffff04 	addi	sp,sp,-4
 20004f0:	df000015 	stw	fp,0(sp)
 20004f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 20004f8:	0001883a 	nop
 20004fc:	e037883a 	mov	sp,fp
 2000500:	df000017 	ldw	fp,0(sp)
 2000504:	dec00104 	addi	sp,sp,4
 2000508:	f800283a 	ret

0200050c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200050c:	defffe04 	addi	sp,sp,-8
 2000510:	df000115 	stw	fp,4(sp)
 2000514:	df000104 	addi	fp,sp,4
 2000518:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200051c:	e0bfff17 	ldw	r2,-4(fp)
 2000520:	108000d0 	cmplti	r2,r2,3
 2000524:	1000101e 	bne	r2,zero,2000568 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 2000528:	e0ffff17 	ldw	r3,-4(fp)
 200052c:	1805883a 	mov	r2,r3
 2000530:	1085883a 	add	r2,r2,r2
 2000534:	10c5883a 	add	r2,r2,r3
 2000538:	100490ba 	slli	r2,r2,2
 200053c:	00c08034 	movhi	r3,512
 2000540:	10c7883a 	add	r3,r2,r3
 2000544:	18020315 	stw	zero,2060(r3)
    alt_fd_list[fd].dev      = 0;
 2000548:	e0ffff17 	ldw	r3,-4(fp)
 200054c:	1805883a 	mov	r2,r3
 2000550:	1085883a 	add	r2,r2,r2
 2000554:	10c5883a 	add	r2,r2,r3
 2000558:	100490ba 	slli	r2,r2,2
 200055c:	00c08034 	movhi	r3,512
 2000560:	10c7883a 	add	r3,r2,r3
 2000564:	18020115 	stw	zero,2052(r3)
  }
}
 2000568:	0001883a 	nop
 200056c:	e037883a 	mov	sp,fp
 2000570:	df000017 	ldw	fp,0(sp)
 2000574:	dec00104 	addi	sp,sp,4
 2000578:	f800283a 	ret

0200057c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 200057c:	deffff04 	addi	sp,sp,-4
 2000580:	df000015 	stw	fp,0(sp)
 2000584:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2000588:	000170fa 	wrctl	ienable,zero
}
 200058c:	0001883a 	nop
 2000590:	e037883a 	mov	sp,fp
 2000594:	df000017 	ldw	fp,0(sp)
 2000598:	dec00104 	addi	sp,sp,4
 200059c:	f800283a 	ret

020005a0 <atexit>:
 20005a0:	200b883a 	mov	r5,r4
 20005a4:	000f883a 	mov	r7,zero
 20005a8:	000d883a 	mov	r6,zero
 20005ac:	0009883a 	mov	r4,zero
 20005b0:	20005e81 	jmpi	20005e8 <__register_exitproc>

020005b4 <exit>:
 20005b4:	defffe04 	addi	sp,sp,-8
 20005b8:	000b883a 	mov	r5,zero
 20005bc:	dc000015 	stw	r16,0(sp)
 20005c0:	dfc00115 	stw	ra,4(sp)
 20005c4:	2021883a 	mov	r16,r4
 20005c8:	20006780 	call	2000678 <__call_exitprocs>
 20005cc:	00808034 	movhi	r2,512
 20005d0:	11037017 	ldw	r4,3520(r2)
 20005d4:	20800f17 	ldw	r2,60(r4)
 20005d8:	10000126 	beq	r2,zero,20005e0 <exit+0x2c>
 20005dc:	103ee83a 	callr	r2
 20005e0:	8009883a 	mov	r4,r16
 20005e4:	20007980 	call	2000798 <_exit>

020005e8 <__register_exitproc>:
 20005e8:	00808034 	movhi	r2,512
 20005ec:	10c37017 	ldw	r3,3520(r2)
 20005f0:	18805217 	ldw	r2,328(r3)
 20005f4:	10001726 	beq	r2,zero,2000654 <__register_exitproc+0x6c>
 20005f8:	10c00117 	ldw	r3,4(r2)
 20005fc:	1a000808 	cmpgei	r8,r3,32
 2000600:	40001b1e 	bne	r8,zero,2000670 <__register_exitproc+0x88>
 2000604:	20000b26 	beq	r4,zero,2000634 <__register_exitproc+0x4c>
 2000608:	181090ba 	slli	r8,r3,2
 200060c:	02400044 	movi	r9,1
 2000610:	48d2983a 	sll	r9,r9,r3
 2000614:	1211883a 	add	r8,r2,r8
 2000618:	41802215 	stw	r6,136(r8)
 200061c:	11806217 	ldw	r6,392(r2)
 2000620:	21000098 	cmpnei	r4,r4,2
 2000624:	324cb03a 	or	r6,r6,r9
 2000628:	11806215 	stw	r6,392(r2)
 200062c:	41c04215 	stw	r7,264(r8)
 2000630:	20000b26 	beq	r4,zero,2000660 <__register_exitproc+0x78>
 2000634:	19000084 	addi	r4,r3,2
 2000638:	200890ba 	slli	r4,r4,2
 200063c:	18c00044 	addi	r3,r3,1
 2000640:	10c00115 	stw	r3,4(r2)
 2000644:	1105883a 	add	r2,r2,r4
 2000648:	11400015 	stw	r5,0(r2)
 200064c:	0005883a 	mov	r2,zero
 2000650:	f800283a 	ret
 2000654:	18805304 	addi	r2,r3,332
 2000658:	18805215 	stw	r2,328(r3)
 200065c:	003fe606 	br	20005f8 <__register_exitproc+0x10>
 2000660:	11006317 	ldw	r4,396(r2)
 2000664:	2252b03a 	or	r9,r4,r9
 2000668:	12406315 	stw	r9,396(r2)
 200066c:	003ff106 	br	2000634 <__register_exitproc+0x4c>
 2000670:	00bfffc4 	movi	r2,-1
 2000674:	f800283a 	ret

02000678 <__call_exitprocs>:
 2000678:	defff704 	addi	sp,sp,-36
 200067c:	00808034 	movhi	r2,512
 2000680:	dcc00315 	stw	r19,12(sp)
 2000684:	14c37017 	ldw	r19,3520(r2)
 2000688:	dc800215 	stw	r18,8(sp)
 200068c:	dfc00815 	stw	ra,32(sp)
 2000690:	9c805217 	ldw	r18,328(r19)
 2000694:	ddc00715 	stw	r23,28(sp)
 2000698:	dd800615 	stw	r22,24(sp)
 200069c:	dd400515 	stw	r21,20(sp)
 20006a0:	dd000415 	stw	r20,16(sp)
 20006a4:	dc400115 	stw	r17,4(sp)
 20006a8:	dc000015 	stw	r16,0(sp)
 20006ac:	90001026 	beq	r18,zero,20006f0 <__call_exitprocs+0x78>
 20006b0:	202b883a 	mov	r21,r4
 20006b4:	282d883a 	mov	r22,r5
 20006b8:	05000044 	movi	r20,1
 20006bc:	94000117 	ldw	r16,4(r18)
 20006c0:	847fffc4 	addi	r17,r16,-1
 20006c4:	88000a16 	blt	r17,zero,20006f0 <__call_exitprocs+0x78>
 20006c8:	84000044 	addi	r16,r16,1
 20006cc:	802090ba 	slli	r16,r16,2
 20006d0:	9421883a 	add	r16,r18,r16
 20006d4:	b0001126 	beq	r22,zero,200071c <__call_exitprocs+0xa4>
 20006d8:	80804017 	ldw	r2,256(r16)
 20006dc:	15800f26 	beq	r2,r22,200071c <__call_exitprocs+0xa4>
 20006e0:	8c7fffc4 	addi	r17,r17,-1
 20006e4:	88bfffd8 	cmpnei	r2,r17,-1
 20006e8:	843fff04 	addi	r16,r16,-4
 20006ec:	103ff91e 	bne	r2,zero,20006d4 <__call_exitprocs+0x5c>
 20006f0:	dfc00817 	ldw	ra,32(sp)
 20006f4:	ddc00717 	ldw	r23,28(sp)
 20006f8:	dd800617 	ldw	r22,24(sp)
 20006fc:	dd400517 	ldw	r21,20(sp)
 2000700:	dd000417 	ldw	r20,16(sp)
 2000704:	dcc00317 	ldw	r19,12(sp)
 2000708:	dc800217 	ldw	r18,8(sp)
 200070c:	dc400117 	ldw	r17,4(sp)
 2000710:	dc000017 	ldw	r16,0(sp)
 2000714:	dec00904 	addi	sp,sp,36
 2000718:	f800283a 	ret
 200071c:	90800117 	ldw	r2,4(r18)
 2000720:	81800017 	ldw	r6,0(r16)
 2000724:	10bfffc4 	addi	r2,r2,-1
 2000728:	14401726 	beq	r2,r17,2000788 <__call_exitprocs+0x110>
 200072c:	80000015 	stw	zero,0(r16)
 2000730:	303feb26 	beq	r6,zero,20006e0 <__call_exitprocs+0x68>
 2000734:	a446983a 	sll	r3,r20,r17
 2000738:	90806217 	ldw	r2,392(r18)
 200073c:	95c00117 	ldw	r23,4(r18)
 2000740:	1884703a 	and	r2,r3,r2
 2000744:	1000081e 	bne	r2,zero,2000768 <__call_exitprocs+0xf0>
 2000748:	303ee83a 	callr	r6
 200074c:	90c00117 	ldw	r3,4(r18)
 2000750:	98805217 	ldw	r2,328(r19)
 2000754:	1dc0011e 	bne	r3,r23,200075c <__call_exitprocs+0xe4>
 2000758:	90bfe126 	beq	r18,r2,20006e0 <__call_exitprocs+0x68>
 200075c:	103fe426 	beq	r2,zero,20006f0 <__call_exitprocs+0x78>
 2000760:	1025883a 	mov	r18,r2
 2000764:	003fd506 	br	20006bc <__call_exitprocs+0x44>
 2000768:	90806317 	ldw	r2,396(r18)
 200076c:	81002017 	ldw	r4,128(r16)
 2000770:	1886703a 	and	r3,r3,r2
 2000774:	1800061e 	bne	r3,zero,2000790 <__call_exitprocs+0x118>
 2000778:	200b883a 	mov	r5,r4
 200077c:	a809883a 	mov	r4,r21
 2000780:	303ee83a 	callr	r6
 2000784:	003ff106 	br	200074c <__call_exitprocs+0xd4>
 2000788:	94400115 	stw	r17,4(r18)
 200078c:	003fe806 	br	2000730 <__call_exitprocs+0xb8>
 2000790:	303ee83a 	callr	r6
 2000794:	003fed06 	br	200074c <__call_exitprocs+0xd4>

02000798 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2000798:	defffd04 	addi	sp,sp,-12
 200079c:	df000215 	stw	fp,8(sp)
 20007a0:	df000204 	addi	fp,sp,8
 20007a4:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20007a8:	0001883a 	nop
 20007ac:	e0bffe17 	ldw	r2,-8(fp)
 20007b0:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 20007b4:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20007b8:	10000226 	beq	r2,zero,20007c4 <_exit+0x2c>
    ALT_SIM_FAIL();
 20007bc:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 20007c0:	00000106 	br	20007c8 <_exit+0x30>
    ALT_SIM_PASS();
 20007c4:	002af0b0 	cmpltui	zero,zero,43970
}
 20007c8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 20007cc:	003fff06 	br	20007cc <_exit+0x34>
