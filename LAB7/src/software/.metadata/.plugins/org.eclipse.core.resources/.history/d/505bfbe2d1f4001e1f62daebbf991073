#include <stdint.h>

// Definitions for easier handling of peripherals
#define LED_PIO_BASE       0x70 // Base address for the LED PIO
#define SWITCH_PIO_BASE    0x60 // Base address for the Switch PIO
#define BUTTON_PIO_BASE    0x50 // Base address for the Button PIO

// Function prototypes for button handling
void waitForButtonRelease(uint8_t button);

int main() {
    // Pointer initializations for the LEDs, switches, and buttons
    volatile uint8_t *LED_PIO = (uint8_t*)LED_PIO_BASE;
    volatile uint8_t *SWITCH_PIO = (uint8_t*)SWITCH_PIO_BASE;
    volatile uint8_t *BUTTON_PIO = (uint8_t*)BUTTON_PIO_BASE;

    uint8_t accumulator = 0; // Accumulator for the switch values

    *LED_PIO = accumulator; // Initialize LEDs to show the accumulator value (0 at start)

    while (1) { // Infinite loop
        if (*BUTTON_PIO & 0x04) { // Check if Reset button (KEY[2]) is pressed
            accumulator = 0; // Reset the accumulator
            *LED_PIO = accumulator; // Update LEDs
            waitForButtonRelease(0x04); // Wait for the Reset button to be released
        } else if (*BUTTON_PIO & 0x08) { // Check if Accumulate button (KEY[3]) is pressed
            uint8_t switchValue = *SWITCH_PIO; // Read the switch values
            accumulator += switchValue; // Add the switch value to the accumulator
            if (accumulator < switchValue) { // Check for overflow
                accumulator = 0; // Reset accumulator to 0 on overflow
            }
            *LED_PIO = accumulator; // Update LEDs to show the new accumulator value
            waitForButtonRelease(0x08); // Wait for the Accumulate button to be released
        }
    }
    return 1; // This point is never reached
}

// Function to wait until a specified button is released
void waitForButtonRelease(uint8_t button) {
    volatile uint8_t *BUTTON_PIO = (uint8_t*)BUTTON_PIO_BASE;
    while (*BUTTON_PIO & button) {
        // Loop until the button is released
    }
}
